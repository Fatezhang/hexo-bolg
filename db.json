{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wx.jpg","path":"images/wx.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/tx.jpg","path":"images/tx.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554907516172},{"_id":"source/CNAME","hash":"e9145000c4ed0a2dfe0cfb56286b6fe127836bbd","modified":1554439587293},{"_id":"source/baidu_verify_mJpFi2Z3mB.html","hash":"6c01876f88c2e62035182f93e0e17b30f0312754","modified":1554907516175},{"_id":"source/google05dcfde650a3d64e.html","hash":"78a4b5927270f670ef72540ff23a9d31377095e4","modified":1554907516177},{"_id":"source/robots.txt","hash":"07c57cfe432ec3b672299dbac91766620c8259f2","modified":1554907516181},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1554439587398},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1554439587401},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1554439587403},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1554439587406},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1554439587409},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1554439587411},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1554439587414},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1554439587417},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1554439587419},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1554439587423},{"_id":"themes/next/_config.yml","hash":"5b83e8483ca4d1d02e41f9f26c2a4e6989133c74","modified":1554909869966},{"_id":"themes/next/baidu_verify_HlvKEOqagE.html","hash":"502ff1491fffd9742de55b594b481bc9f3c8f1c9","modified":1554439587429},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1554439587432},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1554439587434},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1554439587641},{"_id":"source/_posts/Java中map新的骚操作.md","hash":"e6450a754a848fce0a2d8e75555231dca5490e36","modified":1554439587297},{"_id":"source/_posts/hexo博客文章置顶方式.md","hash":"c8fa20b5ea8d47746c2c9891ec7008976abc7c40","modified":1554439587299},{"_id":"source/_posts/dubbo 服务降级.md","hash":"bb15bb2e33bb14a0bb56e14e82c7b10edd024d32","modified":1555737751094},{"_id":"source/_posts/layui开发中结合freemarker展示字典数据.md","hash":"0651570063fc5c1f9f7499b72306d6be01740ba1","modified":1554439587303},{"_id":"source/_posts/leetcode-Z字形变换.md","hash":"6999ad12851d7e79e1a9fc1d56ba8660623f7065","modified":1555601617038},{"_id":"source/_posts/new-article.md","hash":"843c6c024cd3a594221ed4abac54914ee3116973","modified":1555739255260},{"_id":"source/_posts/nodepad-不用插件去重的方法.md","hash":"be87aa7294b2113e1d5965724f0e08600a3f4ec3","modified":1554439587305},{"_id":"source/_posts/springboot+shiro解决session污染问题.md","hash":"935c292182870f7c204c8e5b65c77aea86a3f991","modified":1554439587312},{"_id":"source/_posts/spring-boot微服务搭建.md","hash":"6fef43e570ff7a231463d1241dcc885c664d8fe4","modified":1554439587308},{"_id":"source/_posts/vlog-程序员的一天.md","hash":"01e4e548b84c27a56bff24a682389b1b6cfb6992","modified":1554439587314},{"_id":"source/_posts/一个菜鸟在三星实习的感受.md","hash":"3407fc9d4ef748ba5a0a47928391778f1e0ae73a","modified":1554439587317},{"_id":"source/_posts/使用springboot进行国际化时自定义读取数据库配置.md","hash":"c8ab08a8a814bb4d72ec155e454a223c1a00a942","modified":1554439587320},{"_id":"source/_posts/关于IDEA再从git或者svn上导入项目时不能加载字模块的问题.md","hash":"8609e1ae84db47367711b2b2824a837b875a2bcd","modified":1554439587322},{"_id":"source/_posts/开发日记-20180718.md","hash":"2130e3c651e1665503316421be9a368297301be0","modified":1554439587328},{"_id":"source/_posts/关于git-pull-拉取不到最新记录.md","hash":"d7798fd152b7826581ba375b1479956d217645be","modified":1554439587325},{"_id":"source/_posts/开发日记-20180828.md","hash":"9a6ef9c132b8b4d00d52fee79d3c8e2ee648123d","modified":1554439587332},{"_id":"source/_posts/校招面试经历.md","hash":"33e845c141d48ecac66a00354029d9542283a0f5","modified":1554439587335},{"_id":"source/_posts/泰国7天6晚自由行攻略.md","hash":"ec28eff7d4ad11ba160bd14a75bfd1c802b3a2a3","modified":1555601538615},{"_id":"source/_posts/纪念即将结束的第一份工作.md","hash":"870530d0f01183c7382c0909ea98031f5d124333","modified":1554439587341},{"_id":"source/about/index.md","hash":"c5774462a4078572e11a3f11ccae7307272c1c9b","modified":1555841833122},{"_id":"source/categories/index.md","hash":"154591dd29c732c370f342a6c2cfdff61a21e1e8","modified":1554439587354},{"_id":"source/archives/index.md","hash":"7a9b6a9d98941aabaebb2b5321d9e6a951b20156","modified":1554439587348},{"_id":"source/message/index.md","hash":"bf250e0936cbad84deeb8c3b55f9e300e8a2b3ab","modified":1554439587356},{"_id":"source/tags/tags.md","hash":"3f929add403fbec904b8ba8b66c331022e5f813f","modified":1554439587359},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1554439587436},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1554439587444},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1554439587439},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1554439587441},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1554439587447},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1554439587445},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1554439587448},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1554439587449},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1554439587450},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1554439587452},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1554439587456},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1554439587458},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1554439587454},{"_id":"themes/next/languages/zh-Hans.yml","hash":"695dc19c6baccc46617fbf4e929c1cdb482b9e27","modified":1554439587461},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1554439587467},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1554439587464},{"_id":"themes/next/layout/_layout.swig","hash":"bfbac0265f759bffa98cfbdeaa0308ce1f867b88","modified":1554439587475},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1554439587630},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1554439587631},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1554439587632},{"_id":"themes/next/layout/page.swig","hash":"e1e19fd7a92a8cb21fa7e923d450c39a220ece07","modified":1554439587634},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1554439587636},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1554439587637},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1554439587639},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1554439587642},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1554439587644},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1554439588191},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1554439588193},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1554439588195},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554439587856},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1554439587472},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1554439587474},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1554439587479},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1554439587482},{"_id":"themes/next/layout/_macro/post.swig","hash":"c0d64b2ad475d3a61428b944ee718eaf1eb4b8b8","modified":1554439587483},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1554439587487},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"d8162d38f43f834af9baf11e8fa4886e260a16d3","modified":1554439587490},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1554439587493},{"_id":"themes/next/layout/_partials/comments.swig","hash":"cd6d6556accb898f38fb8f6c14cf6353e94a4e68","modified":1554439587496},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4b5c88f3e66eb8b5656c311dde6024fde3656028","modified":1554439587499},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1554439587514},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1554439587502},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1554439587511},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1554439587517},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1554439587519},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1554439587538},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1554439587536},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1554439587546},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1554439587601},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1554439587602},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1554439587603},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1554439587604},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1554439587605},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1554439587607},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1554439587609},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1554439587646},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1554439587647},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1554439587649},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1554439587650},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1554439587653},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1554439587651},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1554439587654},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1554439587656},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1554439587655},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1554439587854},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1554439587859},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"14d0e19754b86dab0848d71ef52dae0b56ee89cc","modified":1554439587861},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1554439587869},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1554439587866},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1554439587864},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1554439587873},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1554439587871},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1554439587876},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1554439587878},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1554439587880},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"bc43dbac0ba5764d2d4a258d95d148883c292336","modified":1554439587883},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"d39e0e79040504c3aef8817bf7f3ee2f0e4ac5a1","modified":1554439587885},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554439587887},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1554439587889},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554439587891},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554439587897},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1554439587893},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1554439587895},{"_id":"themes/next/source/images/wx.jpg","hash":"5dd9e4fec63bf41a3705f1d217f6991ac4e7ef28","modified":1554439587904},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554439587542},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554439587542},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554439587780},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554439587781},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554439587786},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554439587847},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554439587852},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1554439587506},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1554439587509},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1554439587522},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1554439587525},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1554439587528},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1554439587530},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1554439587532},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1554439587533},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1554439587535},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1554439587539},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1554439587541},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1554439587545},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1554439587550},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1554439587553},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1554439587555},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"16cb23818909f57dac1a5ada66869971c33d7bd8","modified":1554439587558},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1554439587563},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1554439587561},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1554439587566},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1554439587569},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1554439587572},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1554439587578},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1554439587575},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1554439587584},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1554439587581},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1554439587586},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1554439587589},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1554439587588},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1554439587593},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1554439587595},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1554439587594},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1554439587591},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1554439587597},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1554439587599},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1554439587623},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1554439587620},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1554439587625},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1554439587628},{"_id":"themes/next/source/css/_common/custom.styl","hash":"eb8f513eafda16c9b6b730da40128145b6659459","modified":1554439587763},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"45979501d709ed88674361d56a3b34d12aa06654","modified":1554439587777},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1554439587779},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1554439587783},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1554439587785},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1554439587843},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1554439587845},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1554439587851},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1554439587849},{"_id":"themes/next/source/images/tx.jpg","hash":"5128ccf6ace6dd52f41d1a6d164cb271ab6b8104","modified":1554439587902},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1554439587965},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1554439587975},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1554439587979},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1554439587981},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1554439587984},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1554439588023},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1554439588025},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1554439588027},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1554439588030},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1554439588039},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1554439588041},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1554439588043},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1554439588046},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1554439588048},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1554439588086},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1554439588092},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1554439588095},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1554439588097},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1554439588099},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1554439588102},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1554439588104},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1554439588107},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1554439588110},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1554439588112},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1554439588115},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1554439588118},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1554439588123},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1554439588120},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1554439588125},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1554439588127},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1554439588129},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1554439588131},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1554439588134},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1554439588136},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1554439588138},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1554439588140},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1554439588142},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1554439588145},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1554439588148},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1554439588151},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1554439588153},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1554439588173},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1554439588175},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1554439588183},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1554439588186},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1554439588188},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1554439587908},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1554439587910},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1554439587915},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1554439587913},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1554439587917},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1554439587919},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1554439587922},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1554439587924},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1554439587929},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1554439587932},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1554439587934},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1554439588090},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1554439587614},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1554439587617},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1554439587661},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1554439587664},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1554439587663},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"c8ccfc3a387adbfceabddbca67497828cde93342","modified":1554439587666},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1554439587666},{"_id":"themes/next/source/css/_common/components/gitment.styl","hash":"a3c9aaa4372c1302e7611a4de9b1ef9d583ee244","modified":1554439587670},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1554439587698},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1554439587735},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1554439587765},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1554439587767},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1554439587769},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1554439587770},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1554439587772},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1554439587773},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1554439587775},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1554439587789},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1554439587821},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1554439587819},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1554439587814},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1554439587823},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1554439587816},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1554439587794},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1554439587796},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1554439587791},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1554439587801},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1554439587799},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1554439587803},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1554439587805},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1554439587834},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1554439587829},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1554439587836},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"59d29ce3cd9d513f0533b75543523821940cb794","modified":1554439587831},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1554439587838},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1554439587840},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1554439587952},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1554439587958},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1554439587962},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554439587986},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554439587991},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554439587988},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554439587993},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554439587995},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554439587998},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1554439588015},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1554439588017},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1554439588020},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1554439588036},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1554439588033},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1554439588051},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1554439588054},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1554439588056},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1554439588167},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1554439588170},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1554439587927},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1554439587955},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554439588080},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554439588083},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1554439588180},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1554439587672},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1554439587674},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1554439587675},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1554439587678},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1554439587677},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1554439587668},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1554439587682},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1554439587680},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1554439587686},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1554439587691},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1554439587683},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1554439587689},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1554439587693},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1554439587700},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1554439587702},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1554439587695},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1554439587704},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1554439587706},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1554439587707},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1554439587709},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1554439587710},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1554439587712},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1554439587713},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1554439587714},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1554439587715},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1554439587718},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1554439587717},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1554439587720},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"7b26e8390db867f1c876267974d6f24a93421fdb","modified":1554439587721},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1554439587723},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1554439587726},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"1d94f152477d150a262b3801540f2f28a96b4004","modified":1554439587724},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1554439587727},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1554439587728},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1554439587729},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1554439587731},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1554439587732},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1554439587733},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1554439587734},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1554439587737},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1554439587738},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1554439587740},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1554439587741},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1554439587742},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1554439587743},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1554439587745},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1554439587747},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1554439587748},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1554439587749},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1554439587751},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1554439587752},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1554439587753},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1554439587755},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1554439587757},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1554439587758},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1554439587759},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1554439587761},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1554439587762},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1554439587826},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1554439587808},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1554439587811},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1554439587942},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1554439587944},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1554439587939},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1554439587947},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1554439587949},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1554439588003},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554439588001},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1554439588005},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1554439588010},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1554439588008},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1554439588012},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1554439588060},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554439588067},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1554439588077},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1554439587973},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1554439588163},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1554439588072},{"_id":"public/search.xml","hash":"546768394c618e5e9608b67aec1f6aecf01e5cd2","modified":1555842704552},{"_id":"public/baidusitemap.xml","hash":"8f93463487ef350512625d0c09c9f2b30bd54637","modified":1555842712533},{"_id":"public/sitemap.xml","hash":"2ae477d4cc823814950f26762502366bc6d0a8a4","modified":1555842712583},{"_id":"public/atom.xml","hash":"916b3323715eba63009f0a8c2d098f8e64693f40","modified":1555842712583},{"_id":"public/baidu_verify_mJpFi2Z3mB.html","hash":"0c3b2631b1d2fe3404bdbf8ba45cc786a4f08def","modified":1555842712590},{"_id":"public/categories/index.html","hash":"1e1ec3312c33ba34421ca5b3d6bd7c89b8808c13","modified":1555842712590},{"_id":"public/google05dcfde650a3d64e.html","hash":"ffa00708cbff5da84ade0e3b799acd4363b728c9","modified":1555842712590},{"_id":"public/about/index.html","hash":"ba659d833f361b564f0aea86b8be50d30521da05","modified":1555842712590},{"_id":"public/message/index.html","hash":"f7c3442b2bd51a7f8791c21b973a1971869dcb07","modified":1555842712591},{"_id":"public/archives/index.html","hash":"238b09564235bbb2b6f4c52f0cb30a9cdf6611b1","modified":1555842712591},{"_id":"public/blog/20190413/leetcode-Z字形变换/index.html","hash":"56d047c0887411722561de5f5537f7c890f03073","modified":1555842712591},{"_id":"public/blog/20190412/dubbo 服务降级/index.html","hash":"a1135e445367509d3b144381a819f608f8387fa0","modified":1555842712591},{"_id":"public/tags/tags.html","hash":"6687a4b208a64d12b0706ff6e1130c2182cdac15","modified":1555842712592},{"_id":"public/blog/20190320/使用springboot进行国际化时自定义读取数据库配置/index.html","hash":"4b65b29c3a1fab5e3e0fe7937cf0bbba4f95fe49","modified":1555842712592},{"_id":"public/blog/20190309/springboot+shiro解决session污染问题/index.html","hash":"742c4981bdaec290f0cdf7de01596dc2d1dae671","modified":1555842712592},{"_id":"public/blog/20190316/layui开发中结合freemarker展示字典数据/index.html","hash":"b34db952a4b8f2502114c47ee7ea6fde15905b89","modified":1555842712593},{"_id":"public/blog/20181112/nodepad-不用插件去重的方法/index.html","hash":"8e460e37ee54262603f82c4ae788e8f43923881c","modified":1555842712593},{"_id":"public/blog/20181209/Java中map新的骚操作/index.html","hash":"f24c8bb89be7dcc52d4c2b0cc73ef4fda1804679","modified":1555842712593},{"_id":"public/blog/20180904/泰国7天6晚自由行攻略/index.html","hash":"ecfd1865db4118a62a4ecabab13de07d8f626678","modified":1555842712593},{"_id":"public/blog/20180904/hexo博客文章置顶方式/index.html","hash":"194c91f1b2a604436c4a5bc80e002585a468397e","modified":1555842712594},{"_id":"public/blog/20180811/开发日记-20180828/index.html","hash":"fef3df66b78a5e03f93da2998dd159af43ab01ac","modified":1555842712594},{"_id":"public/blog/20180708/关于IDEA再从git或者svn上导入项目时不能加载字模块的问题/index.html","hash":"0bfd1c6da663acc02f888dc45140c467491427a1","modified":1555842712594},{"_id":"public/blog/20180719/开发日记-20180718/index.html","hash":"5a75b311bfda774742a9ad7a3f985334e3bbe1a4","modified":1555842712594},{"_id":"public/blog/20180628/纪念即将结束的第一份工作/index.html","hash":"e4426b3523d9f9e78d03391a6599644e9511500d","modified":1555842712594},{"_id":"public/blog/20180531/关于git-pull-拉取不到最新记录/index.html","hash":"e45b422c8092104858aa82d4b0dbae7cf75095cf","modified":1555842712594},{"_id":"public/blog/20180327/spring-boot微服务搭建/index.html","hash":"815b63e12eb07942475a52ff77b45d6b12c7b55d","modified":1555842712595},{"_id":"public/blog/20180421/vlog-程序员的一天/index.html","hash":"6c67105d81a87dc4e92e160f43c1ce0831903fd3","modified":1555842712595},{"_id":"public/blog/20160927/校招面试经历/index.html","hash":"94673e391ac5c4ff79facdc993fa2f24ac0fd7a8","modified":1555842712595},{"_id":"public/blog/20160911/一个菜鸟在三星实习的感受/index.html","hash":"e834910dc66243c3c988b80f46f849d70e197531","modified":1555842712595},{"_id":"public/archives/page/2/index.html","hash":"37ddff7a8ecc51494529b68c7ab510cd73c6e378","modified":1555842712596},{"_id":"public/archives/2016/index.html","hash":"062f8e139650730f4fb07c5a182e6fd0cc454998","modified":1555842712596},{"_id":"public/archives/2016/09/index.html","hash":"390b8140cb03bca0f69fbeb519c86a440874c223","modified":1555842712596},{"_id":"public/archives/2018/page/2/index.html","hash":"2232c1eba64daecdaf0be7c6de8c75be402f8bad","modified":1555842712596},{"_id":"public/archives/2018/index.html","hash":"2f44e0b688975dd757d38e1687491d90bad7226d","modified":1555842712596},{"_id":"public/archives/2018/03/index.html","hash":"b496da349734cc11d50470a164a09defe4086c0d","modified":1555842712596},{"_id":"public/archives/2018/04/index.html","hash":"f30930a438439f51398165ef3448b7dc7cf8bb68","modified":1555842712596},{"_id":"public/archives/2018/05/index.html","hash":"0ab72b7171052e1886f4775627602ab45aa816de","modified":1555842712596},{"_id":"public/archives/2018/06/index.html","hash":"726c29948bb191c087483e6ceffa6f95b077386f","modified":1555842712597},{"_id":"public/archives/2018/08/index.html","hash":"d7dac77ddbdc7125b0462fa10bc3f4d4ff5ad213","modified":1555842712597},{"_id":"public/archives/2018/09/index.html","hash":"ba55a018acd1be9ec6964154e451ee2c93c3987c","modified":1555842712597},{"_id":"public/archives/2018/07/index.html","hash":"55fa72549f1d29a34062f4fa461fa738f9557ab1","modified":1555842712597},{"_id":"public/archives/2018/11/index.html","hash":"a8226b63575cd01b872af3af401ab456843a2692","modified":1555842712597},{"_id":"public/archives/2019/index.html","hash":"661ee86b7f4e165ab62f9732aa9cc51823d0bbdc","modified":1555842712597},{"_id":"public/archives/2019/03/index.html","hash":"e1ca0aeafd68b3443fe281afd14e73b70d503d9c","modified":1555842712597},{"_id":"public/categories/hexo博客配置/index.html","hash":"1d662b2ce07d276ae609d2ab3be7dbbae17edc9d","modified":1555842712597},{"_id":"public/archives/2018/12/index.html","hash":"aaeb28e69c89eaaef1b5d733f2ec4d9519afacb6","modified":1555842712598},{"_id":"public/archives/2019/04/index.html","hash":"5b44b62f50ead2207ab5ed332b135244b8d0ae99","modified":1555842712598},{"_id":"public/categories/Java基础/index.html","hash":"7e354f287784ff5ee51ddca9dc62995c0e16ec02","modified":1555842712598},{"_id":"public/categories/框架相关/index.html","hash":"d06581b74963bea7cc9a711e684737c0c64acf7b","modified":1555842712598},{"_id":"public/categories/分布式相关/index.html","hash":"683ef827e8016936d2a7361dd9cf57fc9d9633e7","modified":1555842712598},{"_id":"public/categories/算法题解/index.html","hash":"2d55467ea6927db67fff572a27265c28f1b1f4eb","modified":1555842712598},{"_id":"public/categories/程序人生/index.html","hash":"1e2562d4b4564204d5010fae6d2f7b5d01e7ca01","modified":1555842712599},{"_id":"public/categories/国际化/index.html","hash":"6fac42239e8af7ca76bd65bbb94c3c0583baf045","modified":1555842712599},{"_id":"public/categories/个人随笔/index.html","hash":"e9cd8ac59c97da0089fb3dcd4c9eaebd3188bdb2","modified":1555842712599},{"_id":"public/categories/开发工具/index.html","hash":"afe3150aba19638514f8a56f8374fe9179a481c2","modified":1555842712599},{"_id":"public/categories/git/index.html","hash":"472a376378272d3c47caccb02168849c53f0a070","modified":1555842712599},{"_id":"public/categories/数据库基础/index.html","hash":"fc27d090a32d483150182c694ba97321d008a090","modified":1555842712599},{"_id":"public/tags/开发日记/index.html","hash":"f3e551096ca8a8f9a7f47af36ed5f6ca231a97c4","modified":1555842712599},{"_id":"public/tags/Java基础/index.html","hash":"feda958d1f5d693e141f2db4f94dbe3db15f99a4","modified":1555842712599},{"_id":"public/tags/hexo/index.html","hash":"9904729e346b3831179ecd9a8236d9c42e3c6a83","modified":1555842712599},{"_id":"public/tags/dubbo/index.html","hash":"1548fe8de08a54f6316cf891029dbb3279a7a0f6","modified":1555842712600},{"_id":"public/tags/springboot/index.html","hash":"d9f2fce1b32dcd2fc3958b334fda529d6255b00c","modified":1555842712600},{"_id":"public/tags/分布式服务降级/index.html","hash":"c4af01d430c18ad07c95980f37454bddd768331b","modified":1555842712600},{"_id":"public/tags/算法题解/index.html","hash":"b65c8bec61411afa6e60023dc3723e7ae4d85e08","modified":1555842712600},{"_id":"public/tags/leetcode/index.html","hash":"e8b0a675e1c1444d784a854db194d55bd8001039","modified":1555842712600},{"_id":"public/tags/工厂模式/index.html","hash":"9735d2e5d3429156f1e23ab3a5b5b2aebf4c9e8f","modified":1555842712600},{"_id":"public/tags/freemarker/index.html","hash":"7f07027b5267075714df0a6c8abb3c5f7a70e03d","modified":1555842712600},{"_id":"public/tags/layui/index.html","hash":"7cdb8ae3814f4e771598d4d3c9e9a76a6bf89caa","modified":1555842712600},{"_id":"public/tags/session污染/index.html","hash":"5c9016ea81294fc395446c9d6565c87554359aa8","modified":1555842712600},{"_id":"public/tags/程序人生/index.html","hash":"c28b2eb586afbec3651e5a52e371878a8066acd9","modified":1555842712600},{"_id":"public/tags/工作技巧/index.html","hash":"4665fc44b8a80c75dcc7372ae0fb3d45b40878c1","modified":1555842712601},{"_id":"public/tags/nodepad/index.html","hash":"5958ebf35d02d26ccd9f79b7d9e2b149aa9838a0","modified":1555842712601},{"_id":"public/tags/实习/index.html","hash":"b35ed2b62a129b7bc2c56a585073d558a1090ebe","modified":1555842712601},{"_id":"public/tags/三星/index.html","hash":"83ff2664477a8b96843c77524e5d035710ab8051","modified":1555842712601},{"_id":"public/tags/shell自动化测试/index.html","hash":"479bec3efbc5383ab257a24d596d78e6552c8e62","modified":1555842712601},{"_id":"public/tags/国际化/index.html","hash":"472a8b901c6fdc59f9834312856408c1fa4fa70c","modified":1555842712601},{"_id":"public/tags/IDEA/index.html","hash":"8c95946fb1f40fe80db51d3cc68f2bb142611d8c","modified":1555842712601},{"_id":"public/tags/git/index.html","hash":"66320cd7eaec0a112d5b521f6a6c32a5c708c342","modified":1555842712601},{"_id":"public/tags/shiro/index.html","hash":"13c4f32e09dfa6c434476753a16de44527272f2d","modified":1555842712601},{"_id":"public/tags/面试经历/index.html","hash":"fc854c66fa4e8f59f6e31b14f22dd72828c5b354","modified":1555842712601},{"_id":"public/tags/MySql/index.html","hash":"b91c490dd757afa7b1e2800fbe44c775cc52edea","modified":1555842712602},{"_id":"public/tags/个人随笔/index.html","hash":"4a2c083f151a96439ef3afea19f0b9f9e5cecb1f","modified":1555842712602},{"_id":"public/index.html","hash":"3afcdf43898fc99ffb18a04315cb46e6177e01fe","modified":1555842712602},{"_id":"public/page/2/index.html","hash":"bda3317a82028901bc6f10c9ea618d1c16cd7acc","modified":1555842712602}],"Category":[{"name":"hexo博客配置","_id":"cjup2zphb0006lcuh531p7efb"},{"name":"Java基础","_id":"cjup2zphi000dlcuh81f2ylqh"},{"name":"分布式相关","_id":"cjup2zphm000jlcuhu39s3brx"},{"name":"算法题解","_id":"cjup2zphs000rlcuhn8170ez2"},{"name":"框架相关","_id":"cjup2zphz0012lcuhmqiwiejg"},{"name":"程序人生","_id":"cjup2zpi40019lcuh93zhpq67"},{"name":"开发工具","_id":"cjup2zpi8001glcuhnt7xkujj"},{"name":"国际化","_id":"cjup2zpic001qlcuh76h55yqy"},{"name":"git","_id":"cjup2zpif001ylcuh3xc98qu6"},{"name":"个人随笔","_id":"cjup2zpii0025lcuh1yt8ywmq"},{"name":"数据库基础","_id":"cjup2zpij002blcuh1fc03kgs"}],"Data":[],"Page":[{"_content":"mJpFi2Z3mB","source":"baidu_verify_mJpFi2Z3mB.html","raw":"mJpFi2Z3mB","date":"2019-04-10T14:45:16.175Z","updated":"2019-04-10T14:45:16.175Z","path":"baidu_verify_mJpFi2Z3mB.html","title":"","comments":1,"layout":"page","_id":"cjup2zpbg0000lcuht5gzpcav","content":"mJpFi2Z3mB","site":{"data":{}},"excerpt":"","more":"mJpFi2Z3mB"},{"_content":"google-site-verification: google05dcfde650a3d64e.html","source":"google05dcfde650a3d64e.html","raw":"google-site-verification: google05dcfde650a3d64e.html","date":"2019-04-10T14:45:16.177Z","updated":"2019-04-10T14:45:16.177Z","path":"google05dcfde650a3d64e.html","title":"","comments":1,"layout":"page","_id":"cjup2zpbi0001lcuhgqp0s5kn","content":"google-site-verification: google05dcfde650a3d64e.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: google05dcfde650a3d64e.html"},{"title":"个人简历","date":"2018-06-28T02:59:33.000Z","type":"about","comments":0,"_content":"<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\">\n<style>\nbody {\n    font-family: \"微软雅黑\", Helvetica, \"微软雅黑\", Arial, sans-serif;\n    font-size: 13px;\n    line-height: 18px;\n    margin: 10px 13px 10px 13px;\n}\n</style>\n<div style=\"float:right\">\n    <a href=\"https://github.com/Fatezhang\"><img src=\"https://avatars0.githubusercontent.com/u/12826096?s=400&u=39fd86d33e63e90f030cdc157712c0e19bfa53bb&v=4\" width=\"100\"></a>\n</div>\n## <i class=\"fa fa-address-book\"></i> 张嘉恒 <font size=\"3\">/ <i class=\"fa fa-mars\"></i> Jiaheng Zhang</font>\n### <i class=\"fa fa-star\"></i> Java后端开发工程师 <font size=\"2\">/ Java Web Engineer</font> *<font size=\"2\" color=\"#BDB76B\">/ 期望薪资15K+</font>*\n  - <i class=\"fa fa-home\"></i>  陕西西安\n  - <i class=\"fa fa-envelope-o fa-fw\"></i> 762344938@qq.com\n  - <i class=\"fa fa-mobile-phone\"></i>  18829291537\n  - <i class=\"fa fa-file-text\"></i>  http://zhangjiaheng.cn\n  - <i class=\"fa fa-university\"></i> 西安邮电大学 (2013/07 - 2017/09) *<font size=\"2\" color=\"#BDB76B\">本科</font>*\n\n### <i class=\"fa fa-user-circle-o\"></i>  关于我\n\n- 我是一个乐观开朗，热爱技术，喜欢新鲜事物而且一点儿也不宅的程序员。对于工作认真负责，并能够尝试使用高效率的解决方式去完成。对于自己渴求不断进步，人总是希望能够跳出现有的圈子去与更厉害的人交流学习，我也是。生活中有很多的兴趣爱好，除了技术类的以及逛逛V2EX，掘金等论坛之外，平时也喜欢旅行，户外徒步，也因此拥有来自天南海北的各种朋友。喜欢健身，街舞等，为自己的业余生活增加一些很酷的元素。会通过视频vlog记录自己，并尝试不断地探索着其他更多未知领域。\n\n### <i class=\"fa fa-code\"></i> 技能清单\n\n  - Java基础扎实，熟悉集合、多线程等操作，熟悉常用的设计模式以及数据结构与算法\n  - 熟练使用Spring、SpringMvc、Springboot、Mybatis等框架进行web后端开发\n  - 拥有分布式服务开发经验，能够dubbo/zookeeper等进行分布式服务开发\n  - 熟悉Redis/Memcache等缓存服务，熟悉使用Mysql数据库进行数据持久化\n  - 掌握Linux常用操作，能够独立进行项目搭建部署以及各种依赖环境的配置\n  - 熟悉nginx、tomcat等\n  - 掌握前端常用的html/css/JS/jQuery等语言或库\n\n\n### <i class=\"fa fa-id-badge\"></i>  工作经历\n#### <i class=\"fa fa-bookmark-o\"></i> 杭州51公积金 ( *2018/07 - 今* ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">Java后端开发工程师</font>\n  - **51有钱理财后台**：负责理财后台业务以及APP相关接口开发。项目管理后台前端使用layui框架，后台使用Springboot+MyBatis框架搭建，结合dubbo+zookeeper进行服务拆分，使用rocketmq作为消息队列以对系统进行削峰和某些业务解耦，使用redis完成业务的一些缓存服务，使用[TX-LCN](https://www.txlcn.org/zh-cn/docs/demo/env.html)解决dubbo中的分布式事务问题。我主要负责的有：开发**风控模块**，对接新颜以及同盾数据接口，对商户推来的订单进行风控的自动审核，提高风控人员的工作效率；开发报表数据等页面**异步导出**功能，后台结合阿里OSS追加上传实现大数据量异步导出，前端只需要添加一个页面导出按钮即可无需再编写其他代码，很大程度上减少了同事的开发时间；开发**定时任务管理模块**，整合quartz完成定时任务的可配置化操作，减少编写定时任务的大量冗余代码，提高了同事们的工作效率。\n  - **贷款超市**：负责框架搭建以及管理系统的开发。项目使用Springboot+MyBatis框架。我主要负责框架搭建部署以及后台管理系统权限相关、资源位等相关模块的开发。\n\n#### <i class=\"fa fa-bookmark-o\"></i> 浙江核新同花顺 ( *2017/02 - 2018/07* ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">Java后端开发工程师</font>\n  - **level2后台管理系统**：负责level2后台以及APP的服务端开发。项目使用SpringMVC+MyBatis框架搭建，使用dubbo+zookeeper进行服务拆分。\n  - **投顾中台管理系统**：负责投顾后台以及APP的服务端开发。\n  - **CMS中台管理系统**：负责后台管理以及客户端的接口开发。\n\n#### <i class=\"fa fa-bookmark-o\"></i> 西安三星电子研究所 ( *2016/03 - 2016/08* ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">测试开发实习</font>\n  - 根据组长提供的测试用例或者自己编写测试用例，编写shell脚本，针对ARTIK芯片进行自动化测试。如针对芯片间的蓝牙连接进行文件传输测试等，编写脚本发送文件以及检测文件是否传输成功等工作。实习期间学习到了不少Linux相关知识，以及其他硬件自动化测试知识。\n\n#### - 致谢 -\n\n感谢您花时间阅读我的简历，期待能够机会与您一起共事！\n","source":"about/index.md","raw":"---\ntitle: 个人简历\ndate: 2018-06-28 10:59:33\ntype: \"about\"\ncomments: false\n---\n<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\">\n<style>\nbody {\n    font-family: \"微软雅黑\", Helvetica, \"微软雅黑\", Arial, sans-serif;\n    font-size: 13px;\n    line-height: 18px;\n    margin: 10px 13px 10px 13px;\n}\n</style>\n<div style=\"float:right\">\n    <a href=\"https://github.com/Fatezhang\"><img src=\"https://avatars0.githubusercontent.com/u/12826096?s=400&u=39fd86d33e63e90f030cdc157712c0e19bfa53bb&v=4\" width=\"100\"></a>\n</div>\n## <i class=\"fa fa-address-book\"></i> 张嘉恒 <font size=\"3\">/ <i class=\"fa fa-mars\"></i> Jiaheng Zhang</font>\n### <i class=\"fa fa-star\"></i> Java后端开发工程师 <font size=\"2\">/ Java Web Engineer</font> *<font size=\"2\" color=\"#BDB76B\">/ 期望薪资15K+</font>*\n  - <i class=\"fa fa-home\"></i>  陕西西安\n  - <i class=\"fa fa-envelope-o fa-fw\"></i> 762344938@qq.com\n  - <i class=\"fa fa-mobile-phone\"></i>  18829291537\n  - <i class=\"fa fa-file-text\"></i>  http://zhangjiaheng.cn\n  - <i class=\"fa fa-university\"></i> 西安邮电大学 (2013/07 - 2017/09) *<font size=\"2\" color=\"#BDB76B\">本科</font>*\n\n### <i class=\"fa fa-user-circle-o\"></i>  关于我\n\n- 我是一个乐观开朗，热爱技术，喜欢新鲜事物而且一点儿也不宅的程序员。对于工作认真负责，并能够尝试使用高效率的解决方式去完成。对于自己渴求不断进步，人总是希望能够跳出现有的圈子去与更厉害的人交流学习，我也是。生活中有很多的兴趣爱好，除了技术类的以及逛逛V2EX，掘金等论坛之外，平时也喜欢旅行，户外徒步，也因此拥有来自天南海北的各种朋友。喜欢健身，街舞等，为自己的业余生活增加一些很酷的元素。会通过视频vlog记录自己，并尝试不断地探索着其他更多未知领域。\n\n### <i class=\"fa fa-code\"></i> 技能清单\n\n  - Java基础扎实，熟悉集合、多线程等操作，熟悉常用的设计模式以及数据结构与算法\n  - 熟练使用Spring、SpringMvc、Springboot、Mybatis等框架进行web后端开发\n  - 拥有分布式服务开发经验，能够dubbo/zookeeper等进行分布式服务开发\n  - 熟悉Redis/Memcache等缓存服务，熟悉使用Mysql数据库进行数据持久化\n  - 掌握Linux常用操作，能够独立进行项目搭建部署以及各种依赖环境的配置\n  - 熟悉nginx、tomcat等\n  - 掌握前端常用的html/css/JS/jQuery等语言或库\n\n\n### <i class=\"fa fa-id-badge\"></i>  工作经历\n#### <i class=\"fa fa-bookmark-o\"></i> 杭州51公积金 ( *2018/07 - 今* ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">Java后端开发工程师</font>\n  - **51有钱理财后台**：负责理财后台业务以及APP相关接口开发。项目管理后台前端使用layui框架，后台使用Springboot+MyBatis框架搭建，结合dubbo+zookeeper进行服务拆分，使用rocketmq作为消息队列以对系统进行削峰和某些业务解耦，使用redis完成业务的一些缓存服务，使用[TX-LCN](https://www.txlcn.org/zh-cn/docs/demo/env.html)解决dubbo中的分布式事务问题。我主要负责的有：开发**风控模块**，对接新颜以及同盾数据接口，对商户推来的订单进行风控的自动审核，提高风控人员的工作效率；开发报表数据等页面**异步导出**功能，后台结合阿里OSS追加上传实现大数据量异步导出，前端只需要添加一个页面导出按钮即可无需再编写其他代码，很大程度上减少了同事的开发时间；开发**定时任务管理模块**，整合quartz完成定时任务的可配置化操作，减少编写定时任务的大量冗余代码，提高了同事们的工作效率。\n  - **贷款超市**：负责框架搭建以及管理系统的开发。项目使用Springboot+MyBatis框架。我主要负责框架搭建部署以及后台管理系统权限相关、资源位等相关模块的开发。\n\n#### <i class=\"fa fa-bookmark-o\"></i> 浙江核新同花顺 ( *2017/02 - 2018/07* ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">Java后端开发工程师</font>\n  - **level2后台管理系统**：负责level2后台以及APP的服务端开发。项目使用SpringMVC+MyBatis框架搭建，使用dubbo+zookeeper进行服务拆分。\n  - **投顾中台管理系统**：负责投顾后台以及APP的服务端开发。\n  - **CMS中台管理系统**：负责后台管理以及客户端的接口开发。\n\n#### <i class=\"fa fa-bookmark-o\"></i> 西安三星电子研究所 ( *2016/03 - 2016/08* ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">测试开发实习</font>\n  - 根据组长提供的测试用例或者自己编写测试用例，编写shell脚本，针对ARTIK芯片进行自动化测试。如针对芯片间的蓝牙连接进行文件传输测试等，编写脚本发送文件以及检测文件是否传输成功等工作。实习期间学习到了不少Linux相关知识，以及其他硬件自动化测试知识。\n\n#### - 致谢 -\n\n感谢您花时间阅读我的简历，期待能够机会与您一起共事！\n","updated":"2019-04-21T10:17:13.122Z","path":"about/index.html","_id":"cjup2zph70003lcuhmq1hykqc","layout":"page","content":"<p><link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\"></p>\n<p><style><br>body {<br>    font-family: “微软雅黑”, Helvetica, “微软雅黑”, Arial, sans-serif;<br>    font-size: 13px;<br>    line-height: 18px;<br>    margin: 10px 13px 10px 13px;<br>}<br></style></p>\n<p><div style=\"float:right\"><br>    <a href=\"https://github.com/Fatezhang\" target=\"_blank\" rel=\"noopener\"><img src=\"https://avatars0.githubusercontent.com/u/12826096?s=400&u=39fd86d33e63e90f030cdc157712c0e19bfa53bb&v=4\" width=\"100\"></a><br></div></p>\n<h2 id=\"张嘉恒-Jiaheng-Zhang\"><a href=\"#张嘉恒-Jiaheng-Zhang\" class=\"headerlink\" title=\" 张嘉恒 /  Jiaheng Zhang\"></a><i class=\"fa fa-address-book\"></i> 张嘉恒 <font size=\"3\">/ <i class=\"fa fa-mars\"></i> Jiaheng Zhang</font></h2><h3 id=\"Java后端开发工程师-Java-Web-Engineer-期望薪资15K\"><a href=\"#Java后端开发工程师-Java-Web-Engineer-期望薪资15K\" class=\"headerlink\" title=\" Java后端开发工程师 / Java Web Engineer / 期望薪资15K+\"></a><i class=\"fa fa-star\"></i> Java后端开发工程师 <font size=\"2\">/ Java Web Engineer</font> <em><font size=\"2\" color=\"#BDB76B\">/ 期望薪资15K+</font></em></h3><ul>\n<li><i class=\"fa fa-home\"></i>  陕西西安</li>\n<li><i class=\"fa fa-envelope-o fa-fw\"></i> <a href=\"mailto:762344938@qq.com\" target=\"_blank\" rel=\"noopener\">762344938@qq.com</a></li>\n<li><i class=\"fa fa-mobile-phone\"></i>  18829291537</li>\n<li><i class=\"fa fa-file-text\"></i>  <a href=\"http://zhangjiaheng.cn\">http://zhangjiaheng.cn</a></li>\n<li><i class=\"fa fa-university\"></i> 西安邮电大学 (2013/07 - 2017/09) <em><font size=\"2\" color=\"#BDB76B\">本科</font></em></li>\n</ul>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"  关于我\"></a><i class=\"fa fa-user-circle-o\"></i>  关于我</h3><ul>\n<li>我是一个乐观开朗，热爱技术，喜欢新鲜事物而且一点儿也不宅的程序员。对于工作认真负责，并能够尝试使用高效率的解决方式去完成。对于自己渴求不断进步，人总是希望能够跳出现有的圈子去与更厉害的人交流学习，我也是。生活中有很多的兴趣爱好，除了技术类的以及逛逛V2EX，掘金等论坛之外，平时也喜欢旅行，户外徒步，也因此拥有来自天南海北的各种朋友。喜欢健身，街舞等，为自己的业余生活增加一些很酷的元素。会通过视频vlog记录自己，并尝试不断地探索着其他更多未知领域。</li>\n</ul>\n<h3 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\" 技能清单\"></a><i class=\"fa fa-code\"></i> 技能清单</h3><ul>\n<li>Java基础扎实，熟悉集合、多线程等操作，熟悉常用的设计模式以及数据结构与算法</li>\n<li>熟练使用Spring、SpringMvc、Springboot、Mybatis等框架进行web后端开发</li>\n<li>拥有分布式服务开发经验，能够dubbo/zookeeper等进行分布式服务开发</li>\n<li>熟悉Redis/Memcache等缓存服务，熟悉使用Mysql数据库进行数据持久化</li>\n<li>掌握Linux常用操作，能够独立进行项目搭建部署以及各种依赖环境的配置</li>\n<li>熟悉nginx、tomcat等</li>\n<li>掌握前端常用的html/css/JS/jQuery等语言或库</li>\n</ul>\n<h3 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"  工作经历\"></a><i class=\"fa fa-id-badge\"></i>  工作经历</h3><h4 id=\"杭州51公积金-2018-07-今-nbsp-nbsp-nbsp-nbsp-Java后端开发工程师\"><a href=\"#杭州51公积金-2018-07-今-nbsp-nbsp-nbsp-nbsp-Java后端开发工程师\" class=\"headerlink\" title=\" 杭州51公积金 ( 2018/07 - 今 ) &nbsp;&nbsp;&nbsp;&nbsp; Java后端开发工程师\"></a><i class=\"fa fa-bookmark-o\"></i> 杭州51公积金 ( <em>2018/07 - 今</em> ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">Java后端开发工程师</font></h4><ul>\n<li><strong>51有钱理财后台</strong>：负责理财后台业务以及APP相关接口开发。项目管理后台前端使用layui框架，后台使用Springboot+MyBatis框架搭建，结合dubbo+zookeeper进行服务拆分，使用rocketmq作为消息队列以对系统进行削峰和某些业务解耦，使用redis完成业务的一些缓存服务，使用<a href=\"https://www.txlcn.org/zh-cn/docs/demo/env.html\" target=\"_blank\" rel=\"noopener\">TX-LCN</a>解决dubbo中的分布式事务问题。我主要负责的有：开发<strong>风控模块</strong>，对接新颜以及同盾数据接口，对商户推来的订单进行风控的自动审核，提高风控人员的工作效率；开发报表数据等页面<strong>异步导出</strong>功能，后台结合阿里OSS追加上传实现大数据量异步导出，前端只需要添加一个页面导出按钮即可无需再编写其他代码，很大程度上减少了同事的开发时间；开发<strong>定时任务管理模块</strong>，整合quartz完成定时任务的可配置化操作，减少编写定时任务的大量冗余代码，提高了同事们的工作效率。</li>\n<li><strong>贷款超市</strong>：负责框架搭建以及管理系统的开发。项目使用Springboot+MyBatis框架。我主要负责框架搭建部署以及后台管理系统权限相关、资源位等相关模块的开发。</li>\n</ul>\n<h4 id=\"浙江核新同花顺-2017-02-2018-07-nbsp-nbsp-nbsp-nbsp-Java后端开发工程师\"><a href=\"#浙江核新同花顺-2017-02-2018-07-nbsp-nbsp-nbsp-nbsp-Java后端开发工程师\" class=\"headerlink\" title=\" 浙江核新同花顺 ( 2017/02 - 2018/07 ) &nbsp;&nbsp;&nbsp;&nbsp; Java后端开发工程师\"></a><i class=\"fa fa-bookmark-o\"></i> 浙江核新同花顺 ( <em>2017/02 - 2018/07</em> ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">Java后端开发工程师</font></h4><ul>\n<li><strong>level2后台管理系统</strong>：负责level2后台以及APP的服务端开发。项目使用SpringMVC+MyBatis框架搭建，使用dubbo+zookeeper进行服务拆分。</li>\n<li><strong>投顾中台管理系统</strong>：负责投顾后台以及APP的服务端开发。</li>\n<li><strong>CMS中台管理系统</strong>：负责后台管理以及客户端的接口开发。</li>\n</ul>\n<h4 id=\"西安三星电子研究所-2016-03-2016-08-nbsp-nbsp-nbsp-nbsp-测试开发实习\"><a href=\"#西安三星电子研究所-2016-03-2016-08-nbsp-nbsp-nbsp-nbsp-测试开发实习\" class=\"headerlink\" title=\" 西安三星电子研究所 ( 2016/03 - 2016/08 ) &nbsp;&nbsp;&nbsp;&nbsp; 测试开发实习\"></a><i class=\"fa fa-bookmark-o\"></i> 西安三星电子研究所 ( <em>2016/03 - 2016/08</em> ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">测试开发实习</font></h4><ul>\n<li>根据组长提供的测试用例或者自己编写测试用例，编写shell脚本，针对ARTIK芯片进行自动化测试。如针对芯片间的蓝牙连接进行文件传输测试等，编写脚本发送文件以及检测文件是否传输成功等工作。实习期间学习到了不少Linux相关知识，以及其他硬件自动化测试知识。</li>\n</ul>\n<h4 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"- 致谢 -\"></a>- 致谢 -</h4><p>感谢您花时间阅读我的简历，期待能够机会与您一起共事！</p>\n","site":{"data":{}},"excerpt":"","more":"<p><link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\"></p>\n<p><style><br>body {<br>    font-family: “微软雅黑”, Helvetica, “微软雅黑”, Arial, sans-serif;<br>    font-size: 13px;<br>    line-height: 18px;<br>    margin: 10px 13px 10px 13px;<br>}<br></style></p>\n<p><div style=\"float:right\"><br>    <a href=\"https://github.com/Fatezhang\" target=\"_blank\" rel=\"noopener\"><img src=\"https://avatars0.githubusercontent.com/u/12826096?s=400&u=39fd86d33e63e90f030cdc157712c0e19bfa53bb&v=4\" width=\"100\"></a><br></div></p>\n<h2 id=\"张嘉恒-Jiaheng-Zhang\"><a href=\"#张嘉恒-Jiaheng-Zhang\" class=\"headerlink\" title=\" 张嘉恒 /  Jiaheng Zhang\"></a><i class=\"fa fa-address-book\"></i> 张嘉恒 <font size=\"3\">/ <i class=\"fa fa-mars\"></i> Jiaheng Zhang</font></h2><h3 id=\"Java后端开发工程师-Java-Web-Engineer-期望薪资15K\"><a href=\"#Java后端开发工程师-Java-Web-Engineer-期望薪资15K\" class=\"headerlink\" title=\" Java后端开发工程师 / Java Web Engineer / 期望薪资15K+\"></a><i class=\"fa fa-star\"></i> Java后端开发工程师 <font size=\"2\">/ Java Web Engineer</font> <em><font size=\"2\" color=\"#BDB76B\">/ 期望薪资15K+</font></em></h3><ul>\n<li><i class=\"fa fa-home\"></i>  陕西西安</li>\n<li><i class=\"fa fa-envelope-o fa-fw\"></i> <a href=\"mailto:762344938@qq.com\" target=\"_blank\" rel=\"noopener\">762344938@qq.com</a></li>\n<li><i class=\"fa fa-mobile-phone\"></i>  18829291537</li>\n<li><i class=\"fa fa-file-text\"></i>  <a href=\"http://zhangjiaheng.cn\">http://zhangjiaheng.cn</a></li>\n<li><i class=\"fa fa-university\"></i> 西安邮电大学 (2013/07 - 2017/09) <em><font size=\"2\" color=\"#BDB76B\">本科</font></em></li>\n</ul>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"  关于我\"></a><i class=\"fa fa-user-circle-o\"></i>  关于我</h3><ul>\n<li>我是一个乐观开朗，热爱技术，喜欢新鲜事物而且一点儿也不宅的程序员。对于工作认真负责，并能够尝试使用高效率的解决方式去完成。对于自己渴求不断进步，人总是希望能够跳出现有的圈子去与更厉害的人交流学习，我也是。生活中有很多的兴趣爱好，除了技术类的以及逛逛V2EX，掘金等论坛之外，平时也喜欢旅行，户外徒步，也因此拥有来自天南海北的各种朋友。喜欢健身，街舞等，为自己的业余生活增加一些很酷的元素。会通过视频vlog记录自己，并尝试不断地探索着其他更多未知领域。</li>\n</ul>\n<h3 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\" 技能清单\"></a><i class=\"fa fa-code\"></i> 技能清单</h3><ul>\n<li>Java基础扎实，熟悉集合、多线程等操作，熟悉常用的设计模式以及数据结构与算法</li>\n<li>熟练使用Spring、SpringMvc、Springboot、Mybatis等框架进行web后端开发</li>\n<li>拥有分布式服务开发经验，能够dubbo/zookeeper等进行分布式服务开发</li>\n<li>熟悉Redis/Memcache等缓存服务，熟悉使用Mysql数据库进行数据持久化</li>\n<li>掌握Linux常用操作，能够独立进行项目搭建部署以及各种依赖环境的配置</li>\n<li>熟悉nginx、tomcat等</li>\n<li>掌握前端常用的html/css/JS/jQuery等语言或库</li>\n</ul>\n<h3 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"  工作经历\"></a><i class=\"fa fa-id-badge\"></i>  工作经历</h3><h4 id=\"杭州51公积金-2018-07-今-nbsp-nbsp-nbsp-nbsp-Java后端开发工程师\"><a href=\"#杭州51公积金-2018-07-今-nbsp-nbsp-nbsp-nbsp-Java后端开发工程师\" class=\"headerlink\" title=\" 杭州51公积金 ( 2018/07 - 今 ) &nbsp;&nbsp;&nbsp;&nbsp; Java后端开发工程师\"></a><i class=\"fa fa-bookmark-o\"></i> 杭州51公积金 ( <em>2018/07 - 今</em> ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">Java后端开发工程师</font></h4><ul>\n<li><strong>51有钱理财后台</strong>：负责理财后台业务以及APP相关接口开发。项目管理后台前端使用layui框架，后台使用Springboot+MyBatis框架搭建，结合dubbo+zookeeper进行服务拆分，使用rocketmq作为消息队列以对系统进行削峰和某些业务解耦，使用redis完成业务的一些缓存服务，使用<a href=\"https://www.txlcn.org/zh-cn/docs/demo/env.html\" target=\"_blank\" rel=\"noopener\">TX-LCN</a>解决dubbo中的分布式事务问题。我主要负责的有：开发<strong>风控模块</strong>，对接新颜以及同盾数据接口，对商户推来的订单进行风控的自动审核，提高风控人员的工作效率；开发报表数据等页面<strong>异步导出</strong>功能，后台结合阿里OSS追加上传实现大数据量异步导出，前端只需要添加一个页面导出按钮即可无需再编写其他代码，很大程度上减少了同事的开发时间；开发<strong>定时任务管理模块</strong>，整合quartz完成定时任务的可配置化操作，减少编写定时任务的大量冗余代码，提高了同事们的工作效率。</li>\n<li><strong>贷款超市</strong>：负责框架搭建以及管理系统的开发。项目使用Springboot+MyBatis框架。我主要负责框架搭建部署以及后台管理系统权限相关、资源位等相关模块的开发。</li>\n</ul>\n<h4 id=\"浙江核新同花顺-2017-02-2018-07-nbsp-nbsp-nbsp-nbsp-Java后端开发工程师\"><a href=\"#浙江核新同花顺-2017-02-2018-07-nbsp-nbsp-nbsp-nbsp-Java后端开发工程师\" class=\"headerlink\" title=\" 浙江核新同花顺 ( 2017/02 - 2018/07 ) &nbsp;&nbsp;&nbsp;&nbsp; Java后端开发工程师\"></a><i class=\"fa fa-bookmark-o\"></i> 浙江核新同花顺 ( <em>2017/02 - 2018/07</em> ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">Java后端开发工程师</font></h4><ul>\n<li><strong>level2后台管理系统</strong>：负责level2后台以及APP的服务端开发。项目使用SpringMVC+MyBatis框架搭建，使用dubbo+zookeeper进行服务拆分。</li>\n<li><strong>投顾中台管理系统</strong>：负责投顾后台以及APP的服务端开发。</li>\n<li><strong>CMS中台管理系统</strong>：负责后台管理以及客户端的接口开发。</li>\n</ul>\n<h4 id=\"西安三星电子研究所-2016-03-2016-08-nbsp-nbsp-nbsp-nbsp-测试开发实习\"><a href=\"#西安三星电子研究所-2016-03-2016-08-nbsp-nbsp-nbsp-nbsp-测试开发实习\" class=\"headerlink\" title=\" 西安三星电子研究所 ( 2016/03 - 2016/08 ) &nbsp;&nbsp;&nbsp;&nbsp; 测试开发实习\"></a><i class=\"fa fa-bookmark-o\"></i> 西安三星电子研究所 ( <em>2016/03 - 2016/08</em> ) &nbsp;&nbsp;&nbsp;&nbsp; <font size=\"2\" color=\"#BDB76B\">测试开发实习</font></h4><ul>\n<li>根据组长提供的测试用例或者自己编写测试用例，编写shell脚本，针对ARTIK芯片进行自动化测试。如针对芯片间的蓝牙连接进行文件传输测试等，编写脚本发送文件以及检测文件是否传输成功等工作。实习期间学习到了不少Linux相关知识，以及其他硬件自动化测试知识。</li>\n</ul>\n<h4 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"- 致谢 -\"></a>- 致谢 -</h4><p>感谢您花时间阅读我的简历，期待能够机会与您一起共事！</p>\n"},{"title":"林深时见鹿","date":"2018-07-15T03:53:27.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 林深时见鹿\ndate: 2018-07-15 11:53:27\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-04-05T04:46:27.354Z","path":"categories/index.html","layout":"page","_id":"cjup2zph90005lcuh1ouxngmg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"message","date":"2018-06-29T09:19:02.000Z","_content":"","source":"message/index.md","raw":"---\ntitle: message\ndate: 2018-06-29 17:19:02\n---\n","updated":"2019-04-05T04:46:27.356Z","path":"message/index.html","comments":1,"layout":"page","_id":"cjup2zphe0009lcuhi4es3ieo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"记昨日书","date":"2018-06-28T03:02:51.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: 记昨日书\ndate: 2018-06-28 11:02:51\n---\n","updated":"2019-04-05T04:46:27.348Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cjup2zphg000blcuh73i5tv9y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"寒星三两","date":"2018-06-26T16:00:00.000Z","type":"tags","comments":0,"_content":"\n","source":"tags/tags.md","raw":"---\ntitle: 寒星三两\ndate: 2018-06-27 \ntype: \"tags\"\ncomments: false\n---\n\n","updated":"2019-04-05T04:46:27.359Z","path":"tags/tags.html","layout":"page","_id":"cjup2zphi000flcuhq0z7fys6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hexo博客文章置顶方式","date":"2018-09-04T11:51:53.000Z","_content":"\n### 博文置顶\n#### 目前已经有修改后支持置顶的仓库，可以直接用以下命令安装\n```\nnpm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save\n```\n<!--more-->\n#### 然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章：\n```\n---\ntitle: hexo博客置顶\ndate: 2017-09-08 12:00:25\ncategories: 博客搭建系列\ntop: true\n---\n```\n#### 到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：\n##### 打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到`<div class=\"post-meta\">`标签下，紧接着下一行插入如下代码：\n```\n          {% if post.top %}\n            <i class=\"fa fa-thumb-tack\"></i>\n            <font color=7D26CD>置顶</font>\n            <span class=\"post-meta-divider\">|</span>\n          {% endif %}\n```\n---\n至此，博客置顶的方式就全部完成了\n","source":"_posts/hexo博客文章置顶方式.md","raw":"---\ntitle: hexo博客文章置顶方式\ndate: 2018-09-04 19:51:53\ncategories: [hexo博客配置]\ntags: [开发日记,hexo]\n---\n\n### 博文置顶\n#### 目前已经有修改后支持置顶的仓库，可以直接用以下命令安装\n```\nnpm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save\n```\n<!--more-->\n#### 然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章：\n```\n---\ntitle: hexo博客置顶\ndate: 2017-09-08 12:00:25\ncategories: 博客搭建系列\ntop: true\n---\n```\n#### 到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：\n##### 打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到`<div class=\"post-meta\">`标签下，紧接着下一行插入如下代码：\n```\n          {% if post.top %}\n            <i class=\"fa fa-thumb-tack\"></i>\n            <font color=7D26CD>置顶</font>\n            <span class=\"post-meta-divider\">|</span>\n          {% endif %}\n```\n---\n至此，博客置顶的方式就全部完成了\n","slug":"hexo博客文章置顶方式","published":1,"updated":"2019-04-05T04:46:27.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zph30002lcuhsma54yeb","content":"<h3 id=\"博文置顶\"><a href=\"#博文置顶\" class=\"headerlink\" title=\"博文置顶\"></a>博文置顶</h3><h4 id=\"目前已经有修改后支持置顶的仓库，可以直接用以下命令安装\"><a href=\"#目前已经有修改后支持置顶的仓库，可以直接用以下命令安装\" class=\"headerlink\" title=\"目前已经有修改后支持置顶的仓库，可以直接用以下命令安装\"></a>目前已经有修改后支持置顶的仓库，可以直接用以下命令安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"然后在需要置顶的文章的Front-matter中加上top-true即可。比如下面这篇文章：\"><a href=\"#然后在需要置顶的文章的Front-matter中加上top-true即可。比如下面这篇文章：\" class=\"headerlink\" title=\"然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章：\"></a>然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hexo博客置顶</span><br><span class=\"line\">date: 2017-09-08 12:00:25</span><br><span class=\"line\">categories: 博客搭建系列</span><br><span class=\"line\">top: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h4 id=\"到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：\"><a href=\"#到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：\" class=\"headerlink\" title=\"到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：\"></a>到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：</h4><h5 id=\"打开：-blog-themes-next-layout-macro-目录下的post-swig文件，定位到-lt-div-class-quot-post-meta-quot-gt-标签下，紧接着下一行插入如下代码：\"><a href=\"#打开：-blog-themes-next-layout-macro-目录下的post-swig文件，定位到-lt-div-class-quot-post-meta-quot-gt-标签下，紧接着下一行插入如下代码：\" class=\"headerlink\" title=\"打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到&lt;div class=&quot;post-meta&quot;&gt;标签下，紧接着下一行插入如下代码：\"></a>打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，紧接着下一行插入如下代码：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if post.top %&#125;</span><br><span class=\"line\">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class=\"line\">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>至此，博客置顶的方式就全部完成了</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"博文置顶\"><a href=\"#博文置顶\" class=\"headerlink\" title=\"博文置顶\"></a>博文置顶</h3><h4 id=\"目前已经有修改后支持置顶的仓库，可以直接用以下命令安装\"><a href=\"#目前已经有修改后支持置顶的仓库，可以直接用以下命令安装\" class=\"headerlink\" title=\"目前已经有修改后支持置顶的仓库，可以直接用以下命令安装\"></a>目前已经有修改后支持置顶的仓库，可以直接用以下命令安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"然后在需要置顶的文章的Front-matter中加上top-true即可。比如下面这篇文章：\"><a href=\"#然后在需要置顶的文章的Front-matter中加上top-true即可。比如下面这篇文章：\" class=\"headerlink\" title=\"然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章：\"></a>然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: hexo博客置顶</span><br><span class=\"line\">date: 2017-09-08 12:00:25</span><br><span class=\"line\">categories: 博客搭建系列</span><br><span class=\"line\">top: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h4 id=\"到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：\"><a href=\"#到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：\" class=\"headerlink\" title=\"到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：\"></a>到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：</h4><h5 id=\"打开：-blog-themes-next-layout-macro-目录下的post-swig文件，定位到-lt-div-class-quot-post-meta-quot-gt-标签下，紧接着下一行插入如下代码：\"><a href=\"#打开：-blog-themes-next-layout-macro-目录下的post-swig文件，定位到-lt-div-class-quot-post-meta-quot-gt-标签下，紧接着下一行插入如下代码：\" class=\"headerlink\" title=\"打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到&lt;div class=&quot;post-meta&quot;&gt;标签下，紧接着下一行插入如下代码：\"></a>打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，紧接着下一行插入如下代码：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if post.top %&#125;</span><br><span class=\"line\">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class=\"line\">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>至此，博客置顶的方式就全部完成了</p>"},{"title":"Java中map新的骚操作","date":"2018-12-09T15:03:05.000Z","_content":"#### 在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：\n\n> #### 总结\n> `computeIfPresent` 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null\n> `computeIfAbsent`  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值\n> `compute`          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。\n\n\n<!--more-->\n```\npackage test;\n\nimport java.util.HashMap;\n\npublic class MapTest {\n\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1,\"zhang\");\n        // computeIfPresent 根据之前的key/value 如果oldValue 不为null 则根据提供的方法返回一个新的值 并进行新值对旧值的替换\n        System.out.println(\" 1 ---> \" + map.computeIfPresent(1,(key,value)->{\n            return key + value;//原值不为null新值不为null 新值替换旧值\n        }));\n        // 否则删除键值对\n        System.out.println(\" 2 ---> \" + map.computeIfPresent(1,(key,value)->{\n            return null;//原值不为null新值为null 删除键值对\n        }));\n        map.put(1,null);\n        System.out.println(\" 3 ---> \" + map.computeIfPresent(1,(key,value)->{\n            return \"jiaheng\";//原值为null 不做更改\n        }));\n        // computeIfAbsent 根据之前的key 如果旧值为空或者key不存在 就按照方法用新值替换旧值 新值为null不做替换\n        map.put(1,\"zhang\");\n        System.out.println(\" 4 ---> \" + map.computeIfAbsent(1,k->{\n            return null;// 不会被替换旧值 返回原值\n        }));\n        System.out.println(\" 5 ---> \" + map.computeIfAbsent(2,k->{\n            k = k*k;\n            return k.toString();// key=2不存在 直接新建并存入新值\n        }));\n        // compute类似于computeIfAbsent和computeIfPresent的合体\n        map.put(1,null);\n        System.out.println(\" 6 ---> \" + map.compute(1,(k,v)->{\n            return \"张\";// 原值为null新值不为null 新值替换旧值 此处与computeIfPresent不同\n        }));\n        System.out.println(\" 7 ---> \" + map.compute(1,(k,v)->{\n            v = (k*10) + v;\n            return v;// 新值不为null 替换旧值\n        }));\n        System.out.println(\" 8 ---> \" + map.compute(1,(k,v)->{\n            return null;// 新值为null 删除键值对\n        }));\n\n        // 总结\n        // computeIfPresent 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null\n        // computeIfAbsent  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值\n        // compute          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。\n    }\n\n}\n\n```\n","source":"_posts/Java中map新的骚操作.md","raw":"---\ntitle: Java中map新的骚操作\ndate: 2018-12-09 23:03:05\ncategories: [Java基础]\ntags: [开发日记,Java基础]\n---\n#### 在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：\n\n> #### 总结\n> `computeIfPresent` 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null\n> `computeIfAbsent`  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值\n> `compute`          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。\n\n\n<!--more-->\n```\npackage test;\n\nimport java.util.HashMap;\n\npublic class MapTest {\n\n    public static void main(String[] args) {\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1,\"zhang\");\n        // computeIfPresent 根据之前的key/value 如果oldValue 不为null 则根据提供的方法返回一个新的值 并进行新值对旧值的替换\n        System.out.println(\" 1 ---> \" + map.computeIfPresent(1,(key,value)->{\n            return key + value;//原值不为null新值不为null 新值替换旧值\n        }));\n        // 否则删除键值对\n        System.out.println(\" 2 ---> \" + map.computeIfPresent(1,(key,value)->{\n            return null;//原值不为null新值为null 删除键值对\n        }));\n        map.put(1,null);\n        System.out.println(\" 3 ---> \" + map.computeIfPresent(1,(key,value)->{\n            return \"jiaheng\";//原值为null 不做更改\n        }));\n        // computeIfAbsent 根据之前的key 如果旧值为空或者key不存在 就按照方法用新值替换旧值 新值为null不做替换\n        map.put(1,\"zhang\");\n        System.out.println(\" 4 ---> \" + map.computeIfAbsent(1,k->{\n            return null;// 不会被替换旧值 返回原值\n        }));\n        System.out.println(\" 5 ---> \" + map.computeIfAbsent(2,k->{\n            k = k*k;\n            return k.toString();// key=2不存在 直接新建并存入新值\n        }));\n        // compute类似于computeIfAbsent和computeIfPresent的合体\n        map.put(1,null);\n        System.out.println(\" 6 ---> \" + map.compute(1,(k,v)->{\n            return \"张\";// 原值为null新值不为null 新值替换旧值 此处与computeIfPresent不同\n        }));\n        System.out.println(\" 7 ---> \" + map.compute(1,(k,v)->{\n            v = (k*10) + v;\n            return v;// 新值不为null 替换旧值\n        }));\n        System.out.println(\" 8 ---> \" + map.compute(1,(k,v)->{\n            return null;// 新值为null 删除键值对\n        }));\n\n        // 总结\n        // computeIfPresent 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null\n        // computeIfAbsent  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值\n        // compute          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。\n    }\n\n}\n\n```\n","slug":"Java中map新的骚操作","published":1,"updated":"2019-04-05T04:46:27.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zph80004lcuhrswam5fg","content":"<h4 id=\"在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：\"><a href=\"#在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：\" class=\"headerlink\" title=\"在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：\"></a>在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：</h4><blockquote>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p><code>computeIfPresent</code> 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null<br><code>computeIfAbsent</code>  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值<br><code>compute</code>          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package test;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MapTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(1,&quot;zhang&quot;);</span><br><span class=\"line\">        // computeIfPresent 根据之前的key/value 如果oldValue 不为null 则根据提供的方法返回一个新的值 并进行新值对旧值的替换</span><br><span class=\"line\">        System.out.println(&quot; 1 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class=\"line\">            return key + value;//原值不为null新值不为null 新值替换旧值</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        // 否则删除键值对</span><br><span class=\"line\">        System.out.println(&quot; 2 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class=\"line\">            return null;//原值不为null新值为null 删除键值对</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        map.put(1,null);</span><br><span class=\"line\">        System.out.println(&quot; 3 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class=\"line\">            return &quot;jiaheng&quot;;//原值为null 不做更改</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        // computeIfAbsent 根据之前的key 如果旧值为空或者key不存在 就按照方法用新值替换旧值 新值为null不做替换</span><br><span class=\"line\">        map.put(1,&quot;zhang&quot;);</span><br><span class=\"line\">        System.out.println(&quot; 4 ---&gt; &quot; + map.computeIfAbsent(1,k-&gt;&#123;</span><br><span class=\"line\">            return null;// 不会被替换旧值 返回原值</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        System.out.println(&quot; 5 ---&gt; &quot; + map.computeIfAbsent(2,k-&gt;&#123;</span><br><span class=\"line\">            k = k*k;</span><br><span class=\"line\">            return k.toString();// key=2不存在 直接新建并存入新值</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        // compute类似于computeIfAbsent和computeIfPresent的合体</span><br><span class=\"line\">        map.put(1,null);</span><br><span class=\"line\">        System.out.println(&quot; 6 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class=\"line\">            return &quot;张&quot;;// 原值为null新值不为null 新值替换旧值 此处与computeIfPresent不同</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        System.out.println(&quot; 7 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class=\"line\">            v = (k*10) + v;</span><br><span class=\"line\">            return v;// 新值不为null 替换旧值</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        System.out.println(&quot; 8 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class=\"line\">            return null;// 新值为null 删除键值对</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">        // 总结</span><br><span class=\"line\">        // computeIfPresent 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null</span><br><span class=\"line\">        // computeIfAbsent  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值</span><br><span class=\"line\">        // compute          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：\"><a href=\"#在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：\" class=\"headerlink\" title=\"在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：\"></a>在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：</h4><blockquote>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p><code>computeIfPresent</code> 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null<br><code>computeIfAbsent</code>  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值<br><code>compute</code>          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。</p>\n</blockquote>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package test;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MapTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(1,&quot;zhang&quot;);</span><br><span class=\"line\">        // computeIfPresent 根据之前的key/value 如果oldValue 不为null 则根据提供的方法返回一个新的值 并进行新值对旧值的替换</span><br><span class=\"line\">        System.out.println(&quot; 1 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class=\"line\">            return key + value;//原值不为null新值不为null 新值替换旧值</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        // 否则删除键值对</span><br><span class=\"line\">        System.out.println(&quot; 2 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class=\"line\">            return null;//原值不为null新值为null 删除键值对</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        map.put(1,null);</span><br><span class=\"line\">        System.out.println(&quot; 3 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class=\"line\">            return &quot;jiaheng&quot;;//原值为null 不做更改</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        // computeIfAbsent 根据之前的key 如果旧值为空或者key不存在 就按照方法用新值替换旧值 新值为null不做替换</span><br><span class=\"line\">        map.put(1,&quot;zhang&quot;);</span><br><span class=\"line\">        System.out.println(&quot; 4 ---&gt; &quot; + map.computeIfAbsent(1,k-&gt;&#123;</span><br><span class=\"line\">            return null;// 不会被替换旧值 返回原值</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        System.out.println(&quot; 5 ---&gt; &quot; + map.computeIfAbsent(2,k-&gt;&#123;</span><br><span class=\"line\">            k = k*k;</span><br><span class=\"line\">            return k.toString();// key=2不存在 直接新建并存入新值</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        // compute类似于computeIfAbsent和computeIfPresent的合体</span><br><span class=\"line\">        map.put(1,null);</span><br><span class=\"line\">        System.out.println(&quot; 6 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class=\"line\">            return &quot;张&quot;;// 原值为null新值不为null 新值替换旧值 此处与computeIfPresent不同</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        System.out.println(&quot; 7 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class=\"line\">            v = (k*10) + v;</span><br><span class=\"line\">            return v;// 新值不为null 替换旧值</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        System.out.println(&quot; 8 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class=\"line\">            return null;// 新值为null 删除键值对</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">        // 总结</span><br><span class=\"line\">        // computeIfPresent 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null</span><br><span class=\"line\">        // computeIfAbsent  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值</span><br><span class=\"line\">        // compute          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"dubbo服务降级","date":"2019-04-12T03:48:06.000Z","_content":"### 前言\n\n&nbsp;&nbsp;&nbsp;&nbsp;在分布式服务或者一些微服务当中，经常性的出现各个服务之间相互调用，业务处理流程耦合起来的情况。比如当用户在平台下单时，我们需要给用户生成订单之后发站内信或者短信通知用户订单生成成功。那么很多时候代码的编写就会是：\n&nbsp;&nbsp;&nbsp;&nbsp;`调用订单模块生成订单->调用短信模块通知用户->调用其他模块处理更多业务逻辑`\n&nbsp;&nbsp;&nbsp;&nbsp;可是当我们无足轻重的一个短信通知模块挂掉或者报错的时候，我们当然不希望整个业务逻辑就这样停止。那么这个时候，就需要引入服务降级的机制，为整个业务逻辑进行解耦合。\n\n&nbsp;&nbsp;&nbsp;&nbsp;使用服务降级可以防止我们服务中间不影响整体流程的模块出错导致整个业务处理雪崩。将核心业务保证完整性，非核心业务弱化。\n<!--more-->\n*<font style=\"color: red\">本文使用  `springboot+dubbo` 进行服务降级的演示</font>*\n\n### dubbo自带的mock进行服务降级\n##### dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。\n具体使用\n\ndubbo mock的使用非常简单，即在我们平时进行开发时，编写impl实现类实现接口作为服务提供者的同时，编写mock实现类并覆盖所有接口中的方法。\n\n比如有接口：\n```\npublic interface SysOperateFacade {\n    /**\n     * 根据用户名查询操作员信息\n     */\n    SysOperateVO findByUserName(String username);\n}\n```\n在实现类进行相应操作\n```\n@Service //这里Service是dubbo的注解\npublic class SysOperateFacadeImpl implements SysOperateFacade {\n  @Resource\n  SysOperateService sysOperateService;\n\n  @Override\n  public SysOperateVO findByUserName(String username) {\n      return sysOperateService.findByUserName(username);\n  }\n}\n```\n编写mock实现类覆盖findByUserName方法 注意 mock的类名必须是 接口名+Mock\n```\npublic class SysOperateFacadeMock implements SysOperateFacade {\n    @Override\n    public SysOperateVO findByUserName(String username) {\n        System.out.println(\"调用到dubbo mock 的findByUserName方法。。。。。。。\");\n        return new SysOperateVO();\n    }\n}\n```\n最后，在调用的地方加上注解`@Reference(mock = \"true\")`进行使用即可\n```\n@Controller\n@RequestMapping(\"/sys/sysOperate\")\npublic class SysOperateController extends BaseController {\n\n    @Reference(mock = \"true\")\n    private SysOperateFacade sysOperateFacade;\n\n    @ResponseBody\n    @RequestMapping(\"/test\")\n    public SysOperateVO test(String username){\n        return sysOperateFacade.findByUserName(username);\n    }\n}\n```\n\n### 使用 spring cloud Hystrix进行服务降级\n\n在服务调用方模块加入依赖\n```\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n    <version>1.4.6.RELEASE</version>\n</dependency>\n```\n如果出现以下报错也许是由于Springboot与这个依赖版本不对应，修改下版本\n```\njava.lang.NoSuchMethodError: org.springframework.boot.builder.SpringApplicationBuilder.<init>([Ljava/lang/Class;)V at org.springframework.cloud.bootstrap.BootstrapApplicationListener.bootstrapServiceContext(BootstrapApplicationListener.java:170) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:104) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:70) at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:74) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:325) at org.springframework.boot.SpringApplication.run(SpringApplication.java:296) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) at com.gjj.p2p.BasicsApplication.main(BasicsApplication.java:18)\n```\n#####  具体使用`hystrix`进行服务降级\n\n`hystrix`的使用也是非常简单，只需要在服务调用方即消费者方springboot启动类上加上注解 `@EnableHystrix`\n\n然后使用如下方式，指定服务出错或者熔断后调用的方法\n```\n@ResponseBody\n@RequestMapping(\"/test\")\n@HystrixCommand(fallbackMethod = \"fallback\")\npublic String test(String message){\n    return sysMenuFacade.test(message);\n}\n\npublic String fallback(String message){\n    return \"sysMenuFacade挂了 调用到fallback \" + message;\n}\n```\n这样当出现问题之后就会调用得到fallback方法\n还可以在这个controller上直接指定注解`@DefaultProperties(defaultFallback = \"fallback\")`以免编写大量重复代码\n\n### 总结\n\n服务降级与熔断机制在我们实际生产以及日常开发中都是是非常有必要使用的，例如我们在日常开发中，需要调用别人的模块，但是又不是非常依赖这个模块的数据，我们可以使用以上的方式构造“假的”调用结果。这样就不用为了调试某行代码去启动大量的服务了。\n\n最后针对dubbo的mock机制以及`hystrix`，我觉得`hystrix`更像是try{}catch{}。\n","source":"_posts/dubbo 服务降级.md","raw":"---\ntitle: dubbo服务降级\ndate: 2019-04-12 11:48:06\ncategories: [分布式相关]\ntags: [springboot,dubbo,分布式服务降级]\n---\n### 前言\n\n&nbsp;&nbsp;&nbsp;&nbsp;在分布式服务或者一些微服务当中，经常性的出现各个服务之间相互调用，业务处理流程耦合起来的情况。比如当用户在平台下单时，我们需要给用户生成订单之后发站内信或者短信通知用户订单生成成功。那么很多时候代码的编写就会是：\n&nbsp;&nbsp;&nbsp;&nbsp;`调用订单模块生成订单->调用短信模块通知用户->调用其他模块处理更多业务逻辑`\n&nbsp;&nbsp;&nbsp;&nbsp;可是当我们无足轻重的一个短信通知模块挂掉或者报错的时候，我们当然不希望整个业务逻辑就这样停止。那么这个时候，就需要引入服务降级的机制，为整个业务逻辑进行解耦合。\n\n&nbsp;&nbsp;&nbsp;&nbsp;使用服务降级可以防止我们服务中间不影响整体流程的模块出错导致整个业务处理雪崩。将核心业务保证完整性，非核心业务弱化。\n<!--more-->\n*<font style=\"color: red\">本文使用  `springboot+dubbo` 进行服务降级的演示</font>*\n\n### dubbo自带的mock进行服务降级\n##### dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。\n具体使用\n\ndubbo mock的使用非常简单，即在我们平时进行开发时，编写impl实现类实现接口作为服务提供者的同时，编写mock实现类并覆盖所有接口中的方法。\n\n比如有接口：\n```\npublic interface SysOperateFacade {\n    /**\n     * 根据用户名查询操作员信息\n     */\n    SysOperateVO findByUserName(String username);\n}\n```\n在实现类进行相应操作\n```\n@Service //这里Service是dubbo的注解\npublic class SysOperateFacadeImpl implements SysOperateFacade {\n  @Resource\n  SysOperateService sysOperateService;\n\n  @Override\n  public SysOperateVO findByUserName(String username) {\n      return sysOperateService.findByUserName(username);\n  }\n}\n```\n编写mock实现类覆盖findByUserName方法 注意 mock的类名必须是 接口名+Mock\n```\npublic class SysOperateFacadeMock implements SysOperateFacade {\n    @Override\n    public SysOperateVO findByUserName(String username) {\n        System.out.println(\"调用到dubbo mock 的findByUserName方法。。。。。。。\");\n        return new SysOperateVO();\n    }\n}\n```\n最后，在调用的地方加上注解`@Reference(mock = \"true\")`进行使用即可\n```\n@Controller\n@RequestMapping(\"/sys/sysOperate\")\npublic class SysOperateController extends BaseController {\n\n    @Reference(mock = \"true\")\n    private SysOperateFacade sysOperateFacade;\n\n    @ResponseBody\n    @RequestMapping(\"/test\")\n    public SysOperateVO test(String username){\n        return sysOperateFacade.findByUserName(username);\n    }\n}\n```\n\n### 使用 spring cloud Hystrix进行服务降级\n\n在服务调用方模块加入依赖\n```\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n    <version>1.4.6.RELEASE</version>\n</dependency>\n```\n如果出现以下报错也许是由于Springboot与这个依赖版本不对应，修改下版本\n```\njava.lang.NoSuchMethodError: org.springframework.boot.builder.SpringApplicationBuilder.<init>([Ljava/lang/Class;)V at org.springframework.cloud.bootstrap.BootstrapApplicationListener.bootstrapServiceContext(BootstrapApplicationListener.java:170) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:104) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:70) at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:74) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:325) at org.springframework.boot.SpringApplication.run(SpringApplication.java:296) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) at com.gjj.p2p.BasicsApplication.main(BasicsApplication.java:18)\n```\n#####  具体使用`hystrix`进行服务降级\n\n`hystrix`的使用也是非常简单，只需要在服务调用方即消费者方springboot启动类上加上注解 `@EnableHystrix`\n\n然后使用如下方式，指定服务出错或者熔断后调用的方法\n```\n@ResponseBody\n@RequestMapping(\"/test\")\n@HystrixCommand(fallbackMethod = \"fallback\")\npublic String test(String message){\n    return sysMenuFacade.test(message);\n}\n\npublic String fallback(String message){\n    return \"sysMenuFacade挂了 调用到fallback \" + message;\n}\n```\n这样当出现问题之后就会调用得到fallback方法\n还可以在这个controller上直接指定注解`@DefaultProperties(defaultFallback = \"fallback\")`以免编写大量重复代码\n\n### 总结\n\n服务降级与熔断机制在我们实际生产以及日常开发中都是是非常有必要使用的，例如我们在日常开发中，需要调用别人的模块，但是又不是非常依赖这个模块的数据，我们可以使用以上的方式构造“假的”调用结果。这样就不用为了调试某行代码去启动大量的服务了。\n\n最后针对dubbo的mock机制以及`hystrix`，我觉得`hystrix`更像是try{}catch{}。\n","slug":"dubbo 服务降级","published":1,"updated":"2019-04-20T05:22:31.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zphd0008lcuh5vgttsbj","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在分布式服务或者一些微服务当中，经常性的出现各个服务之间相互调用，业务处理流程耦合起来的情况。比如当用户在平台下单时，我们需要给用户生成订单之后发站内信或者短信通知用户订单生成成功。那么很多时候代码的编写就会是：<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>调用订单模块生成订单-&gt;调用短信模块通知用户-&gt;调用其他模块处理更多业务逻辑</code><br>&nbsp;&nbsp;&nbsp;&nbsp;可是当我们无足轻重的一个短信通知模块挂掉或者报错的时候，我们当然不希望整个业务逻辑就这样停止。那么这个时候，就需要引入服务降级的机制，为整个业务逻辑进行解耦合。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;使用服务降级可以防止我们服务中间不影响整体流程的模块出错导致整个业务处理雪崩。将核心业务保证完整性，非核心业务弱化。<br><a id=\"more\"></a><br><em><font style=\"color: red\">本文使用  <code>springboot+dubbo</code> 进行服务降级的演示</font></em></p>\n<h3 id=\"dubbo自带的mock进行服务降级\"><a href=\"#dubbo自带的mock进行服务降级\" class=\"headerlink\" title=\"dubbo自带的mock进行服务降级\"></a>dubbo自带的mock进行服务降级</h3><h5 id=\"dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。\"><a href=\"#dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。\" class=\"headerlink\" title=\"dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。\"></a>dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。</h5><p>具体使用</p>\n<p>dubbo mock的使用非常简单，即在我们平时进行开发时，编写impl实现类实现接口作为服务提供者的同时，编写mock实现类并覆盖所有接口中的方法。</p>\n<p>比如有接口：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface SysOperateFacade &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据用户名查询操作员信息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    SysOperateVO findByUserName(String username);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在实现类进行相应操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service //这里Service是dubbo的注解</span><br><span class=\"line\">public class SysOperateFacadeImpl implements SysOperateFacade &#123;</span><br><span class=\"line\">  @Resource</span><br><span class=\"line\">  SysOperateService sysOperateService;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public SysOperateVO findByUserName(String username) &#123;</span><br><span class=\"line\">      return sysOperateService.findByUserName(username);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编写mock实现类覆盖findByUserName方法 注意 mock的类名必须是 接口名+Mock<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SysOperateFacadeMock implements SysOperateFacade &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public SysOperateVO findByUserName(String username) &#123;</span><br><span class=\"line\">        System.out.println(&quot;调用到dubbo mock 的findByUserName方法。。。。。。。&quot;);</span><br><span class=\"line\">        return new SysOperateVO();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，在调用的地方加上注解<code>@Reference(mock = &quot;true&quot;)</code>进行使用即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">@RequestMapping(&quot;/sys/sysOperate&quot;)</span><br><span class=\"line\">public class SysOperateController extends BaseController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Reference(mock = &quot;true&quot;)</span><br><span class=\"line\">    private SysOperateFacade sysOperateFacade;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    @RequestMapping(&quot;/test&quot;)</span><br><span class=\"line\">    public SysOperateVO test(String username)&#123;</span><br><span class=\"line\">        return sysOperateFacade.findByUserName(username);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-spring-cloud-Hystrix进行服务降级\"><a href=\"#使用-spring-cloud-Hystrix进行服务降级\" class=\"headerlink\" title=\"使用 spring cloud Hystrix进行服务降级\"></a>使用 spring cloud Hystrix进行服务降级</h3><p>在服务调用方模块加入依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.4.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果出现以下报错也许是由于Springboot与这个依赖版本不对应，修改下版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.NoSuchMethodError: org.springframework.boot.builder.SpringApplicationBuilder.&lt;init&gt;([Ljava/lang/Class;)V at org.springframework.cloud.bootstrap.BootstrapApplicationListener.bootstrapServiceContext(BootstrapApplicationListener.java:170) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:104) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:70) at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:74) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:325) at org.springframework.boot.SpringApplication.run(SpringApplication.java:296) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) at com.gjj.p2p.BasicsApplication.main(BasicsApplication.java:18)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"具体使用hystrix进行服务降级\"><a href=\"#具体使用hystrix进行服务降级\" class=\"headerlink\" title=\"具体使用hystrix进行服务降级\"></a>具体使用<code>hystrix</code>进行服务降级</h5><p><code>hystrix</code>的使用也是非常简单，只需要在服务调用方即消费者方springboot启动类上加上注解 <code>@EnableHystrix</code></p>\n<p>然后使用如下方式，指定服务出错或者熔断后调用的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(&quot;/test&quot;)</span><br><span class=\"line\">@HystrixCommand(fallbackMethod = &quot;fallback&quot;)</span><br><span class=\"line\">public String test(String message)&#123;</span><br><span class=\"line\">    return sysMenuFacade.test(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public String fallback(String message)&#123;</span><br><span class=\"line\">    return &quot;sysMenuFacade挂了 调用到fallback &quot; + message;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样当出现问题之后就会调用得到fallback方法<br>还可以在这个controller上直接指定注解<code>@DefaultProperties(defaultFallback = &quot;fallback&quot;)</code>以免编写大量重复代码</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>服务降级与熔断机制在我们实际生产以及日常开发中都是是非常有必要使用的，例如我们在日常开发中，需要调用别人的模块，但是又不是非常依赖这个模块的数据，我们可以使用以上的方式构造“假的”调用结果。这样就不用为了调试某行代码去启动大量的服务了。</p>\n<p>最后针对dubbo的mock机制以及<code>hystrix</code>，我觉得<code>hystrix</code>更像是try{}catch{}。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在分布式服务或者一些微服务当中，经常性的出现各个服务之间相互调用，业务处理流程耦合起来的情况。比如当用户在平台下单时，我们需要给用户生成订单之后发站内信或者短信通知用户订单生成成功。那么很多时候代码的编写就会是：<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>调用订单模块生成订单-&gt;调用短信模块通知用户-&gt;调用其他模块处理更多业务逻辑</code><br>&nbsp;&nbsp;&nbsp;&nbsp;可是当我们无足轻重的一个短信通知模块挂掉或者报错的时候，我们当然不希望整个业务逻辑就这样停止。那么这个时候，就需要引入服务降级的机制，为整个业务逻辑进行解耦合。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;使用服务降级可以防止我们服务中间不影响整体流程的模块出错导致整个业务处理雪崩。将核心业务保证完整性，非核心业务弱化。<br>","more":"<br><em><font style=\"color: red\">本文使用  <code>springboot+dubbo</code> 进行服务降级的演示</font></em></p>\n<h3 id=\"dubbo自带的mock进行服务降级\"><a href=\"#dubbo自带的mock进行服务降级\" class=\"headerlink\" title=\"dubbo自带的mock进行服务降级\"></a>dubbo自带的mock进行服务降级</h3><h5 id=\"dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。\"><a href=\"#dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。\" class=\"headerlink\" title=\"dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。\"></a>dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。</h5><p>具体使用</p>\n<p>dubbo mock的使用非常简单，即在我们平时进行开发时，编写impl实现类实现接口作为服务提供者的同时，编写mock实现类并覆盖所有接口中的方法。</p>\n<p>比如有接口：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface SysOperateFacade &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据用户名查询操作员信息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    SysOperateVO findByUserName(String username);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在实现类进行相应操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service //这里Service是dubbo的注解</span><br><span class=\"line\">public class SysOperateFacadeImpl implements SysOperateFacade &#123;</span><br><span class=\"line\">  @Resource</span><br><span class=\"line\">  SysOperateService sysOperateService;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public SysOperateVO findByUserName(String username) &#123;</span><br><span class=\"line\">      return sysOperateService.findByUserName(username);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编写mock实现类覆盖findByUserName方法 注意 mock的类名必须是 接口名+Mock<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SysOperateFacadeMock implements SysOperateFacade &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public SysOperateVO findByUserName(String username) &#123;</span><br><span class=\"line\">        System.out.println(&quot;调用到dubbo mock 的findByUserName方法。。。。。。。&quot;);</span><br><span class=\"line\">        return new SysOperateVO();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，在调用的地方加上注解<code>@Reference(mock = &quot;true&quot;)</code>进行使用即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">@RequestMapping(&quot;/sys/sysOperate&quot;)</span><br><span class=\"line\">public class SysOperateController extends BaseController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Reference(mock = &quot;true&quot;)</span><br><span class=\"line\">    private SysOperateFacade sysOperateFacade;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    @RequestMapping(&quot;/test&quot;)</span><br><span class=\"line\">    public SysOperateVO test(String username)&#123;</span><br><span class=\"line\">        return sysOperateFacade.findByUserName(username);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-spring-cloud-Hystrix进行服务降级\"><a href=\"#使用-spring-cloud-Hystrix进行服务降级\" class=\"headerlink\" title=\"使用 spring cloud Hystrix进行服务降级\"></a>使用 spring cloud Hystrix进行服务降级</h3><p>在服务调用方模块加入依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.4.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果出现以下报错也许是由于Springboot与这个依赖版本不对应，修改下版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.NoSuchMethodError: org.springframework.boot.builder.SpringApplicationBuilder.&lt;init&gt;([Ljava/lang/Class;)V at org.springframework.cloud.bootstrap.BootstrapApplicationListener.bootstrapServiceContext(BootstrapApplicationListener.java:170) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:104) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:70) at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:74) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:325) at org.springframework.boot.SpringApplication.run(SpringApplication.java:296) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) at com.gjj.p2p.BasicsApplication.main(BasicsApplication.java:18)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"具体使用hystrix进行服务降级\"><a href=\"#具体使用hystrix进行服务降级\" class=\"headerlink\" title=\"具体使用hystrix进行服务降级\"></a>具体使用<code>hystrix</code>进行服务降级</h5><p><code>hystrix</code>的使用也是非常简单，只需要在服务调用方即消费者方springboot启动类上加上注解 <code>@EnableHystrix</code></p>\n<p>然后使用如下方式，指定服务出错或者熔断后调用的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(&quot;/test&quot;)</span><br><span class=\"line\">@HystrixCommand(fallbackMethod = &quot;fallback&quot;)</span><br><span class=\"line\">public String test(String message)&#123;</span><br><span class=\"line\">    return sysMenuFacade.test(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public String fallback(String message)&#123;</span><br><span class=\"line\">    return &quot;sysMenuFacade挂了 调用到fallback &quot; + message;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样当出现问题之后就会调用得到fallback方法<br>还可以在这个controller上直接指定注解<code>@DefaultProperties(defaultFallback = &quot;fallback&quot;)</code>以免编写大量重复代码</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>服务降级与熔断机制在我们实际生产以及日常开发中都是是非常有必要使用的，例如我们在日常开发中，需要调用别人的模块，但是又不是非常依赖这个模块的数据，我们可以使用以上的方式构造“假的”调用结果。这样就不用为了调试某行代码去启动大量的服务了。</p>\n<p>最后针对dubbo的mock机制以及<code>hystrix</code>，我觉得<code>hystrix</code>更像是try{}catch{}。</p>"},{"title":"leetcode:Z字形变换","date":"2019-04-13T11:43:02.000Z","_content":"#### 题目如下\n\n将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n\n比如输入字符串为 \"LEETCODEISHIRING\" 行数为 3 时，排列如下：\n\n```$xslt\nL   C   I   R\nE T O E S I I G\nE   D   H   N\n```\n\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\"LCIRETOESIIGEDHN\"。\n<!--more-->\n请你实现这个将字符串进行指定行数变换的函数：\n\n```\nstring convert(string s, int numRows);\n```\n\n\n\n示例 1:\n\n```\n输入: s = \"LEETCODEISHIRING\", numRows = 3\n输出: \"LCIRETOESIIGEDHN\"\n```\n\n示例 2:\n\n```\n输入: s = \"LEETCODEISHIRING\", numRows = 4\n输出: \"LDREOEIIECIHNTSG\"\n```\n\n解释:\n\n```\nL     D     R\nE   O E   I I\nE C   I H   N\nT     S     G\n```\n\n#### 解题思路\n\n拿到这个题目，第一时间就可以想到，根据题中图示构造二维数组，先将数据按照相应的样子存储进去，最后再从数组中按行取出，但是这样会有占用更多内存空间的风险。所以，我这边还思考了第二种解法：就是直接根据规律计算出下一个要输出的字符的下标，直接输出即可，无需再创建多余的二维数组。\n\n- 第一种解法：构造二维数组\n\n构造二位数组最主要的就是计算出这个二维数组有多少列，列数有了，按照Z型规律将原字符串塞进去就行了，计算列数代码如下\n\n```\nprivate int getColNum(String s, int n) {\n        int x = s.length() / (2 * n - 2);\n        int y = s.length() % (2 * n - 2);\n        int l = x + 1 + x * (n - 2);\n        if (y >= n) {\n            l = l + 1 + y % n;\n        }\n        return l;\n    }\n```\n\n- 第二种解法：计算下一个要输出的字符的下标\n直接看github代码吧：[点这里](https://github.com/Fatezhang/DataStructureAndAlgorithm/tree/master/Algorithm/src/main/java/Alogrithm/Alogrithm/ZigZagConversion)\n","source":"_posts/leetcode-Z字形变换.md","raw":"---\ntitle: 'leetcode:Z字形变换'\ndate: 2019-04-13 19:43:02\ncategories: [算法题解]\ntags: [leetcode,算法题解]\n---\n#### 题目如下\n\n将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n\n比如输入字符串为 \"LEETCODEISHIRING\" 行数为 3 时，排列如下：\n\n```$xslt\nL   C   I   R\nE T O E S I I G\nE   D   H   N\n```\n\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\"LCIRETOESIIGEDHN\"。\n<!--more-->\n请你实现这个将字符串进行指定行数变换的函数：\n\n```\nstring convert(string s, int numRows);\n```\n\n\n\n示例 1:\n\n```\n输入: s = \"LEETCODEISHIRING\", numRows = 3\n输出: \"LCIRETOESIIGEDHN\"\n```\n\n示例 2:\n\n```\n输入: s = \"LEETCODEISHIRING\", numRows = 4\n输出: \"LDREOEIIECIHNTSG\"\n```\n\n解释:\n\n```\nL     D     R\nE   O E   I I\nE C   I H   N\nT     S     G\n```\n\n#### 解题思路\n\n拿到这个题目，第一时间就可以想到，根据题中图示构造二维数组，先将数据按照相应的样子存储进去，最后再从数组中按行取出，但是这样会有占用更多内存空间的风险。所以，我这边还思考了第二种解法：就是直接根据规律计算出下一个要输出的字符的下标，直接输出即可，无需再创建多余的二维数组。\n\n- 第一种解法：构造二维数组\n\n构造二位数组最主要的就是计算出这个二维数组有多少列，列数有了，按照Z型规律将原字符串塞进去就行了，计算列数代码如下\n\n```\nprivate int getColNum(String s, int n) {\n        int x = s.length() / (2 * n - 2);\n        int y = s.length() % (2 * n - 2);\n        int l = x + 1 + x * (n - 2);\n        if (y >= n) {\n            l = l + 1 + y % n;\n        }\n        return l;\n    }\n```\n\n- 第二种解法：计算下一个要输出的字符的下标\n直接看github代码吧：[点这里](https://github.com/Fatezhang/DataStructureAndAlgorithm/tree/master/Algorithm/src/main/java/Alogrithm/Alogrithm/ZigZagConversion)\n","slug":"leetcode-Z字形变换","published":1,"updated":"2019-04-18T15:33:37.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zphf000alcuh2q09gbvd","content":"<h4 id=\"题目如下\"><a href=\"#题目如下\" class=\"headerlink\" title=\"题目如下\"></a>题目如下</h4><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L   C   I   R</span><br><span class=\"line\">E T O E S I I G</span><br><span class=\"line\">E   D   H   N</span><br></pre></td></tr></table></figure>\n<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。<br><a id=\"more\"></a><br>请你实现这个将字符串进行指定行数变换的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure>\n<p>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 3</span><br><span class=\"line\">输出: &quot;LCIRETOESIIGEDHN&quot;</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 4</span><br><span class=\"line\">输出: &quot;LDREOEIIECIHNTSG&quot;</span><br></pre></td></tr></table></figure>\n<p>解释:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L     D     R</span><br><span class=\"line\">E   O E   I I</span><br><span class=\"line\">E C   I H   N</span><br><span class=\"line\">T     S     G</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>拿到这个题目，第一时间就可以想到，根据题中图示构造二维数组，先将数据按照相应的样子存储进去，最后再从数组中按行取出，但是这样会有占用更多内存空间的风险。所以，我这边还思考了第二种解法：就是直接根据规律计算出下一个要输出的字符的下标，直接输出即可，无需再创建多余的二维数组。</p>\n<ul>\n<li>第一种解法：构造二维数组</li>\n</ul>\n<p>构造二位数组最主要的就是计算出这个二维数组有多少列，列数有了，按照Z型规律将原字符串塞进去就行了，计算列数代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int getColNum(String s, int n) &#123;</span><br><span class=\"line\">        int x = s.length() / (2 * n - 2);</span><br><span class=\"line\">        int y = s.length() % (2 * n - 2);</span><br><span class=\"line\">        int l = x + 1 + x * (n - 2);</span><br><span class=\"line\">        if (y &gt;= n) &#123;</span><br><span class=\"line\">            l = l + 1 + y % n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return l;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第二种解法：计算下一个要输出的字符的下标<br>直接看github代码吧：<a href=\"https://github.com/Fatezhang/DataStructureAndAlgorithm/tree/master/Algorithm/src/main/java/Alogrithm/Alogrithm/ZigZagConversion\" target=\"_blank\" rel=\"noopener\">点这里</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"题目如下\"><a href=\"#题目如下\" class=\"headerlink\" title=\"题目如下\"></a>题目如下</h4><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L   C   I   R</span><br><span class=\"line\">E T O E S I I G</span><br><span class=\"line\">E   D   H   N</span><br></pre></td></tr></table></figure>\n<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。<br>","more":"<br>请你实现这个将字符串进行指定行数变换的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure>\n<p>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 3</span><br><span class=\"line\">输出: &quot;LCIRETOESIIGEDHN&quot;</span><br></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 4</span><br><span class=\"line\">输出: &quot;LDREOEIIECIHNTSG&quot;</span><br></pre></td></tr></table></figure>\n<p>解释:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L     D     R</span><br><span class=\"line\">E   O E   I I</span><br><span class=\"line\">E C   I H   N</span><br><span class=\"line\">T     S     G</span><br></pre></td></tr></table></figure>\n<h4 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h4><p>拿到这个题目，第一时间就可以想到，根据题中图示构造二维数组，先将数据按照相应的样子存储进去，最后再从数组中按行取出，但是这样会有占用更多内存空间的风险。所以，我这边还思考了第二种解法：就是直接根据规律计算出下一个要输出的字符的下标，直接输出即可，无需再创建多余的二维数组。</p>\n<ul>\n<li>第一种解法：构造二维数组</li>\n</ul>\n<p>构造二位数组最主要的就是计算出这个二维数组有多少列，列数有了，按照Z型规律将原字符串塞进去就行了，计算列数代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int getColNum(String s, int n) &#123;</span><br><span class=\"line\">        int x = s.length() / (2 * n - 2);</span><br><span class=\"line\">        int y = s.length() % (2 * n - 2);</span><br><span class=\"line\">        int l = x + 1 + x * (n - 2);</span><br><span class=\"line\">        if (y &gt;= n) &#123;</span><br><span class=\"line\">            l = l + 1 + y % n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return l;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第二种解法：计算下一个要输出的字符的下标<br>直接看github代码吧：<a href=\"https://github.com/Fatezhang/DataStructureAndAlgorithm/tree/master/Algorithm/src/main/java/Alogrithm/Alogrithm/ZigZagConversion\" target=\"_blank\" rel=\"noopener\">点这里</a></li>\n</ul>"},{"title":"layui结合freemarker+springboot进行前端数据表格字典转义","date":"2019-03-16T11:51:53.000Z","_content":"\n### 前言\n在layui的开发中，我们经常会用到表格数据展示。但是在数据库中我们通常保存的一些状态等数据，都是枚举值，而我们在前端展示的时候就不能使用这些枚举值了，而要展示枚举值对应的意义数据。比如状态status，1=启用，0=停用。\n那么在layui的数据表格中，我们要展示这样的数据，写法可以是：\n```\ntemplet: function (d) {\n  if(d.status === 1){\n      return \"启用\";\n  } else if(d.status === 0){\n      return \"停用\";\n  }\n}\n```\n但是这样的写法很low啊，我们在数据库中定义多少枚举值在这里就要写多少代码，一旦有重复使用的情况，这种写法会让我们痛不欲生。\n在考虑到后台使用freemarker的情况下，配置freemarker自定义标签就能很好地解决这个问题。\n最后我们的写法就会简化成：`<@th type=\"template\" nid=\"basics_sys_status\" objName=\"status\"></@th>`，接下来看看如何在springboot中配置使用吧。\n<!-- more -->\n### freemarker自定义标签介绍及使用\n`TemplateDirectiveModel`接口是freemarker自定标签或者自定义指令的核心处理接口。当模板页面遇到用户自定义的标签指令时，`execute()`方法会被执行。`execute()`方法如下。\n```\npublic void execute(\n  Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body\n) throws TemplateException, IOException;\n```\n我们在使用freemarker自定义标签的时候需要实现该接口并且重写execute方法。\n#### `execute()`方法参数解释\n- *Environment env*：系统环境变量，通常用它来输出相关内容，如`Writer out = env.getOut();`\n- *Map params*：自定义标签传过来的对象，就是从页面上获取的参数，其key=自定义标签的参数名，value值是TemplateModel类型，而TemplateModel是一个接口类型，通常我们都使用TemplateScalarModel接口来替代它获取一个String 值，如TemplateScalarModel.getAsString();当然还有其它常用的替代接口，如TemplateNumberModel获取number，TemplateHashModel等。\n  在本例使用时，我们会将map转成我们自己的对象进行数据保存。\n- *TemplateModel[] loopVars*：循环替代变量\n- *TemplateDirectiveBody body*：标签中嵌套的内容，如`<@tag>body</@tag>`，就是这个body\n\n#### 开始使用\n\n###### 定义接收页面参数的对象\n```\n@Getter\n@Setter\npublic class TableThTag {\n    /**\n     * 对象属性名【需要进行对象属性获取】\n     */\n    private String objName;\n    /**\n     * 字典标识\n     */\n    private String nid;\n\n    /**\n     * 类型\n     */\n    private String type;\n}\n```\n###### 实现`TemplateDirectiveModel`接口并重写`execute`方法\n```\n@Component\n@org.springframework.context.annotation.Configuration\npublic class TableThDirective implements TemplateDirectiveModel {\n\n    Logger logger = LoggerFactory.getLogger(getClass().getName());\n\n    /**\n     * FreeMarker自定义指令\n     */\n    @Override\n    public void execute(Environment environment, Map map, TemplateModel[] templateModels,\n                        TemplateDirectiveBody templateDirectiveBody) throws TemplateException, IOException {\n        TableThTag tableThTag = new TableThTag();\n        //校验参数\n        try {\n            //  用来将一些 key-value 的值（例如 hashmap）映射到 bean 中的属性\n            BeanUtils.populate(tableThTag, map);\n            if (StringUtils.isEmpty(tableThTag.getNid()) || StringUtils.isEmpty(tableThTag.getType())) {\n                throw new IllegalArgumentException(\"nid,type不能为空\");\n            }\n        } catch (Exception e) {\n            logger.error(\"数据转化异常\", e);\n        }\n        StringBuilder html = new StringBuilder();\n        // 根据类型创建不同的HTML生成器\n        ThFormatterInterface thFormatterInterface = ThFormatterFactory.createThFormatter(tableThTag.getType());\n        if (thFormatterInterface != null) {\n            String dictHtml = thFormatterInterface.buildFormatterHtml(tableThTag.getNid(), tableThTag.getFieldName());\n            html.append(dictHtml);\n        }\n        // 执行真正指令的执行部分:\n        Writer out = environment.getOut();\n        out.write(html.toString());\n        if (templateDirectiveBody != null) {\n            templateDirectiveBody.render(environment.getOut());\n        }\n\n    }\n\n    public static BeansWrapper getBeansWrapper() {\n        BeansWrapper beansWrapper =\n                new BeansWrapperBuilder(Configuration.VERSION_2_3_21).build();\n        return beansWrapper;\n    }\n\n}\n```\n大家可以看到，在这个方法中，我将页面上的参数转为`TableThTag `对象。然后再根据前端页面不同的type类型对应\n实现了`ThFormatterInterface `的工厂对象，创建不同的html生成器。（这里考虑到扩展性，可能以后不光创建数据表格会用的到，比如下拉框什么的，也可以使用这种方式创建，所以在这里使用抽象工厂依据类型动态创建。）\n下面就是创建html的具体工厂以及实现方法。\n###### `ThFormatterInterface `抽象工厂创建html生成器\n接口\n```\npublic interface ThFormatterInterface {\n    /**\n     * 构造生成枚举html\n     * @param nid\n     * @return\n     */\n    String buildFormatterHtml(String nid, String fieldName);\n}\n```\n工厂\n```\npublic class ThFormatterFactory {\n\n    private static Logger logger = LoggerFactory.getLogger(ThFormatterFactory.class);\n\n    public static ThFormatterInterface createThFormatter(String type){\n        if(StringUtils.isEmpty(type)){\n            return  new ThFormatterTemplate();\n        }\n        // 文件名 如果type传template 就需要有一个名为ThFormatterTemplate的文件\n        // 并且实现了ThFormatterInterface以及重写生成html的方法\n        String fileName = \"ThFormatter\" + StringUtil.firstCharUpperCase(type);\n        //类路径 通过反射去创建实现类\n        String className = \"com.module.freemarker.impl.\"+fileName;\n        //生成表头格式实现类\n        ThFormatterInterface thFormatterInterface = null;\n        try {\n            thFormatterInterface =(ThFormatterInterface) Class.forName(className).newInstance();\n        } catch (Exception e) {\n            logger.error(e.getMessage(),e);\n        }\n        return thFormatterInterface;\n    }\n}\n```\n实现类\n```\npublic class ThFormatterTemplate implements ThFormatterInterface {\n\n    @Override\n    public String buildFormatterHtml(String nid, String fieldName) {\n        Assert.notEMPTY(nid, \"nid不能为空\");\n        Assert.notEMPTY(fieldName, \"objName不能为空\");\n        SysDictService sysDictService = SpringContextHolder.getBean(SysDictService.class);\n        // 通过nid查询字典类 这里不需要进行照抄 每个人都会有自己的实现方法\n        List<SysDictBO> sysDictModelList = sysDictService.findByPartnerNid(nid);\n        StringBuilder dictHtml = new StringBuilder();\n        // 反正目的就是根据字典类生成对应的html就行了 需要生成的格式对照template原本应该有的写法就行了\n        dictHtml.append(\"templet: function(d){ \");\n        for (SysDictBO sysDict : sysDictModelList) {\n            dictHtml.append(\"if(d.\" + fieldName + \" == '\" + sysDict.getValue() + \"'){ return '\" + sysDict.getName() + \"';}\");\n        }\n        dictHtml.append(\"}\");\n\n        return dictHtml.toString();\n    }\n}\n```\n###### 最后将自定义标签注入到freemarker标签中去\n```\n@org.springframework.context.annotation.Configuration\npublic class FreemarkerConfig {\n\n    @Resource\n    private Configuration configuration;\n    @Resource\n    private TableThDirective tableThDirective;\n\n    @PostConstruct\n    public void setSharedVariable(){\n        configuration.setSharedVariable(\"th\",tableThDirective);\n        configuration.setSharedVariable(\"shiro\",new ShiroTags());\n    }\n\n}\n```\n---\n这样就大功告成了。\n\n在页面上进行使用吧：`<@th type=\"template\" nid=\"basics_sys_status\" objName=\"status\"></@th>`\n\n以后进行扩展什么的也方便，比如生成下拉框：`<@th type=\"select\" nid=\"basics_sys_status\" objName=\"status\"></@th>`这样然后自动生成html的时候查出来所有的字典，根据类型生成多个<option>出来就行了。\n","source":"_posts/layui开发中结合freemarker展示字典数据.md","raw":"---\ntitle: layui结合freemarker+springboot进行前端数据表格字典转义\ndate: 2019-03-16 19:51:53\ncategories: [Java基础]\ntags: [开发日记,freemarker,工厂模式,layui]\n---\n\n### 前言\n在layui的开发中，我们经常会用到表格数据展示。但是在数据库中我们通常保存的一些状态等数据，都是枚举值，而我们在前端展示的时候就不能使用这些枚举值了，而要展示枚举值对应的意义数据。比如状态status，1=启用，0=停用。\n那么在layui的数据表格中，我们要展示这样的数据，写法可以是：\n```\ntemplet: function (d) {\n  if(d.status === 1){\n      return \"启用\";\n  } else if(d.status === 0){\n      return \"停用\";\n  }\n}\n```\n但是这样的写法很low啊，我们在数据库中定义多少枚举值在这里就要写多少代码，一旦有重复使用的情况，这种写法会让我们痛不欲生。\n在考虑到后台使用freemarker的情况下，配置freemarker自定义标签就能很好地解决这个问题。\n最后我们的写法就会简化成：`<@th type=\"template\" nid=\"basics_sys_status\" objName=\"status\"></@th>`，接下来看看如何在springboot中配置使用吧。\n<!-- more -->\n### freemarker自定义标签介绍及使用\n`TemplateDirectiveModel`接口是freemarker自定标签或者自定义指令的核心处理接口。当模板页面遇到用户自定义的标签指令时，`execute()`方法会被执行。`execute()`方法如下。\n```\npublic void execute(\n  Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body\n) throws TemplateException, IOException;\n```\n我们在使用freemarker自定义标签的时候需要实现该接口并且重写execute方法。\n#### `execute()`方法参数解释\n- *Environment env*：系统环境变量，通常用它来输出相关内容，如`Writer out = env.getOut();`\n- *Map params*：自定义标签传过来的对象，就是从页面上获取的参数，其key=自定义标签的参数名，value值是TemplateModel类型，而TemplateModel是一个接口类型，通常我们都使用TemplateScalarModel接口来替代它获取一个String 值，如TemplateScalarModel.getAsString();当然还有其它常用的替代接口，如TemplateNumberModel获取number，TemplateHashModel等。\n  在本例使用时，我们会将map转成我们自己的对象进行数据保存。\n- *TemplateModel[] loopVars*：循环替代变量\n- *TemplateDirectiveBody body*：标签中嵌套的内容，如`<@tag>body</@tag>`，就是这个body\n\n#### 开始使用\n\n###### 定义接收页面参数的对象\n```\n@Getter\n@Setter\npublic class TableThTag {\n    /**\n     * 对象属性名【需要进行对象属性获取】\n     */\n    private String objName;\n    /**\n     * 字典标识\n     */\n    private String nid;\n\n    /**\n     * 类型\n     */\n    private String type;\n}\n```\n###### 实现`TemplateDirectiveModel`接口并重写`execute`方法\n```\n@Component\n@org.springframework.context.annotation.Configuration\npublic class TableThDirective implements TemplateDirectiveModel {\n\n    Logger logger = LoggerFactory.getLogger(getClass().getName());\n\n    /**\n     * FreeMarker自定义指令\n     */\n    @Override\n    public void execute(Environment environment, Map map, TemplateModel[] templateModels,\n                        TemplateDirectiveBody templateDirectiveBody) throws TemplateException, IOException {\n        TableThTag tableThTag = new TableThTag();\n        //校验参数\n        try {\n            //  用来将一些 key-value 的值（例如 hashmap）映射到 bean 中的属性\n            BeanUtils.populate(tableThTag, map);\n            if (StringUtils.isEmpty(tableThTag.getNid()) || StringUtils.isEmpty(tableThTag.getType())) {\n                throw new IllegalArgumentException(\"nid,type不能为空\");\n            }\n        } catch (Exception e) {\n            logger.error(\"数据转化异常\", e);\n        }\n        StringBuilder html = new StringBuilder();\n        // 根据类型创建不同的HTML生成器\n        ThFormatterInterface thFormatterInterface = ThFormatterFactory.createThFormatter(tableThTag.getType());\n        if (thFormatterInterface != null) {\n            String dictHtml = thFormatterInterface.buildFormatterHtml(tableThTag.getNid(), tableThTag.getFieldName());\n            html.append(dictHtml);\n        }\n        // 执行真正指令的执行部分:\n        Writer out = environment.getOut();\n        out.write(html.toString());\n        if (templateDirectiveBody != null) {\n            templateDirectiveBody.render(environment.getOut());\n        }\n\n    }\n\n    public static BeansWrapper getBeansWrapper() {\n        BeansWrapper beansWrapper =\n                new BeansWrapperBuilder(Configuration.VERSION_2_3_21).build();\n        return beansWrapper;\n    }\n\n}\n```\n大家可以看到，在这个方法中，我将页面上的参数转为`TableThTag `对象。然后再根据前端页面不同的type类型对应\n实现了`ThFormatterInterface `的工厂对象，创建不同的html生成器。（这里考虑到扩展性，可能以后不光创建数据表格会用的到，比如下拉框什么的，也可以使用这种方式创建，所以在这里使用抽象工厂依据类型动态创建。）\n下面就是创建html的具体工厂以及实现方法。\n###### `ThFormatterInterface `抽象工厂创建html生成器\n接口\n```\npublic interface ThFormatterInterface {\n    /**\n     * 构造生成枚举html\n     * @param nid\n     * @return\n     */\n    String buildFormatterHtml(String nid, String fieldName);\n}\n```\n工厂\n```\npublic class ThFormatterFactory {\n\n    private static Logger logger = LoggerFactory.getLogger(ThFormatterFactory.class);\n\n    public static ThFormatterInterface createThFormatter(String type){\n        if(StringUtils.isEmpty(type)){\n            return  new ThFormatterTemplate();\n        }\n        // 文件名 如果type传template 就需要有一个名为ThFormatterTemplate的文件\n        // 并且实现了ThFormatterInterface以及重写生成html的方法\n        String fileName = \"ThFormatter\" + StringUtil.firstCharUpperCase(type);\n        //类路径 通过反射去创建实现类\n        String className = \"com.module.freemarker.impl.\"+fileName;\n        //生成表头格式实现类\n        ThFormatterInterface thFormatterInterface = null;\n        try {\n            thFormatterInterface =(ThFormatterInterface) Class.forName(className).newInstance();\n        } catch (Exception e) {\n            logger.error(e.getMessage(),e);\n        }\n        return thFormatterInterface;\n    }\n}\n```\n实现类\n```\npublic class ThFormatterTemplate implements ThFormatterInterface {\n\n    @Override\n    public String buildFormatterHtml(String nid, String fieldName) {\n        Assert.notEMPTY(nid, \"nid不能为空\");\n        Assert.notEMPTY(fieldName, \"objName不能为空\");\n        SysDictService sysDictService = SpringContextHolder.getBean(SysDictService.class);\n        // 通过nid查询字典类 这里不需要进行照抄 每个人都会有自己的实现方法\n        List<SysDictBO> sysDictModelList = sysDictService.findByPartnerNid(nid);\n        StringBuilder dictHtml = new StringBuilder();\n        // 反正目的就是根据字典类生成对应的html就行了 需要生成的格式对照template原本应该有的写法就行了\n        dictHtml.append(\"templet: function(d){ \");\n        for (SysDictBO sysDict : sysDictModelList) {\n            dictHtml.append(\"if(d.\" + fieldName + \" == '\" + sysDict.getValue() + \"'){ return '\" + sysDict.getName() + \"';}\");\n        }\n        dictHtml.append(\"}\");\n\n        return dictHtml.toString();\n    }\n}\n```\n###### 最后将自定义标签注入到freemarker标签中去\n```\n@org.springframework.context.annotation.Configuration\npublic class FreemarkerConfig {\n\n    @Resource\n    private Configuration configuration;\n    @Resource\n    private TableThDirective tableThDirective;\n\n    @PostConstruct\n    public void setSharedVariable(){\n        configuration.setSharedVariable(\"th\",tableThDirective);\n        configuration.setSharedVariable(\"shiro\",new ShiroTags());\n    }\n\n}\n```\n---\n这样就大功告成了。\n\n在页面上进行使用吧：`<@th type=\"template\" nid=\"basics_sys_status\" objName=\"status\"></@th>`\n\n以后进行扩展什么的也方便，比如生成下拉框：`<@th type=\"select\" nid=\"basics_sys_status\" objName=\"status\"></@th>`这样然后自动生成html的时候查出来所有的字典，根据类型生成多个<option>出来就行了。\n","slug":"layui开发中结合freemarker展示字典数据","published":1,"updated":"2019-04-05T04:46:27.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zphh000clcuhvl64ci7i","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在layui的开发中，我们经常会用到表格数据展示。但是在数据库中我们通常保存的一些状态等数据，都是枚举值，而我们在前端展示的时候就不能使用这些枚举值了，而要展示枚举值对应的意义数据。比如状态status，1=启用，0=停用。<br>那么在layui的数据表格中，我们要展示这样的数据，写法可以是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">templet: function (d) &#123;</span><br><span class=\"line\">  if(d.status === 1)&#123;</span><br><span class=\"line\">      return &quot;启用&quot;;</span><br><span class=\"line\">  &#125; else if(d.status === 0)&#123;</span><br><span class=\"line\">      return &quot;停用&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是这样的写法很low啊，我们在数据库中定义多少枚举值在这里就要写多少代码，一旦有重复使用的情况，这种写法会让我们痛不欲生。<br>在考虑到后台使用freemarker的情况下，配置freemarker自定义标签就能很好地解决这个问题。<br>最后我们的写法就会简化成：<code>&lt;@th type=&quot;template&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code>，接下来看看如何在springboot中配置使用吧。<br><a id=\"more\"></a></p>\n<h3 id=\"freemarker自定义标签介绍及使用\"><a href=\"#freemarker自定义标签介绍及使用\" class=\"headerlink\" title=\"freemarker自定义标签介绍及使用\"></a>freemarker自定义标签介绍及使用</h3><p><code>TemplateDirectiveModel</code>接口是freemarker自定标签或者自定义指令的核心处理接口。当模板页面遇到用户自定义的标签指令时，<code>execute()</code>方法会被执行。<code>execute()</code>方法如下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void execute(</span><br><span class=\"line\">  Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body</span><br><span class=\"line\">) throws TemplateException, IOException;</span><br></pre></td></tr></table></figure></p>\n<p>我们在使用freemarker自定义标签的时候需要实现该接口并且重写execute方法。</p>\n<h4 id=\"execute-方法参数解释\"><a href=\"#execute-方法参数解释\" class=\"headerlink\" title=\"execute()方法参数解释\"></a><code>execute()</code>方法参数解释</h4><ul>\n<li><em>Environment env</em>：系统环境变量，通常用它来输出相关内容，如<code>Writer out = env.getOut();</code></li>\n<li><em>Map params</em>：自定义标签传过来的对象，就是从页面上获取的参数，其key=自定义标签的参数名，value值是TemplateModel类型，而TemplateModel是一个接口类型，通常我们都使用TemplateScalarModel接口来替代它获取一个String 值，如TemplateScalarModel.getAsString();当然还有其它常用的替代接口，如TemplateNumberModel获取number，TemplateHashModel等。<br>在本例使用时，我们会将map转成我们自己的对象进行数据保存。</li>\n<li><em>TemplateModel[] loopVars</em>：循环替代变量</li>\n<li><em>TemplateDirectiveBody body</em>：标签中嵌套的内容，如<code>&lt;@tag&gt;body&lt;/@tag&gt;</code>，就是这个body</li>\n</ul>\n<h4 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h4><h6 id=\"定义接收页面参数的对象\"><a href=\"#定义接收页面参数的对象\" class=\"headerlink\" title=\"定义接收页面参数的对象\"></a>定义接收页面参数的对象</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">public class TableThTag &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 对象属性名【需要进行对象属性获取】</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String objName;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 字典标识</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String nid;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 类型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"实现TemplateDirectiveModel接口并重写execute方法\"><a href=\"#实现TemplateDirectiveModel接口并重写execute方法\" class=\"headerlink\" title=\"实现TemplateDirectiveModel接口并重写execute方法\"></a>实现<code>TemplateDirectiveModel</code>接口并重写<code>execute</code>方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">@org.springframework.context.annotation.Configuration</span><br><span class=\"line\">public class TableThDirective implements TemplateDirectiveModel &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Logger logger = LoggerFactory.getLogger(getClass().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * FreeMarker自定义指令</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void execute(Environment environment, Map map, TemplateModel[] templateModels,</span><br><span class=\"line\">                        TemplateDirectiveBody templateDirectiveBody) throws TemplateException, IOException &#123;</span><br><span class=\"line\">        TableThTag tableThTag = new TableThTag();</span><br><span class=\"line\">        //校验参数</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //  用来将一些 key-value 的值（例如 hashmap）映射到 bean 中的属性</span><br><span class=\"line\">            BeanUtils.populate(tableThTag, map);</span><br><span class=\"line\">            if (StringUtils.isEmpty(tableThTag.getNid()) || StringUtils.isEmpty(tableThTag.getType())) &#123;</span><br><span class=\"line\">                throw new IllegalArgumentException(&quot;nid,type不能为空&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;数据转化异常&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder html = new StringBuilder();</span><br><span class=\"line\">        // 根据类型创建不同的HTML生成器</span><br><span class=\"line\">        ThFormatterInterface thFormatterInterface = ThFormatterFactory.createThFormatter(tableThTag.getType());</span><br><span class=\"line\">        if (thFormatterInterface != null) &#123;</span><br><span class=\"line\">            String dictHtml = thFormatterInterface.buildFormatterHtml(tableThTag.getNid(), tableThTag.getFieldName());</span><br><span class=\"line\">            html.append(dictHtml);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 执行真正指令的执行部分:</span><br><span class=\"line\">        Writer out = environment.getOut();</span><br><span class=\"line\">        out.write(html.toString());</span><br><span class=\"line\">        if (templateDirectiveBody != null) &#123;</span><br><span class=\"line\">            templateDirectiveBody.render(environment.getOut());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static BeansWrapper getBeansWrapper() &#123;</span><br><span class=\"line\">        BeansWrapper beansWrapper =</span><br><span class=\"line\">                new BeansWrapperBuilder(Configuration.VERSION_2_3_21).build();</span><br><span class=\"line\">        return beansWrapper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大家可以看到，在这个方法中，我将页面上的参数转为<code>TableThTag</code>对象。然后再根据前端页面不同的type类型对应<br>实现了<code>ThFormatterInterface</code>的工厂对象，创建不同的html生成器。（这里考虑到扩展性，可能以后不光创建数据表格会用的到，比如下拉框什么的，也可以使用这种方式创建，所以在这里使用抽象工厂依据类型动态创建。）<br>下面就是创建html的具体工厂以及实现方法。</p>\n<h6 id=\"ThFormatterInterface抽象工厂创建html生成器\"><a href=\"#ThFormatterInterface抽象工厂创建html生成器\" class=\"headerlink\" title=\"ThFormatterInterface抽象工厂创建html生成器\"></a><code>ThFormatterInterface</code>抽象工厂创建html生成器</h6><p>接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ThFormatterInterface &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 构造生成枚举html</span><br><span class=\"line\">     * @param nid</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String buildFormatterHtml(String nid, String fieldName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>工厂<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThFormatterFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Logger logger = LoggerFactory.getLogger(ThFormatterFactory.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public static ThFormatterInterface createThFormatter(String type)&#123;</span><br><span class=\"line\">        if(StringUtils.isEmpty(type))&#123;</span><br><span class=\"line\">            return  new ThFormatterTemplate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 文件名 如果type传template 就需要有一个名为ThFormatterTemplate的文件</span><br><span class=\"line\">        // 并且实现了ThFormatterInterface以及重写生成html的方法</span><br><span class=\"line\">        String fileName = &quot;ThFormatter&quot; + StringUtil.firstCharUpperCase(type);</span><br><span class=\"line\">        //类路径 通过反射去创建实现类</span><br><span class=\"line\">        String className = &quot;com.module.freemarker.impl.&quot;+fileName;</span><br><span class=\"line\">        //生成表头格式实现类</span><br><span class=\"line\">        ThFormatterInterface thFormatterInterface = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            thFormatterInterface =(ThFormatterInterface) Class.forName(className).newInstance();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(e.getMessage(),e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return thFormatterInterface;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThFormatterTemplate implements ThFormatterInterface &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String buildFormatterHtml(String nid, String fieldName) &#123;</span><br><span class=\"line\">        Assert.notEMPTY(nid, &quot;nid不能为空&quot;);</span><br><span class=\"line\">        Assert.notEMPTY(fieldName, &quot;objName不能为空&quot;);</span><br><span class=\"line\">        SysDictService sysDictService = SpringContextHolder.getBean(SysDictService.class);</span><br><span class=\"line\">        // 通过nid查询字典类 这里不需要进行照抄 每个人都会有自己的实现方法</span><br><span class=\"line\">        List&lt;SysDictBO&gt; sysDictModelList = sysDictService.findByPartnerNid(nid);</span><br><span class=\"line\">        StringBuilder dictHtml = new StringBuilder();</span><br><span class=\"line\">        // 反正目的就是根据字典类生成对应的html就行了 需要生成的格式对照template原本应该有的写法就行了</span><br><span class=\"line\">        dictHtml.append(&quot;templet: function(d)&#123; &quot;);</span><br><span class=\"line\">        for (SysDictBO sysDict : sysDictModelList) &#123;</span><br><span class=\"line\">            dictHtml.append(&quot;if(d.&quot; + fieldName + &quot; == &apos;&quot; + sysDict.getValue() + &quot;&apos;)&#123; return &apos;&quot; + sysDict.getName() + &quot;&apos;;&#125;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dictHtml.append(&quot;&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        return dictHtml.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"最后将自定义标签注入到freemarker标签中去\"><a href=\"#最后将自定义标签注入到freemarker标签中去\" class=\"headerlink\" title=\"最后将自定义标签注入到freemarker标签中去\"></a>最后将自定义标签注入到freemarker标签中去</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@org.springframework.context.annotation.Configuration</span><br><span class=\"line\">public class FreemarkerConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private Configuration configuration;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private TableThDirective tableThDirective;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void setSharedVariable()&#123;</span><br><span class=\"line\">        configuration.setSharedVariable(&quot;th&quot;,tableThDirective);</span><br><span class=\"line\">        configuration.setSharedVariable(&quot;shiro&quot;,new ShiroTags());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>这样就大功告成了。</p>\n<p>在页面上进行使用吧：<code>&lt;@th type=&quot;template&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code></p>\n<p>以后进行扩展什么的也方便，比如生成下拉框：<code>&lt;@th type=&quot;select&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code>这样然后自动生成html的时候查出来所有的字典，根据类型生成多个<option>出来就行了。</option></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在layui的开发中，我们经常会用到表格数据展示。但是在数据库中我们通常保存的一些状态等数据，都是枚举值，而我们在前端展示的时候就不能使用这些枚举值了，而要展示枚举值对应的意义数据。比如状态status，1=启用，0=停用。<br>那么在layui的数据表格中，我们要展示这样的数据，写法可以是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">templet: function (d) &#123;</span><br><span class=\"line\">  if(d.status === 1)&#123;</span><br><span class=\"line\">      return &quot;启用&quot;;</span><br><span class=\"line\">  &#125; else if(d.status === 0)&#123;</span><br><span class=\"line\">      return &quot;停用&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是这样的写法很low啊，我们在数据库中定义多少枚举值在这里就要写多少代码，一旦有重复使用的情况，这种写法会让我们痛不欲生。<br>在考虑到后台使用freemarker的情况下，配置freemarker自定义标签就能很好地解决这个问题。<br>最后我们的写法就会简化成：<code>&lt;@th type=&quot;template&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code>，接下来看看如何在springboot中配置使用吧。<br>","more":"</p>\n<h3 id=\"freemarker自定义标签介绍及使用\"><a href=\"#freemarker自定义标签介绍及使用\" class=\"headerlink\" title=\"freemarker自定义标签介绍及使用\"></a>freemarker自定义标签介绍及使用</h3><p><code>TemplateDirectiveModel</code>接口是freemarker自定标签或者自定义指令的核心处理接口。当模板页面遇到用户自定义的标签指令时，<code>execute()</code>方法会被执行。<code>execute()</code>方法如下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void execute(</span><br><span class=\"line\">  Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body</span><br><span class=\"line\">) throws TemplateException, IOException;</span><br></pre></td></tr></table></figure></p>\n<p>我们在使用freemarker自定义标签的时候需要实现该接口并且重写execute方法。</p>\n<h4 id=\"execute-方法参数解释\"><a href=\"#execute-方法参数解释\" class=\"headerlink\" title=\"execute()方法参数解释\"></a><code>execute()</code>方法参数解释</h4><ul>\n<li><em>Environment env</em>：系统环境变量，通常用它来输出相关内容，如<code>Writer out = env.getOut();</code></li>\n<li><em>Map params</em>：自定义标签传过来的对象，就是从页面上获取的参数，其key=自定义标签的参数名，value值是TemplateModel类型，而TemplateModel是一个接口类型，通常我们都使用TemplateScalarModel接口来替代它获取一个String 值，如TemplateScalarModel.getAsString();当然还有其它常用的替代接口，如TemplateNumberModel获取number，TemplateHashModel等。<br>在本例使用时，我们会将map转成我们自己的对象进行数据保存。</li>\n<li><em>TemplateModel[] loopVars</em>：循环替代变量</li>\n<li><em>TemplateDirectiveBody body</em>：标签中嵌套的内容，如<code>&lt;@tag&gt;body&lt;/@tag&gt;</code>，就是这个body</li>\n</ul>\n<h4 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h4><h6 id=\"定义接收页面参数的对象\"><a href=\"#定义接收页面参数的对象\" class=\"headerlink\" title=\"定义接收页面参数的对象\"></a>定义接收页面参数的对象</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">public class TableThTag &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 对象属性名【需要进行对象属性获取】</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String objName;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 字典标识</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String nid;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 类型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"实现TemplateDirectiveModel接口并重写execute方法\"><a href=\"#实现TemplateDirectiveModel接口并重写execute方法\" class=\"headerlink\" title=\"实现TemplateDirectiveModel接口并重写execute方法\"></a>实现<code>TemplateDirectiveModel</code>接口并重写<code>execute</code>方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">@org.springframework.context.annotation.Configuration</span><br><span class=\"line\">public class TableThDirective implements TemplateDirectiveModel &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Logger logger = LoggerFactory.getLogger(getClass().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * FreeMarker自定义指令</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void execute(Environment environment, Map map, TemplateModel[] templateModels,</span><br><span class=\"line\">                        TemplateDirectiveBody templateDirectiveBody) throws TemplateException, IOException &#123;</span><br><span class=\"line\">        TableThTag tableThTag = new TableThTag();</span><br><span class=\"line\">        //校验参数</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //  用来将一些 key-value 的值（例如 hashmap）映射到 bean 中的属性</span><br><span class=\"line\">            BeanUtils.populate(tableThTag, map);</span><br><span class=\"line\">            if (StringUtils.isEmpty(tableThTag.getNid()) || StringUtils.isEmpty(tableThTag.getType())) &#123;</span><br><span class=\"line\">                throw new IllegalArgumentException(&quot;nid,type不能为空&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;数据转化异常&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder html = new StringBuilder();</span><br><span class=\"line\">        // 根据类型创建不同的HTML生成器</span><br><span class=\"line\">        ThFormatterInterface thFormatterInterface = ThFormatterFactory.createThFormatter(tableThTag.getType());</span><br><span class=\"line\">        if (thFormatterInterface != null) &#123;</span><br><span class=\"line\">            String dictHtml = thFormatterInterface.buildFormatterHtml(tableThTag.getNid(), tableThTag.getFieldName());</span><br><span class=\"line\">            html.append(dictHtml);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 执行真正指令的执行部分:</span><br><span class=\"line\">        Writer out = environment.getOut();</span><br><span class=\"line\">        out.write(html.toString());</span><br><span class=\"line\">        if (templateDirectiveBody != null) &#123;</span><br><span class=\"line\">            templateDirectiveBody.render(environment.getOut());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static BeansWrapper getBeansWrapper() &#123;</span><br><span class=\"line\">        BeansWrapper beansWrapper =</span><br><span class=\"line\">                new BeansWrapperBuilder(Configuration.VERSION_2_3_21).build();</span><br><span class=\"line\">        return beansWrapper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大家可以看到，在这个方法中，我将页面上的参数转为<code>TableThTag</code>对象。然后再根据前端页面不同的type类型对应<br>实现了<code>ThFormatterInterface</code>的工厂对象，创建不同的html生成器。（这里考虑到扩展性，可能以后不光创建数据表格会用的到，比如下拉框什么的，也可以使用这种方式创建，所以在这里使用抽象工厂依据类型动态创建。）<br>下面就是创建html的具体工厂以及实现方法。</p>\n<h6 id=\"ThFormatterInterface抽象工厂创建html生成器\"><a href=\"#ThFormatterInterface抽象工厂创建html生成器\" class=\"headerlink\" title=\"ThFormatterInterface抽象工厂创建html生成器\"></a><code>ThFormatterInterface</code>抽象工厂创建html生成器</h6><p>接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ThFormatterInterface &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 构造生成枚举html</span><br><span class=\"line\">     * @param nid</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String buildFormatterHtml(String nid, String fieldName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>工厂<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThFormatterFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Logger logger = LoggerFactory.getLogger(ThFormatterFactory.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public static ThFormatterInterface createThFormatter(String type)&#123;</span><br><span class=\"line\">        if(StringUtils.isEmpty(type))&#123;</span><br><span class=\"line\">            return  new ThFormatterTemplate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 文件名 如果type传template 就需要有一个名为ThFormatterTemplate的文件</span><br><span class=\"line\">        // 并且实现了ThFormatterInterface以及重写生成html的方法</span><br><span class=\"line\">        String fileName = &quot;ThFormatter&quot; + StringUtil.firstCharUpperCase(type);</span><br><span class=\"line\">        //类路径 通过反射去创建实现类</span><br><span class=\"line\">        String className = &quot;com.module.freemarker.impl.&quot;+fileName;</span><br><span class=\"line\">        //生成表头格式实现类</span><br><span class=\"line\">        ThFormatterInterface thFormatterInterface = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            thFormatterInterface =(ThFormatterInterface) Class.forName(className).newInstance();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(e.getMessage(),e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return thFormatterInterface;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThFormatterTemplate implements ThFormatterInterface &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String buildFormatterHtml(String nid, String fieldName) &#123;</span><br><span class=\"line\">        Assert.notEMPTY(nid, &quot;nid不能为空&quot;);</span><br><span class=\"line\">        Assert.notEMPTY(fieldName, &quot;objName不能为空&quot;);</span><br><span class=\"line\">        SysDictService sysDictService = SpringContextHolder.getBean(SysDictService.class);</span><br><span class=\"line\">        // 通过nid查询字典类 这里不需要进行照抄 每个人都会有自己的实现方法</span><br><span class=\"line\">        List&lt;SysDictBO&gt; sysDictModelList = sysDictService.findByPartnerNid(nid);</span><br><span class=\"line\">        StringBuilder dictHtml = new StringBuilder();</span><br><span class=\"line\">        // 反正目的就是根据字典类生成对应的html就行了 需要生成的格式对照template原本应该有的写法就行了</span><br><span class=\"line\">        dictHtml.append(&quot;templet: function(d)&#123; &quot;);</span><br><span class=\"line\">        for (SysDictBO sysDict : sysDictModelList) &#123;</span><br><span class=\"line\">            dictHtml.append(&quot;if(d.&quot; + fieldName + &quot; == &apos;&quot; + sysDict.getValue() + &quot;&apos;)&#123; return &apos;&quot; + sysDict.getName() + &quot;&apos;;&#125;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dictHtml.append(&quot;&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        return dictHtml.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"最后将自定义标签注入到freemarker标签中去\"><a href=\"#最后将自定义标签注入到freemarker标签中去\" class=\"headerlink\" title=\"最后将自定义标签注入到freemarker标签中去\"></a>最后将自定义标签注入到freemarker标签中去</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@org.springframework.context.annotation.Configuration</span><br><span class=\"line\">public class FreemarkerConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private Configuration configuration;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private TableThDirective tableThDirective;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void setSharedVariable()&#123;</span><br><span class=\"line\">        configuration.setSharedVariable(&quot;th&quot;,tableThDirective);</span><br><span class=\"line\">        configuration.setSharedVariable(&quot;shiro&quot;,new ShiroTags());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>这样就大功告成了。</p>\n<p>在页面上进行使用吧：<code>&lt;@th type=&quot;template&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code></p>\n<p>以后进行扩展什么的也方便，比如生成下拉框：<code>&lt;@th type=&quot;select&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code>这样然后自动生成html的时候查出来所有的字典，根据类型生成多个<option>出来就行了。</option></p>"},{"title":"springboot+shiro解决session污染的问题","date":"2019-03-09T07:26:49.000Z","_content":"\n#### 同一个服务器启动多个web项目造成session污染\n\n昨天在敲代码的时候遇到了一个问题，同一个项目，我创建了两个分支，分别使用不同的端口。\n但是在测试环境启动的时候我发现，在同一个浏览器上，我只能登陆其中的一个后台。在登陆另一个后台之后，前面那个\n又需要再重新登陆了。\n\n原因找了好久，最后F12控制台查看session发现，这两个web项目，使用的都是JSessionId作为cookie的key，在登陆另一个时，浏览器的这个cookie值就会被改变，所以前者就需要在重新登陆了。\n\n<!--more-->\n#### 解决方法\n在springboot中，对shiro配置进行更改session保存时的cookie的key名称，如下。\n```\n@Bean\npublic DefaultWebSessionManager sessionManager() {\n    DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();\n    Cookie cookie = sessionManager.getSessionIdCookie();\n    cookie.setName(\"MySessionId\");\n    return sessionManager;\n}\n```\n然后在`securityManager`中将我们的`sessionManager`注入进去。\n```\n/**\n * SecurityManager，权限管理，这个类组合了登陆，登出，权限，session的处理，是个比较重要的类。\n */\n@Bean\npublic DefaultWebSecurityManager securityManager() {\n    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n    securityManager.setRealm(myShiroRealm());\n    securityManager.setSessionManager(sessionManager());\n    return securityManager;\n}\n```\n只需要这样修改好就可以了。然后重启项目，就会发现，两个web项目都可以同时登陆了。\n","source":"_posts/springboot+shiro解决session污染问题.md","raw":"---\ntitle: springboot+shiro解决session污染的问题\ndate: 2019-03-09 15:26:49\ncategories: [Java基础]\ntags: [springboot,shiro,session污染]\n---\n\n#### 同一个服务器启动多个web项目造成session污染\n\n昨天在敲代码的时候遇到了一个问题，同一个项目，我创建了两个分支，分别使用不同的端口。\n但是在测试环境启动的时候我发现，在同一个浏览器上，我只能登陆其中的一个后台。在登陆另一个后台之后，前面那个\n又需要再重新登陆了。\n\n原因找了好久，最后F12控制台查看session发现，这两个web项目，使用的都是JSessionId作为cookie的key，在登陆另一个时，浏览器的这个cookie值就会被改变，所以前者就需要在重新登陆了。\n\n<!--more-->\n#### 解决方法\n在springboot中，对shiro配置进行更改session保存时的cookie的key名称，如下。\n```\n@Bean\npublic DefaultWebSessionManager sessionManager() {\n    DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();\n    Cookie cookie = sessionManager.getSessionIdCookie();\n    cookie.setName(\"MySessionId\");\n    return sessionManager;\n}\n```\n然后在`securityManager`中将我们的`sessionManager`注入进去。\n```\n/**\n * SecurityManager，权限管理，这个类组合了登陆，登出，权限，session的处理，是个比较重要的类。\n */\n@Bean\npublic DefaultWebSecurityManager securityManager() {\n    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n    securityManager.setRealm(myShiroRealm());\n    securityManager.setSessionManager(sessionManager());\n    return securityManager;\n}\n```\n只需要这样修改好就可以了。然后重启项目，就会发现，两个web项目都可以同时登陆了。\n","slug":"springboot+shiro解决session污染问题","published":1,"updated":"2019-04-05T04:46:27.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zphj000glcuhazdeawpm","content":"<h4 id=\"同一个服务器启动多个web项目造成session污染\"><a href=\"#同一个服务器启动多个web项目造成session污染\" class=\"headerlink\" title=\"同一个服务器启动多个web项目造成session污染\"></a>同一个服务器启动多个web项目造成session污染</h4><p>昨天在敲代码的时候遇到了一个问题，同一个项目，我创建了两个分支，分别使用不同的端口。<br>但是在测试环境启动的时候我发现，在同一个浏览器上，我只能登陆其中的一个后台。在登陆另一个后台之后，前面那个<br>又需要再重新登陆了。</p>\n<p>原因找了好久，最后F12控制台查看session发现，这两个web项目，使用的都是JSessionId作为cookie的key，在登陆另一个时，浏览器的这个cookie值就会被改变，所以前者就需要在重新登陆了。</p>\n<a id=\"more\"></a>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>在springboot中，对shiro配置进行更改session保存时的cookie的key名称，如下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public DefaultWebSessionManager sessionManager() &#123;</span><br><span class=\"line\">    DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();</span><br><span class=\"line\">    Cookie cookie = sessionManager.getSessionIdCookie();</span><br><span class=\"line\">    cookie.setName(&quot;MySessionId&quot;);</span><br><span class=\"line\">    return sessionManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在<code>securityManager</code>中将我们的<code>sessionManager</code>注入进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * SecurityManager，权限管理，这个类组合了登陆，登出，权限，session的处理，是个比较重要的类。</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public DefaultWebSecurityManager securityManager() &#123;</span><br><span class=\"line\">    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class=\"line\">    securityManager.setRealm(myShiroRealm());</span><br><span class=\"line\">    securityManager.setSessionManager(sessionManager());</span><br><span class=\"line\">    return securityManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>只需要这样修改好就可以了。然后重启项目，就会发现，两个web项目都可以同时登陆了。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"同一个服务器启动多个web项目造成session污染\"><a href=\"#同一个服务器启动多个web项目造成session污染\" class=\"headerlink\" title=\"同一个服务器启动多个web项目造成session污染\"></a>同一个服务器启动多个web项目造成session污染</h4><p>昨天在敲代码的时候遇到了一个问题，同一个项目，我创建了两个分支，分别使用不同的端口。<br>但是在测试环境启动的时候我发现，在同一个浏览器上，我只能登陆其中的一个后台。在登陆另一个后台之后，前面那个<br>又需要再重新登陆了。</p>\n<p>原因找了好久，最后F12控制台查看session发现，这两个web项目，使用的都是JSessionId作为cookie的key，在登陆另一个时，浏览器的这个cookie值就会被改变，所以前者就需要在重新登陆了。</p>","more":"<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>在springboot中，对shiro配置进行更改session保存时的cookie的key名称，如下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">public DefaultWebSessionManager sessionManager() &#123;</span><br><span class=\"line\">    DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();</span><br><span class=\"line\">    Cookie cookie = sessionManager.getSessionIdCookie();</span><br><span class=\"line\">    cookie.setName(&quot;MySessionId&quot;);</span><br><span class=\"line\">    return sessionManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在<code>securityManager</code>中将我们的<code>sessionManager</code>注入进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * SecurityManager，权限管理，这个类组合了登陆，登出，权限，session的处理，是个比较重要的类。</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public DefaultWebSecurityManager securityManager() &#123;</span><br><span class=\"line\">    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class=\"line\">    securityManager.setRealm(myShiroRealm());</span><br><span class=\"line\">    securityManager.setSessionManager(sessionManager());</span><br><span class=\"line\">    return securityManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>只需要这样修改好就可以了。然后重启项目，就会发现，两个web项目都可以同时登陆了。</p>"},{"title":"spring-boot微服务搭建","date":"2018-03-27T09:01:21.000Z","_content":"\n[本人的csdn传送门](http://blog.csdn.net/qq_26627671/article/details/76563127)\n### 前言\n> 进行web开发的时候Java程序员们难免会碰到那种很小的服务，比如就提供一个生成订单号的接口，或者一个上传文件的服务。而这时我们再去使用SpringMVC这种体量稍大、配置繁琐的框架开发难免会加大工作量，而且是不必要的。这个时候我们就可以选择使用这个微服务框架——springboot进行开发。\n\nSpring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。\n\n<!--more-->\n\n----------\n### springboot框架的搭建与简单的REST风格的MVC架构demo\n#### 首先，建立一个新的maven工程，pom文件主要内容如下：\n```\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.2.1.RELEASE</version>\n    <relativePath/>\n  </parent>\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <java.version>1.8</java.version>\n  </properties>\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n    \n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n```\n其中核心依赖是\t`spring-boot-starter-web`\n```\n\t<dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n```\n访问静态资源文件可以加入模板：\n```\n\t<dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n```\n#### 编写Application.java文件，存放于src/main/java这个目录下\n##### 这里是springboot的核心启动类\n```\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n@Configuration\n@ComponentScan\n@EnableAutoConfiguration\npublic class Application{\n\t\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n}\n```\n事实上，这个时候已经把框架搭建好了，运行以上main方法即可启动这个项目，但是我们现在看不到效果，接下来，就可以像SpringMVC一样加入MVC三层结构的代码了，目录结构如下图：\n\n![REST风格的MVC架构demo项目目录结构](http://upload-images.jianshu.io/upload_images/3327380-fb0da321cb7b5abb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中各层代码如下：\n#### controller\n```\npackage com.zhang.controller;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.ModelAndView;\nimport com.zhang.entity.Photo;\nimport com.zhang.service.mainService;\n@RestController\n@RequestMapping(\"/photo\")\npublic class mainController {\n\n\t@Autowired\n\tprivate mainService mainservice;\n\t@RequestMapping(\"/\")\n\tpublic ModelAndView index(ModelAndView mav){\n\t\tmav.addObject(\"hello\", \"这是项目主页，访问根目录到达~~\");\n\t\tmav.setViewName(\"index\");\n\t\treturn mav;\n\t}\n\t@RequestMapping(\"/getPhoto\")\n\tpublic Object doIt(){\n\t\tMap<String, Photo> map = new HashMap<String, Photo>();\n\t\tmap.put(\"photo\", mainservice.getPhotoById(123));\n\t\treturn map;\n\t}\n}\n\n```\n#### service实现类\n```\npackage com.zhang.service.impl;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.zhang.dao.mainDao;\nimport com.zhang.entity.Photo;\nimport com.zhang.service.mainService;\n@Service(\"mainservice\")\npublic class mainServiceImpl implements mainService {\n\n\t@Autowired\n\tprivate mainDao maindao;\n\t@Override\n\tpublic Photo getPhotoById(int id) {\n\t\treturn maindao.getPhotoNameById(id);\n\t}\n\n}\n\n```\n#### dao实现类\n```\npackage com.zhang.dao.impl;\n\nimport org.springframework.stereotype.Repository;\n\nimport com.zhang.dao.mainDao;\nimport com.zhang.entity.Photo;\n\n@Repository(\"maindao\")\npublic class mainDaoImpl implements mainDao {\n\n\t@Override\n\tpublic Photo getPhotoNameById(int id) {\n\t\tPhoto p = new Photo();\n\t\tp.setId(123);\n\t\tp.setName(\"雪山行纪念照\");\n\t\treturn p;\n\t}\n\n}\n\n```\n#### 实体类photo\n```\npackage com.zhang.entity;\npublic class Photo {\n\tprivate int id;\n\tprivate String name;\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n}\n\n```\n#### 启动项目\n\n![项目启动日志](http://upload-images.jianshu.io/upload_images/3327380-8ed38aa7e3e43e40?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 项目默认端口为8080，在浏览器中访问刚才的controller会看到：\n\n![访问结果](http://upload-images.jianshu.io/upload_images/3327380-75812c968f3ff846?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n----------\n### 如上，一个REST风格的MVC架构的demo项目就搭建完成了。\n","source":"_posts/spring-boot微服务搭建.md","raw":"---\ntitle: spring-boot微服务搭建\ndate: 2018-03-27 17:01:21\ncategories: [框架相关]\ntags: [springboot]\n---\n\n[本人的csdn传送门](http://blog.csdn.net/qq_26627671/article/details/76563127)\n### 前言\n> 进行web开发的时候Java程序员们难免会碰到那种很小的服务，比如就提供一个生成订单号的接口，或者一个上传文件的服务。而这时我们再去使用SpringMVC这种体量稍大、配置繁琐的框架开发难免会加大工作量，而且是不必要的。这个时候我们就可以选择使用这个微服务框架——springboot进行开发。\n\nSpring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。\n\n<!--more-->\n\n----------\n### springboot框架的搭建与简单的REST风格的MVC架构demo\n#### 首先，建立一个新的maven工程，pom文件主要内容如下：\n```\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.2.1.RELEASE</version>\n    <relativePath/>\n  </parent>\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <java.version>1.8</java.version>\n  </properties>\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n    \n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n```\n其中核心依赖是\t`spring-boot-starter-web`\n```\n\t<dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n```\n访问静态资源文件可以加入模板：\n```\n\t<dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n```\n#### 编写Application.java文件，存放于src/main/java这个目录下\n##### 这里是springboot的核心启动类\n```\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n@Configuration\n@ComponentScan\n@EnableAutoConfiguration\npublic class Application{\n\t\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n}\n```\n事实上，这个时候已经把框架搭建好了，运行以上main方法即可启动这个项目，但是我们现在看不到效果，接下来，就可以像SpringMVC一样加入MVC三层结构的代码了，目录结构如下图：\n\n![REST风格的MVC架构demo项目目录结构](http://upload-images.jianshu.io/upload_images/3327380-fb0da321cb7b5abb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中各层代码如下：\n#### controller\n```\npackage com.zhang.controller;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.ModelAndView;\nimport com.zhang.entity.Photo;\nimport com.zhang.service.mainService;\n@RestController\n@RequestMapping(\"/photo\")\npublic class mainController {\n\n\t@Autowired\n\tprivate mainService mainservice;\n\t@RequestMapping(\"/\")\n\tpublic ModelAndView index(ModelAndView mav){\n\t\tmav.addObject(\"hello\", \"这是项目主页，访问根目录到达~~\");\n\t\tmav.setViewName(\"index\");\n\t\treturn mav;\n\t}\n\t@RequestMapping(\"/getPhoto\")\n\tpublic Object doIt(){\n\t\tMap<String, Photo> map = new HashMap<String, Photo>();\n\t\tmap.put(\"photo\", mainservice.getPhotoById(123));\n\t\treturn map;\n\t}\n}\n\n```\n#### service实现类\n```\npackage com.zhang.service.impl;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.zhang.dao.mainDao;\nimport com.zhang.entity.Photo;\nimport com.zhang.service.mainService;\n@Service(\"mainservice\")\npublic class mainServiceImpl implements mainService {\n\n\t@Autowired\n\tprivate mainDao maindao;\n\t@Override\n\tpublic Photo getPhotoById(int id) {\n\t\treturn maindao.getPhotoNameById(id);\n\t}\n\n}\n\n```\n#### dao实现类\n```\npackage com.zhang.dao.impl;\n\nimport org.springframework.stereotype.Repository;\n\nimport com.zhang.dao.mainDao;\nimport com.zhang.entity.Photo;\n\n@Repository(\"maindao\")\npublic class mainDaoImpl implements mainDao {\n\n\t@Override\n\tpublic Photo getPhotoNameById(int id) {\n\t\tPhoto p = new Photo();\n\t\tp.setId(123);\n\t\tp.setName(\"雪山行纪念照\");\n\t\treturn p;\n\t}\n\n}\n\n```\n#### 实体类photo\n```\npackage com.zhang.entity;\npublic class Photo {\n\tprivate int id;\n\tprivate String name;\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n}\n\n```\n#### 启动项目\n\n![项目启动日志](http://upload-images.jianshu.io/upload_images/3327380-8ed38aa7e3e43e40?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 项目默认端口为8080，在浏览器中访问刚才的controller会看到：\n\n![访问结果](http://upload-images.jianshu.io/upload_images/3327380-75812c968f3ff846?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n----------\n### 如上，一个REST风格的MVC架构的demo项目就搭建完成了。\n","slug":"spring-boot微服务搭建","published":1,"updated":"2019-04-05T04:46:27.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zphl000hlcuhdslvkmwu","content":"<p><a href=\"http://blog.csdn.net/qq_26627671/article/details/76563127\" target=\"_blank\" rel=\"noopener\">本人的csdn传送门</a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>进行web开发的时候Java程序员们难免会碰到那种很小的服务，比如就提供一个生成订单号的接口，或者一个上传文件的服务。而这时我们再去使用SpringMVC这种体量稍大、配置繁琐的框架开发难免会加大工作量，而且是不必要的。这个时候我们就可以选择使用这个微服务框架——springboot进行开发。</p>\n</blockquote>\n<p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"springboot框架的搭建与简单的REST风格的MVC架构demo\"><a href=\"#springboot框架的搭建与简单的REST风格的MVC架构demo\" class=\"headerlink\" title=\"springboot框架的搭建与简单的REST风格的MVC架构demo\"></a>springboot框架的搭建与简单的REST风格的MVC架构demo</h3><h4 id=\"首先，建立一个新的maven工程，pom文件主要内容如下：\"><a href=\"#首先，建立一个新的maven工程，pom文件主要内容如下：\" class=\"headerlink\" title=\"首先，建立一个新的maven工程，pom文件主要内容如下：\"></a>首先，建立一个新的maven工程，pom文件主要内容如下：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;relativePath/&gt;</span><br><span class=\"line\">  &lt;/parent&gt;</span><br><span class=\"line\">  &lt;properties&gt;</span><br><span class=\"line\">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">  &lt;/properties&gt;</span><br><span class=\"line\">  &lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">  &lt;/dependencies&gt;</span><br><span class=\"line\">  &lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">  &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<p>其中核心依赖是    <code>spring-boot-starter-web</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>访问静态资源文件可以加入模板：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">       &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"编写Application-java文件，存放于src-main-java这个目录下\"><a href=\"#编写Application-java文件，存放于src-main-java这个目录下\" class=\"headerlink\" title=\"编写Application.java文件，存放于src/main/java这个目录下\"></a>编写Application.java文件，存放于src/main/java这个目录下</h4><h5 id=\"这里是springboot的核心启动类\"><a href=\"#这里是springboot的核心启动类\" class=\"headerlink\" title=\"这里是springboot的核心启动类\"></a>这里是springboot的核心启动类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class=\"line\">import org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@ComponentScan</span><br><span class=\"line\">@EnableAutoConfiguration</span><br><span class=\"line\">public class Application&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(Application.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实上，这个时候已经把框架搭建好了，运行以上main方法即可启动这个项目，但是我们现在看不到效果，接下来，就可以像SpringMVC一样加入MVC三层结构的代码了，目录结构如下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3327380-fb0da321cb7b5abb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"REST风格的MVC架构demo项目目录结构\"></p>\n<p>其中各层代码如下：</p>\n<h4 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zhang.controller;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\">import org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\">import com.zhang.entity.Photo;</span><br><span class=\"line\">import com.zhang.service.mainService;</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;/photo&quot;)</span><br><span class=\"line\">public class mainController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Autowired</span><br><span class=\"line\">\tprivate mainService mainservice;</span><br><span class=\"line\">\t@RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">\tpublic ModelAndView index(ModelAndView mav)&#123;</span><br><span class=\"line\">\t\tmav.addObject(&quot;hello&quot;, &quot;这是项目主页，访问根目录到达~~&quot;);</span><br><span class=\"line\">\t\tmav.setViewName(&quot;index&quot;);</span><br><span class=\"line\">\t\treturn mav;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@RequestMapping(&quot;/getPhoto&quot;)</span><br><span class=\"line\">\tpublic Object doIt()&#123;</span><br><span class=\"line\">\t\tMap&lt;String, Photo&gt; map = new HashMap&lt;String, Photo&gt;();</span><br><span class=\"line\">\t\tmap.put(&quot;photo&quot;, mainservice.getPhotoById(123));</span><br><span class=\"line\">\t\treturn map;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"service实现类\"><a href=\"#service实现类\" class=\"headerlink\" title=\"service实现类\"></a>service实现类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zhang.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.zhang.dao.mainDao;</span><br><span class=\"line\">import com.zhang.entity.Photo;</span><br><span class=\"line\">import com.zhang.service.mainService;</span><br><span class=\"line\">@Service(&quot;mainservice&quot;)</span><br><span class=\"line\">public class mainServiceImpl implements mainService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Autowired</span><br><span class=\"line\">\tprivate mainDao maindao;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Photo getPhotoById(int id) &#123;</span><br><span class=\"line\">\t\treturn maindao.getPhotoNameById(id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"dao实现类\"><a href=\"#dao实现类\" class=\"headerlink\" title=\"dao实现类\"></a>dao实现类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zhang.dao.impl;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.stereotype.Repository;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.zhang.dao.mainDao;</span><br><span class=\"line\">import com.zhang.entity.Photo;</span><br><span class=\"line\"></span><br><span class=\"line\">@Repository(&quot;maindao&quot;)</span><br><span class=\"line\">public class mainDaoImpl implements mainDao &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Photo getPhotoNameById(int id) &#123;</span><br><span class=\"line\">\t\tPhoto p = new Photo();</span><br><span class=\"line\">\t\tp.setId(123);</span><br><span class=\"line\">\t\tp.setName(&quot;雪山行纪念照&quot;);</span><br><span class=\"line\">\t\treturn p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实体类photo\"><a href=\"#实体类photo\" class=\"headerlink\" title=\"实体类photo\"></a>实体类photo</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zhang.entity;</span><br><span class=\"line\">public class Photo &#123;</span><br><span class=\"line\">\tprivate int id;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tpublic int getId() &#123;</span><br><span class=\"line\">\t\treturn id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setId(int id) &#123;</span><br><span class=\"line\">\t\tthis.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/3327380-8ed38aa7e3e43e40?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"项目启动日志\"></p>\n<h4 id=\"项目默认端口为8080，在浏览器中访问刚才的controller会看到：\"><a href=\"#项目默认端口为8080，在浏览器中访问刚才的controller会看到：\" class=\"headerlink\" title=\"项目默认端口为8080，在浏览器中访问刚才的controller会看到：\"></a>项目默认端口为8080，在浏览器中访问刚才的controller会看到：</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/3327380-75812c968f3ff846?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"访问结果\"></p>\n<hr>\n<h3 id=\"如上，一个REST风格的MVC架构的demo项目就搭建完成了。\"><a href=\"#如上，一个REST风格的MVC架构的demo项目就搭建完成了。\" class=\"headerlink\" title=\"如上，一个REST风格的MVC架构的demo项目就搭建完成了。\"></a>如上，一个REST风格的MVC架构的demo项目就搭建完成了。</h3>","site":{"data":{}},"excerpt":"<p><a href=\"http://blog.csdn.net/qq_26627671/article/details/76563127\" target=\"_blank\" rel=\"noopener\">本人的csdn传送门</a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>进行web开发的时候Java程序员们难免会碰到那种很小的服务，比如就提供一个生成订单号的接口，或者一个上传文件的服务。而这时我们再去使用SpringMVC这种体量稍大、配置繁琐的框架开发难免会加大工作量，而且是不必要的。这个时候我们就可以选择使用这个微服务框架——springboot进行开发。</p>\n</blockquote>\n<p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p>","more":"<hr>\n<h3 id=\"springboot框架的搭建与简单的REST风格的MVC架构demo\"><a href=\"#springboot框架的搭建与简单的REST风格的MVC架构demo\" class=\"headerlink\" title=\"springboot框架的搭建与简单的REST风格的MVC架构demo\"></a>springboot框架的搭建与简单的REST风格的MVC架构demo</h3><h4 id=\"首先，建立一个新的maven工程，pom文件主要内容如下：\"><a href=\"#首先，建立一个新的maven工程，pom文件主要内容如下：\" class=\"headerlink\" title=\"首先，建立一个新的maven工程，pom文件主要内容如下：\"></a>首先，建立一个新的maven工程，pom文件主要内容如下：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.1.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;relativePath/&gt;</span><br><span class=\"line\">  &lt;/parent&gt;</span><br><span class=\"line\">  &lt;properties&gt;</span><br><span class=\"line\">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class=\"line\">  &lt;/properties&gt;</span><br><span class=\"line\">  &lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">  &lt;/dependencies&gt;</span><br><span class=\"line\">  &lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">  &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<p>其中核心依赖是    <code>spring-boot-starter-web</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>访问静态资源文件可以加入模板：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">       &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"编写Application-java文件，存放于src-main-java这个目录下\"><a href=\"#编写Application-java文件，存放于src-main-java这个目录下\" class=\"headerlink\" title=\"编写Application.java文件，存放于src/main/java这个目录下\"></a>编写Application.java文件，存放于src/main/java这个目录下</h4><h5 id=\"这里是springboot的核心启动类\"><a href=\"#这里是springboot的核心启动类\" class=\"headerlink\" title=\"这里是springboot的核心启动类\"></a>这里是springboot的核心启动类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class=\"line\">import org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@ComponentScan</span><br><span class=\"line\">@EnableAutoConfiguration</span><br><span class=\"line\">public class Application&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(Application.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实上，这个时候已经把框架搭建好了，运行以上main方法即可启动这个项目，但是我们现在看不到效果，接下来，就可以像SpringMVC一样加入MVC三层结构的代码了，目录结构如下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3327380-fb0da321cb7b5abb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"REST风格的MVC架构demo项目目录结构\"></p>\n<p>其中各层代码如下：</p>\n<h4 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zhang.controller;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\">import org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\">import com.zhang.entity.Photo;</span><br><span class=\"line\">import com.zhang.service.mainService;</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">@RequestMapping(&quot;/photo&quot;)</span><br><span class=\"line\">public class mainController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Autowired</span><br><span class=\"line\">\tprivate mainService mainservice;</span><br><span class=\"line\">\t@RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">\tpublic ModelAndView index(ModelAndView mav)&#123;</span><br><span class=\"line\">\t\tmav.addObject(&quot;hello&quot;, &quot;这是项目主页，访问根目录到达~~&quot;);</span><br><span class=\"line\">\t\tmav.setViewName(&quot;index&quot;);</span><br><span class=\"line\">\t\treturn mav;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@RequestMapping(&quot;/getPhoto&quot;)</span><br><span class=\"line\">\tpublic Object doIt()&#123;</span><br><span class=\"line\">\t\tMap&lt;String, Photo&gt; map = new HashMap&lt;String, Photo&gt;();</span><br><span class=\"line\">\t\tmap.put(&quot;photo&quot;, mainservice.getPhotoById(123));</span><br><span class=\"line\">\t\treturn map;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"service实现类\"><a href=\"#service实现类\" class=\"headerlink\" title=\"service实现类\"></a>service实现类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zhang.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.zhang.dao.mainDao;</span><br><span class=\"line\">import com.zhang.entity.Photo;</span><br><span class=\"line\">import com.zhang.service.mainService;</span><br><span class=\"line\">@Service(&quot;mainservice&quot;)</span><br><span class=\"line\">public class mainServiceImpl implements mainService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Autowired</span><br><span class=\"line\">\tprivate mainDao maindao;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Photo getPhotoById(int id) &#123;</span><br><span class=\"line\">\t\treturn maindao.getPhotoNameById(id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"dao实现类\"><a href=\"#dao实现类\" class=\"headerlink\" title=\"dao实现类\"></a>dao实现类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zhang.dao.impl;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.stereotype.Repository;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.zhang.dao.mainDao;</span><br><span class=\"line\">import com.zhang.entity.Photo;</span><br><span class=\"line\"></span><br><span class=\"line\">@Repository(&quot;maindao&quot;)</span><br><span class=\"line\">public class mainDaoImpl implements mainDao &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Photo getPhotoNameById(int id) &#123;</span><br><span class=\"line\">\t\tPhoto p = new Photo();</span><br><span class=\"line\">\t\tp.setId(123);</span><br><span class=\"line\">\t\tp.setName(&quot;雪山行纪念照&quot;);</span><br><span class=\"line\">\t\treturn p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实体类photo\"><a href=\"#实体类photo\" class=\"headerlink\" title=\"实体类photo\"></a>实体类photo</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zhang.entity;</span><br><span class=\"line\">public class Photo &#123;</span><br><span class=\"line\">\tprivate int id;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tpublic int getId() &#123;</span><br><span class=\"line\">\t\treturn id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setId(int id) &#123;</span><br><span class=\"line\">\t\tthis.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/3327380-8ed38aa7e3e43e40?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"项目启动日志\"></p>\n<h4 id=\"项目默认端口为8080，在浏览器中访问刚才的controller会看到：\"><a href=\"#项目默认端口为8080，在浏览器中访问刚才的controller会看到：\" class=\"headerlink\" title=\"项目默认端口为8080，在浏览器中访问刚才的controller会看到：\"></a>项目默认端口为8080，在浏览器中访问刚才的controller会看到：</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/3327380-75812c968f3ff846?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"访问结果\"></p>\n<hr>\n<h3 id=\"如上，一个REST风格的MVC架构的demo项目就搭建完成了。\"><a href=\"#如上，一个REST风格的MVC架构的demo项目就搭建完成了。\" class=\"headerlink\" title=\"如上，一个REST风格的MVC架构的demo项目就搭建完成了。\"></a>如上，一个REST风格的MVC架构的demo项目就搭建完成了。</h3>"},{"title":"【陈年风楼】VLOG-000001 一个普通的程序员的普通的一天","date":"2018-04-21T02:21:02.000Z","_content":"\n<iframe src=\"//player.bilibili.com/player.html?aid=22367659&cid=37047708&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"width: 100%;height: 700px\"> </iframe>","source":"_posts/vlog-程序员的一天.md","raw":"---\ntitle: 【陈年风楼】VLOG-000001 一个普通的程序员的普通的一天\ndate: 2018-04-21 10:21:02\ncategories: [程序人生]\ntags: [程序人生]\n---\n\n<iframe src=\"//player.bilibili.com/player.html?aid=22367659&cid=37047708&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"width: 100%;height: 700px\"> </iframe>","slug":"vlog-程序员的一天","published":1,"updated":"2019-04-05T04:46:27.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zphq000nlcuhev5gw3lc","content":"<iframe src=\"//player.bilibili.com/player.html?aid=22367659&cid=37047708&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"width: 100%;height: 700px\"> </iframe>","site":{"data":{}},"excerpt":"","more":"<iframe src=\"//player.bilibili.com/player.html?aid=22367659&cid=37047708&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"width: 100%;height: 700px\"> </iframe>"},{"title":"nodepad++不用插件去重的方法","date":"2018-11-12T05:54:14.000Z","_content":"\n在工作中，当我们需要对一个文本中的行进行去重统计的时候，会发现对于文本的去重并不是那么好处理。而nodepad++的去重插件一般人又懒得去安装，不巧在网上找到这样一个去重的小技巧，即使用正则表达式进行去重，简直方便快捷。\n在这里分享出来，希望大家能够用的上。\n```\n^(.*?)$\\s+?^(?=.*^\\1$)\n```\n![使用nodepad++去重](https://blog.yimik.com/wp-content/uploads/2015/11/rm_duplicate_rows.png)\n\n点击全部替换，就可以将重复行全部去掉喽\n","source":"_posts/nodepad-不用插件去重的方法.md","raw":"---\ntitle: nodepad++不用插件去重的方法\ndate: 2018-11-12 13:54:14\ncategories: [开发工具]\ntags: [开发日记,工作技巧,nodepad++]\n---\n\n在工作中，当我们需要对一个文本中的行进行去重统计的时候，会发现对于文本的去重并不是那么好处理。而nodepad++的去重插件一般人又懒得去安装，不巧在网上找到这样一个去重的小技巧，即使用正则表达式进行去重，简直方便快捷。\n在这里分享出来，希望大家能够用的上。\n```\n^(.*?)$\\s+?^(?=.*^\\1$)\n```\n![使用nodepad++去重](https://blog.yimik.com/wp-content/uploads/2015/11/rm_duplicate_rows.png)\n\n点击全部替换，就可以将重复行全部去掉喽\n","slug":"nodepad-不用插件去重的方法","published":1,"updated":"2019-04-05T04:46:27.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zphs000slcuh2i87uy33","content":"<p>在工作中，当我们需要对一个文本中的行进行去重统计的时候，会发现对于文本的去重并不是那么好处理。而nodepad++的去重插件一般人又懒得去安装，不巧在网上找到这样一个去重的小技巧，即使用正则表达式进行去重，简直方便快捷。<br>在这里分享出来，希望大家能够用的上。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(.*?)$\\s+?^(?=.*^\\1$)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://blog.yimik.com/wp-content/uploads/2015/11/rm_duplicate_rows.png\" alt=\"使用nodepad++去重\"></p>\n<p>点击全部替换，就可以将重复行全部去掉喽</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在工作中，当我们需要对一个文本中的行进行去重统计的时候，会发现对于文本的去重并不是那么好处理。而nodepad++的去重插件一般人又懒得去安装，不巧在网上找到这样一个去重的小技巧，即使用正则表达式进行去重，简直方便快捷。<br>在这里分享出来，希望大家能够用的上。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(.*?)$\\s+?^(?=.*^\\1$)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://blog.yimik.com/wp-content/uploads/2015/11/rm_duplicate_rows.png\" alt=\"使用nodepad++去重\"></p>\n<p>点击全部替换，就可以将重复行全部去掉喽</p>\n"},{"title":"一个菜鸟在三星实习的那点儿感受","date":"2016-09-11T12:20:45.000Z","_content":"&nbsp;&nbsp;&nbsp;&nbsp;2016年暑假，在大学这片沃土上的第三个学期就这样结束了，回想大学这三年，为了自己的未来迷茫过，也为自己努力过，也为了不少事情烦恼过，不知道将来自己可以在什么地方过着怎样的生活。曾经以为自己将会平凡地与大部分人一样，每天上着不知老师所云的课程，浑浑噩噩地度过这大学四年的生活，然后找一个普普通通的工作，但是也算自己运气好吧，在大一第二学期遇到了一位让自己眼前一亮的老师，慢慢学习并了解程序员这个行业，最后决定走上学习Java开发的道路。\n\n&nbsp;&nbsp;&nbsp;&nbsp;很早就听说，在大三暑假如果能够找到一个好的专业对口的暑期实习的话，那么在大学毕业以后找工作就方便许多。于是在2016年3月，我便一边努力学习着web开发的相关知识，一边在网上投简历找着实习，终于在一个学长的内推下，我进入了西安三星半导体有限公司，原西安三星电子研究所。\n\n&nbsp;&nbsp;&nbsp;&nbsp;三星是一个气氛非常好的公司，直到现在我都觉得能够进入这个公司是我大学期间的很幸运的一件事。在这儿我遇到了对我很好的师傅们，和那些谦逊和善的同事们。\n\n&nbsp;&nbsp;&nbsp;&nbsp;一开始进入公司，我被派的任务是进行artik芯片的测试执行，输出测试执行报告并且开发相应的shell脚本进行自动化测试。因为之前没有过Linux开发经验，所以对于这项工作还是有很多畏惧，怕自己不能完成相应的任务。后来进过一个礼拜的熟悉以后，对于自动化测试的脚本开发和测试执行更加得心应手起来。Artik芯片包含许多模块如MQTT、wifi、TLS、ZigBee、BT/BLE、Ethernet等，在进行这些模块的测试脚本的开发的时候，不仅要熟悉脚本开发的shell语言，还要对这些协议也有一定的学习。由于我之前没有接触过Linux，所以对于shell脚本的编写知识懂一丁点儿简单的命令，后来边工作边学习，对于一些常用的Linux命令也掌握的很熟悉了。\n\n&nbsp;&nbsp;&nbsp;&nbsp;其实作自动化测试这个工作不是我期望的工作，但是来到公司里，对于公司的安排还是要服从的，毕竟也是能够学习到很多东西的。而且有很多有常年工作经验的师傅们的带领，不管是技术方面还是工作习惯与工作流程的熟悉上我也学习了不少。由于自己在学校是主要学习WEB开发的，所以一直希望自己能够在实习时得到一些这方面的工作经验，在接下来的两个月，我便被leader调到web组进行一个公司内部的项目管理系统的开发。\n\n&nbsp;&nbsp;&nbsp;&nbsp;在做第二个项目之前，我不会想到这个项目的短短一个多月比我之前所有时间加起来都学到的多。因为这个项目几乎是由我独自完成前端与后台代码的编写，而且使用的是我之前没有任何经验的PHP语言进行开发。领导要求一个月内完成整个项目的开发，所以压力非常大。我一边在工作中学习，工作，一边再回到寝室后仍查资料学习希望能够把这个项目做到最好。前端方面我更加熟悉了jquery和bootstrap框架以及html/css，后端方面我又掌握了新的技能–PHP。从数据库的设计到前端页面的设计，再到后台业务代码的编写，投入了自己非常大的精力。不管最后结果如何，这个项目经历的确使我对于web开发的相关技术知识增长不少。在经历了一个多月的边学边做，最后总算（不是很完美的）完成了这项工作。\n\n&nbsp;&nbsp;&nbsp;&nbsp;9月，由于学校开学以及准备毕业找工作（想找Java开发的岗位），便不能继续在公司继续实习，对于这里很不舍，因为这儿是一个工作气氛非常舒服愉快的地方。在这里我遇到了很多和我一起在这里实习的小伙伴，也结识了很多已经毕业很多年工作近十年的朋友，我相信这些人和事在未来的日子里都是我最宝贵的财富，而这次的实习经历也希望将会是我走上成功的路上的一块踏板。希望自己的努力能够对得起自己的理想！\n","source":"_posts/一个菜鸟在三星实习的感受.md","raw":"---\ntitle: 一个菜鸟在三星实习的那点儿感受\ndate: 2016-09-11 20:20:45\ncategories: [程序人生]\ntags: [程序人生,实习,三星,shell自动化测试]\n---\n&nbsp;&nbsp;&nbsp;&nbsp;2016年暑假，在大学这片沃土上的第三个学期就这样结束了，回想大学这三年，为了自己的未来迷茫过，也为自己努力过，也为了不少事情烦恼过，不知道将来自己可以在什么地方过着怎样的生活。曾经以为自己将会平凡地与大部分人一样，每天上着不知老师所云的课程，浑浑噩噩地度过这大学四年的生活，然后找一个普普通通的工作，但是也算自己运气好吧，在大一第二学期遇到了一位让自己眼前一亮的老师，慢慢学习并了解程序员这个行业，最后决定走上学习Java开发的道路。\n\n&nbsp;&nbsp;&nbsp;&nbsp;很早就听说，在大三暑假如果能够找到一个好的专业对口的暑期实习的话，那么在大学毕业以后找工作就方便许多。于是在2016年3月，我便一边努力学习着web开发的相关知识，一边在网上投简历找着实习，终于在一个学长的内推下，我进入了西安三星半导体有限公司，原西安三星电子研究所。\n\n&nbsp;&nbsp;&nbsp;&nbsp;三星是一个气氛非常好的公司，直到现在我都觉得能够进入这个公司是我大学期间的很幸运的一件事。在这儿我遇到了对我很好的师傅们，和那些谦逊和善的同事们。\n\n&nbsp;&nbsp;&nbsp;&nbsp;一开始进入公司，我被派的任务是进行artik芯片的测试执行，输出测试执行报告并且开发相应的shell脚本进行自动化测试。因为之前没有过Linux开发经验，所以对于这项工作还是有很多畏惧，怕自己不能完成相应的任务。后来进过一个礼拜的熟悉以后，对于自动化测试的脚本开发和测试执行更加得心应手起来。Artik芯片包含许多模块如MQTT、wifi、TLS、ZigBee、BT/BLE、Ethernet等，在进行这些模块的测试脚本的开发的时候，不仅要熟悉脚本开发的shell语言，还要对这些协议也有一定的学习。由于我之前没有接触过Linux，所以对于shell脚本的编写知识懂一丁点儿简单的命令，后来边工作边学习，对于一些常用的Linux命令也掌握的很熟悉了。\n\n&nbsp;&nbsp;&nbsp;&nbsp;其实作自动化测试这个工作不是我期望的工作，但是来到公司里，对于公司的安排还是要服从的，毕竟也是能够学习到很多东西的。而且有很多有常年工作经验的师傅们的带领，不管是技术方面还是工作习惯与工作流程的熟悉上我也学习了不少。由于自己在学校是主要学习WEB开发的，所以一直希望自己能够在实习时得到一些这方面的工作经验，在接下来的两个月，我便被leader调到web组进行一个公司内部的项目管理系统的开发。\n\n&nbsp;&nbsp;&nbsp;&nbsp;在做第二个项目之前，我不会想到这个项目的短短一个多月比我之前所有时间加起来都学到的多。因为这个项目几乎是由我独自完成前端与后台代码的编写，而且使用的是我之前没有任何经验的PHP语言进行开发。领导要求一个月内完成整个项目的开发，所以压力非常大。我一边在工作中学习，工作，一边再回到寝室后仍查资料学习希望能够把这个项目做到最好。前端方面我更加熟悉了jquery和bootstrap框架以及html/css，后端方面我又掌握了新的技能–PHP。从数据库的设计到前端页面的设计，再到后台业务代码的编写，投入了自己非常大的精力。不管最后结果如何，这个项目经历的确使我对于web开发的相关技术知识增长不少。在经历了一个多月的边学边做，最后总算（不是很完美的）完成了这项工作。\n\n&nbsp;&nbsp;&nbsp;&nbsp;9月，由于学校开学以及准备毕业找工作（想找Java开发的岗位），便不能继续在公司继续实习，对于这里很不舍，因为这儿是一个工作气氛非常舒服愉快的地方。在这里我遇到了很多和我一起在这里实习的小伙伴，也结识了很多已经毕业很多年工作近十年的朋友，我相信这些人和事在未来的日子里都是我最宝贵的财富，而这次的实习经历也希望将会是我走上成功的路上的一块踏板。希望自己的努力能够对得起自己的理想！\n","slug":"一个菜鸟在三星实习的感受","published":1,"updated":"2019-04-05T04:46:27.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zphu000ulcuh23o2svac","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;2016年暑假，在大学这片沃土上的第三个学期就这样结束了，回想大学这三年，为了自己的未来迷茫过，也为自己努力过，也为了不少事情烦恼过，不知道将来自己可以在什么地方过着怎样的生活。曾经以为自己将会平凡地与大部分人一样，每天上着不知老师所云的课程，浑浑噩噩地度过这大学四年的生活，然后找一个普普通通的工作，但是也算自己运气好吧，在大一第二学期遇到了一位让自己眼前一亮的老师，慢慢学习并了解程序员这个行业，最后决定走上学习Java开发的道路。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;很早就听说，在大三暑假如果能够找到一个好的专业对口的暑期实习的话，那么在大学毕业以后找工作就方便许多。于是在2016年3月，我便一边努力学习着web开发的相关知识，一边在网上投简历找着实习，终于在一个学长的内推下，我进入了西安三星半导体有限公司，原西安三星电子研究所。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;三星是一个气氛非常好的公司，直到现在我都觉得能够进入这个公司是我大学期间的很幸运的一件事。在这儿我遇到了对我很好的师傅们，和那些谦逊和善的同事们。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;一开始进入公司，我被派的任务是进行artik芯片的测试执行，输出测试执行报告并且开发相应的shell脚本进行自动化测试。因为之前没有过Linux开发经验，所以对于这项工作还是有很多畏惧，怕自己不能完成相应的任务。后来进过一个礼拜的熟悉以后，对于自动化测试的脚本开发和测试执行更加得心应手起来。Artik芯片包含许多模块如MQTT、wifi、TLS、ZigBee、BT/BLE、Ethernet等，在进行这些模块的测试脚本的开发的时候，不仅要熟悉脚本开发的shell语言，还要对这些协议也有一定的学习。由于我之前没有接触过Linux，所以对于shell脚本的编写知识懂一丁点儿简单的命令，后来边工作边学习，对于一些常用的Linux命令也掌握的很熟悉了。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;其实作自动化测试这个工作不是我期望的工作，但是来到公司里，对于公司的安排还是要服从的，毕竟也是能够学习到很多东西的。而且有很多有常年工作经验的师傅们的带领，不管是技术方面还是工作习惯与工作流程的熟悉上我也学习了不少。由于自己在学校是主要学习WEB开发的，所以一直希望自己能够在实习时得到一些这方面的工作经验，在接下来的两个月，我便被leader调到web组进行一个公司内部的项目管理系统的开发。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;在做第二个项目之前，我不会想到这个项目的短短一个多月比我之前所有时间加起来都学到的多。因为这个项目几乎是由我独自完成前端与后台代码的编写，而且使用的是我之前没有任何经验的PHP语言进行开发。领导要求一个月内完成整个项目的开发，所以压力非常大。我一边在工作中学习，工作，一边再回到寝室后仍查资料学习希望能够把这个项目做到最好。前端方面我更加熟悉了jquery和bootstrap框架以及html/css，后端方面我又掌握了新的技能–PHP。从数据库的设计到前端页面的设计，再到后台业务代码的编写，投入了自己非常大的精力。不管最后结果如何，这个项目经历的确使我对于web开发的相关技术知识增长不少。在经历了一个多月的边学边做，最后总算（不是很完美的）完成了这项工作。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;9月，由于学校开学以及准备毕业找工作（想找Java开发的岗位），便不能继续在公司继续实习，对于这里很不舍，因为这儿是一个工作气氛非常舒服愉快的地方。在这里我遇到了很多和我一起在这里实习的小伙伴，也结识了很多已经毕业很多年工作近十年的朋友，我相信这些人和事在未来的日子里都是我最宝贵的财富，而这次的实习经历也希望将会是我走上成功的路上的一块踏板。希望自己的努力能够对得起自己的理想！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;2016年暑假，在大学这片沃土上的第三个学期就这样结束了，回想大学这三年，为了自己的未来迷茫过，也为自己努力过，也为了不少事情烦恼过，不知道将来自己可以在什么地方过着怎样的生活。曾经以为自己将会平凡地与大部分人一样，每天上着不知老师所云的课程，浑浑噩噩地度过这大学四年的生活，然后找一个普普通通的工作，但是也算自己运气好吧，在大一第二学期遇到了一位让自己眼前一亮的老师，慢慢学习并了解程序员这个行业，最后决定走上学习Java开发的道路。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;很早就听说，在大三暑假如果能够找到一个好的专业对口的暑期实习的话，那么在大学毕业以后找工作就方便许多。于是在2016年3月，我便一边努力学习着web开发的相关知识，一边在网上投简历找着实习，终于在一个学长的内推下，我进入了西安三星半导体有限公司，原西安三星电子研究所。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;三星是一个气氛非常好的公司，直到现在我都觉得能够进入这个公司是我大学期间的很幸运的一件事。在这儿我遇到了对我很好的师傅们，和那些谦逊和善的同事们。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;一开始进入公司，我被派的任务是进行artik芯片的测试执行，输出测试执行报告并且开发相应的shell脚本进行自动化测试。因为之前没有过Linux开发经验，所以对于这项工作还是有很多畏惧，怕自己不能完成相应的任务。后来进过一个礼拜的熟悉以后，对于自动化测试的脚本开发和测试执行更加得心应手起来。Artik芯片包含许多模块如MQTT、wifi、TLS、ZigBee、BT/BLE、Ethernet等，在进行这些模块的测试脚本的开发的时候，不仅要熟悉脚本开发的shell语言，还要对这些协议也有一定的学习。由于我之前没有接触过Linux，所以对于shell脚本的编写知识懂一丁点儿简单的命令，后来边工作边学习，对于一些常用的Linux命令也掌握的很熟悉了。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;其实作自动化测试这个工作不是我期望的工作，但是来到公司里，对于公司的安排还是要服从的，毕竟也是能够学习到很多东西的。而且有很多有常年工作经验的师傅们的带领，不管是技术方面还是工作习惯与工作流程的熟悉上我也学习了不少。由于自己在学校是主要学习WEB开发的，所以一直希望自己能够在实习时得到一些这方面的工作经验，在接下来的两个月，我便被leader调到web组进行一个公司内部的项目管理系统的开发。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;在做第二个项目之前，我不会想到这个项目的短短一个多月比我之前所有时间加起来都学到的多。因为这个项目几乎是由我独自完成前端与后台代码的编写，而且使用的是我之前没有任何经验的PHP语言进行开发。领导要求一个月内完成整个项目的开发，所以压力非常大。我一边在工作中学习，工作，一边再回到寝室后仍查资料学习希望能够把这个项目做到最好。前端方面我更加熟悉了jquery和bootstrap框架以及html/css，后端方面我又掌握了新的技能–PHP。从数据库的设计到前端页面的设计，再到后台业务代码的编写，投入了自己非常大的精力。不管最后结果如何，这个项目经历的确使我对于web开发的相关技术知识增长不少。在经历了一个多月的边学边做，最后总算（不是很完美的）完成了这项工作。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;9月，由于学校开学以及准备毕业找工作（想找Java开发的岗位），便不能继续在公司继续实习，对于这里很不舍，因为这儿是一个工作气氛非常舒服愉快的地方。在这里我遇到了很多和我一起在这里实习的小伙伴，也结识了很多已经毕业很多年工作近十年的朋友，我相信这些人和事在未来的日子里都是我最宝贵的财富，而这次的实习经历也希望将会是我走上成功的路上的一块踏板。希望自己的努力能够对得起自己的理想！</p>\n"},{"title":"使用springboot进行国际化时自定义读取数据库配置","date":"2019-03-20T11:27:02.000Z","_content":"## 前言\nspringboot默认就支持国际化的，而且不需要你过多的做什么配置，只需要在`resources/`下创建国际化配置文件即可，注意名称必须以messages开始。 messages.properties （默认的语言配置文件，当找不到其他语言的配置的时候，使用该文件进行展示）。 具体的关于springboot的国际化配置我这边就不再过多介绍(包括Locale的设置以及如何根据区域设置语言等)，关于页面上得使用可以参考：[springboot国际化](!https://www.baidu.com/s?word=springboot+%E5%9B%BD%E9%99%85%E5%8C%96)。在这篇博客中，我要介绍的是一个很有用的功能并且绝大部分人也会用得到，就是\n<strong><font color=#0099ff size=5 face=\"黑体\">不使用配置文件`messages.properties`储存国际化语言，而使用数据库进行动态配置，做到无需重启更改配置。</font></strong>\n<!-- more -->\n## 如何使用\n#### MessageSource介绍\nSpring提供了一个接口MessageSource用于获取国际化信息，ReloadableResourceBundleMessageSource和ResourceBundleMessageSource都是继承了该接口的一个抽象实现类AbstractMessageSource，在spring官网有一段这样介绍messageSource的话：\n![spring官网对于messageSource的介绍](https://img-blog.csdn.net/20180116154941287?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDcyMTEzMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast \"spring官网对于messageSource的介绍\")\n图中红框画起来的意思就是，上下文加载的时候会查询messageSource的bean，如果没有就会创建一个名为`messageSource`放在上下文中... ...等等。\n#### 在springboot中注入自定义messageSource\n通过上面的介绍，我们就可以自己定义自己的messageSource进行配置的读取了。\n ** 我这边是把这个放在了业务层，大家用的时候也可以直接放在控制层(一般都放在控制层，要用到)，使用@Compnent(\"messageSource\")注解声明下bean名称即可 **\n ```\n // MyMessageSourceService是我自己的接口 你也可以不需要。使用@Compnent(\"messageSource\")注解就行\n @Service(\"messageSource\")\n public class MyMessageSource extends AbstractMessageSource implements ResourceLoaderAware, MyMessageSourceService {\n\n     ResourceLoader resourceLoader;\n\n     // 这个是用来缓存数据库中获取到的配置的 数据库配置更改的时候可以调用reload方法重新加载\n     // 当然 实际使用者也可以不使用这种缓存的方式\n     private static final Map<String, Map<String, String>> LOCAL_CACHE = new ConcurrentHashMap<>(256);\n\n     @Autowired\n     SysI18nService sysI18nService;\n\n     private final Logger logger = LoggerFactory.getLogger(MyMessageSource.class);\n\n     /**\n      * 初始化\n      */\n     @PostConstruct\n     public void init() {\n         this.reload();\n     }\n\n     /**\n      * 重新将数据库中的国际化配置加载\n      */\n     public void reload() {\n         LOCAL_CACHE.clear();\n         LOCAL_CACHE.putAll(loadAllMessageResourcesFromDB());\n     }\n\n     /**\n      * 从数据库中获取所有国际化配置 这边可以根据自己数据库表结构进行相应的业务实现\n      * 对应的语言能够取出来对应的值就行了 无需一定要按照这个方法来\n      */\n     public Map<String, Map<String, String>> loadAllMessageResourcesFromDB() {\n         List<SysI18nBO> list = sysI18nService.findList(new SysI18nAO());\n         if (CollectionUtils.isNotEmpty(list)) {\n             final Map<String, String> zhCnMessageResources = new HashMap<>(list.size());\n             final Map<String, String> enUsMessageResources = new HashMap<>(list.size());\n             final Map<String, String> idIdMessageResources = new HashMap<>(list.size());\n             for (SysI18nBO bo : list) {\n                 String name = bo.getModel() + \".\" + bo.getName();\n                 String zhText = bo.getZhCn();\n                 String enText = bo.getEnUs();\n                 String idText = bo.getInId();\n                 zhCnMessageResources.put(name, zhText);\n                 enUsMessageResources.put(name, enText);\n                 idIdMessageResources.put(name, idText);\n             }\n             LOCAL_CACHE.put(\"zh\", zhCnMessageResources);\n             LOCAL_CACHE.put(\"en\", enUsMessageResources);\n             LOCAL_CACHE.put(\"in\", idIdMessageResources);\n         }\n         return MapUtils.EMPTY_MAP;\n     }\n\n     /**\n      * 从缓存中取出国际化配置对应的数据 或者从父级获取\n      *\n      * @param code\n      * @param locale\n      * @return\n      */\n     public String getSourceFromCache(String code, Locale locale) {\n         String language = locale.getLanguage();\n         Map<String, String> props = LOCAL_CACHE.get(language);\n         if (null != props && props.containsKey(code)) {\n             return props.get(code);\n         } else {\n             try {\n                 if (null != this.getParentMessageSource()) {\n                     return this.getParentMessageSource().getMessage(code, null, locale);\n                 }\n             } catch (Exception ex) {\n                 logger.error(ex.getMessage(), ex);\n             }\n             return code;\n         }\n     }\n\n     // 下面三个重写的方法是比较重要的\n     @Override\n     public void setResourceLoader(ResourceLoader resourceLoader) {\n         this.resourceLoader = (resourceLoader == null ? new DefaultResourceLoader() : resourceLoader);\n     }\n\n     @Override\n     protected MessageFormat resolveCode(String code, Locale locale) {\n         String msg = getSourceFromCache(code, locale);\n         MessageFormat messageFormat = new MessageFormat(msg, locale);\n         return messageFormat;\n     }\n\n     @Override\n     protected String resolveCodeWithoutArguments(String code, Locale locale) {\n         return getSourceFromCache(code, locale);\n     }\n }\n ```\n#### 最后\n 至此，自定义国际化配置读取数据库已经完成，只需要在更新数据库配置的时候调用一下reload重置一下缓存中的信息即可。\n > [参考博客：spring xml配置自定义读取数据库的messageSource](!https://blog.csdn.net/u014721131/article/details/79075802)\n","source":"_posts/使用springboot进行国际化时自定义读取数据库配置.md","raw":"---\ntitle: 使用springboot进行国际化时自定义读取数据库配置\ndate: 2019-03-20 19:27:02\ncategories: [国际化]\ntags: [springboot,国际化]\n---\n## 前言\nspringboot默认就支持国际化的，而且不需要你过多的做什么配置，只需要在`resources/`下创建国际化配置文件即可，注意名称必须以messages开始。 messages.properties （默认的语言配置文件，当找不到其他语言的配置的时候，使用该文件进行展示）。 具体的关于springboot的国际化配置我这边就不再过多介绍(包括Locale的设置以及如何根据区域设置语言等)，关于页面上得使用可以参考：[springboot国际化](!https://www.baidu.com/s?word=springboot+%E5%9B%BD%E9%99%85%E5%8C%96)。在这篇博客中，我要介绍的是一个很有用的功能并且绝大部分人也会用得到，就是\n<strong><font color=#0099ff size=5 face=\"黑体\">不使用配置文件`messages.properties`储存国际化语言，而使用数据库进行动态配置，做到无需重启更改配置。</font></strong>\n<!-- more -->\n## 如何使用\n#### MessageSource介绍\nSpring提供了一个接口MessageSource用于获取国际化信息，ReloadableResourceBundleMessageSource和ResourceBundleMessageSource都是继承了该接口的一个抽象实现类AbstractMessageSource，在spring官网有一段这样介绍messageSource的话：\n![spring官网对于messageSource的介绍](https://img-blog.csdn.net/20180116154941287?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDcyMTEzMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast \"spring官网对于messageSource的介绍\")\n图中红框画起来的意思就是，上下文加载的时候会查询messageSource的bean，如果没有就会创建一个名为`messageSource`放在上下文中... ...等等。\n#### 在springboot中注入自定义messageSource\n通过上面的介绍，我们就可以自己定义自己的messageSource进行配置的读取了。\n ** 我这边是把这个放在了业务层，大家用的时候也可以直接放在控制层(一般都放在控制层，要用到)，使用@Compnent(\"messageSource\")注解声明下bean名称即可 **\n ```\n // MyMessageSourceService是我自己的接口 你也可以不需要。使用@Compnent(\"messageSource\")注解就行\n @Service(\"messageSource\")\n public class MyMessageSource extends AbstractMessageSource implements ResourceLoaderAware, MyMessageSourceService {\n\n     ResourceLoader resourceLoader;\n\n     // 这个是用来缓存数据库中获取到的配置的 数据库配置更改的时候可以调用reload方法重新加载\n     // 当然 实际使用者也可以不使用这种缓存的方式\n     private static final Map<String, Map<String, String>> LOCAL_CACHE = new ConcurrentHashMap<>(256);\n\n     @Autowired\n     SysI18nService sysI18nService;\n\n     private final Logger logger = LoggerFactory.getLogger(MyMessageSource.class);\n\n     /**\n      * 初始化\n      */\n     @PostConstruct\n     public void init() {\n         this.reload();\n     }\n\n     /**\n      * 重新将数据库中的国际化配置加载\n      */\n     public void reload() {\n         LOCAL_CACHE.clear();\n         LOCAL_CACHE.putAll(loadAllMessageResourcesFromDB());\n     }\n\n     /**\n      * 从数据库中获取所有国际化配置 这边可以根据自己数据库表结构进行相应的业务实现\n      * 对应的语言能够取出来对应的值就行了 无需一定要按照这个方法来\n      */\n     public Map<String, Map<String, String>> loadAllMessageResourcesFromDB() {\n         List<SysI18nBO> list = sysI18nService.findList(new SysI18nAO());\n         if (CollectionUtils.isNotEmpty(list)) {\n             final Map<String, String> zhCnMessageResources = new HashMap<>(list.size());\n             final Map<String, String> enUsMessageResources = new HashMap<>(list.size());\n             final Map<String, String> idIdMessageResources = new HashMap<>(list.size());\n             for (SysI18nBO bo : list) {\n                 String name = bo.getModel() + \".\" + bo.getName();\n                 String zhText = bo.getZhCn();\n                 String enText = bo.getEnUs();\n                 String idText = bo.getInId();\n                 zhCnMessageResources.put(name, zhText);\n                 enUsMessageResources.put(name, enText);\n                 idIdMessageResources.put(name, idText);\n             }\n             LOCAL_CACHE.put(\"zh\", zhCnMessageResources);\n             LOCAL_CACHE.put(\"en\", enUsMessageResources);\n             LOCAL_CACHE.put(\"in\", idIdMessageResources);\n         }\n         return MapUtils.EMPTY_MAP;\n     }\n\n     /**\n      * 从缓存中取出国际化配置对应的数据 或者从父级获取\n      *\n      * @param code\n      * @param locale\n      * @return\n      */\n     public String getSourceFromCache(String code, Locale locale) {\n         String language = locale.getLanguage();\n         Map<String, String> props = LOCAL_CACHE.get(language);\n         if (null != props && props.containsKey(code)) {\n             return props.get(code);\n         } else {\n             try {\n                 if (null != this.getParentMessageSource()) {\n                     return this.getParentMessageSource().getMessage(code, null, locale);\n                 }\n             } catch (Exception ex) {\n                 logger.error(ex.getMessage(), ex);\n             }\n             return code;\n         }\n     }\n\n     // 下面三个重写的方法是比较重要的\n     @Override\n     public void setResourceLoader(ResourceLoader resourceLoader) {\n         this.resourceLoader = (resourceLoader == null ? new DefaultResourceLoader() : resourceLoader);\n     }\n\n     @Override\n     protected MessageFormat resolveCode(String code, Locale locale) {\n         String msg = getSourceFromCache(code, locale);\n         MessageFormat messageFormat = new MessageFormat(msg, locale);\n         return messageFormat;\n     }\n\n     @Override\n     protected String resolveCodeWithoutArguments(String code, Locale locale) {\n         return getSourceFromCache(code, locale);\n     }\n }\n ```\n#### 最后\n 至此，自定义国际化配置读取数据库已经完成，只需要在更新数据库配置的时候调用一下reload重置一下缓存中的信息即可。\n > [参考博客：spring xml配置自定义读取数据库的messageSource](!https://blog.csdn.net/u014721131/article/details/79075802)\n","slug":"使用springboot进行国际化时自定义读取数据库配置","published":1,"updated":"2019-04-05T04:46:27.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zphw000ylcuh8e7zat31","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>springboot默认就支持国际化的，而且不需要你过多的做什么配置，只需要在<code>resources/</code>下创建国际化配置文件即可，注意名称必须以messages开始。 messages.properties （默认的语言配置文件，当找不到其他语言的配置的时候，使用该文件进行展示）。 具体的关于springboot的国际化配置我这边就不再过多介绍(包括Locale的设置以及如何根据区域设置语言等)，关于页面上得使用可以参考：<a href=\"!https://www.baidu.com/s?word=springboot+%E5%9B%BD%E9%99%85%E5%8C%96\">springboot国际化</a>。在这篇博客中，我要介绍的是一个很有用的功能并且绝大部分人也会用得到，就是<br><strong><font color=\"#0099ff\" size=\"5\" face=\"黑体\">不使用配置文件<code>messages.properties</code>储存国际化语言，而使用数据库进行动态配置，做到无需重启更改配置。</font></strong><br><a id=\"more\"></a></p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h4 id=\"MessageSource介绍\"><a href=\"#MessageSource介绍\" class=\"headerlink\" title=\"MessageSource介绍\"></a>MessageSource介绍</h4><p>Spring提供了一个接口MessageSource用于获取国际化信息，ReloadableResourceBundleMessageSource和ResourceBundleMessageSource都是继承了该接口的一个抽象实现类AbstractMessageSource，在spring官网有一段这样介绍messageSource的话：<br><img src=\"https://img-blog.csdn.net/20180116154941287?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDcyMTEzMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"spring官网对于messageSource的介绍\" title=\"spring官网对于messageSource的介绍\"><br>图中红框画起来的意思就是，上下文加载的时候会查询messageSource的bean，如果没有就会创建一个名为<code>messageSource</code>放在上下文中… …等等。</p>\n<h4 id=\"在springboot中注入自定义messageSource\"><a href=\"#在springboot中注入自定义messageSource\" class=\"headerlink\" title=\"在springboot中注入自定义messageSource\"></a>在springboot中注入自定义messageSource</h4><p>通过上面的介绍，我们就可以自己定义自己的messageSource进行配置的读取了。<br> <strong> 我这边是把这个放在了业务层，大家用的时候也可以直接放在控制层(一般都放在控制层，要用到)，使用@Compnent(“messageSource”)注解声明下bean名称即可 </strong><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// MyMessageSourceService是我自己的接口 你也可以不需要。使用@Compnent(&quot;messageSource&quot;)注解就行</span><br><span class=\"line\">@Service(&quot;messageSource&quot;)</span><br><span class=\"line\">public class MyMessageSource extends AbstractMessageSource implements ResourceLoaderAware, MyMessageSourceService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ResourceLoader resourceLoader;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 这个是用来缓存数据库中获取到的配置的 数据库配置更改的时候可以调用reload方法重新加载</span><br><span class=\"line\">    // 当然 实际使用者也可以不使用这种缓存的方式</span><br><span class=\"line\">    private static final Map&lt;String, Map&lt;String, String&gt;&gt; LOCAL_CACHE = new ConcurrentHashMap&lt;&gt;(256);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    SysI18nService sysI18nService;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Logger logger = LoggerFactory.getLogger(MyMessageSource.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 初始化</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void init() &#123;</span><br><span class=\"line\">        this.reload();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 重新将数据库中的国际化配置加载</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void reload() &#123;</span><br><span class=\"line\">        LOCAL_CACHE.clear();</span><br><span class=\"line\">        LOCAL_CACHE.putAll(loadAllMessageResourcesFromDB());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 从数据库中获取所有国际化配置 这边可以根据自己数据库表结构进行相应的业务实现</span><br><span class=\"line\">     * 对应的语言能够取出来对应的值就行了 无需一定要按照这个方法来</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Map&lt;String, Map&lt;String, String&gt;&gt; loadAllMessageResourcesFromDB() &#123;</span><br><span class=\"line\">        List&lt;SysI18nBO&gt; list = sysI18nService.findList(new SysI18nAO());</span><br><span class=\"line\">        if (CollectionUtils.isNotEmpty(list)) &#123;</span><br><span class=\"line\">            final Map&lt;String, String&gt; zhCnMessageResources = new HashMap&lt;&gt;(list.size());</span><br><span class=\"line\">            final Map&lt;String, String&gt; enUsMessageResources = new HashMap&lt;&gt;(list.size());</span><br><span class=\"line\">            final Map&lt;String, String&gt; idIdMessageResources = new HashMap&lt;&gt;(list.size());</span><br><span class=\"line\">            for (SysI18nBO bo : list) &#123;</span><br><span class=\"line\">                String name = bo.getModel() + &quot;.&quot; + bo.getName();</span><br><span class=\"line\">                String zhText = bo.getZhCn();</span><br><span class=\"line\">                String enText = bo.getEnUs();</span><br><span class=\"line\">                String idText = bo.getInId();</span><br><span class=\"line\">                zhCnMessageResources.put(name, zhText);</span><br><span class=\"line\">                enUsMessageResources.put(name, enText);</span><br><span class=\"line\">                idIdMessageResources.put(name, idText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            LOCAL_CACHE.put(&quot;zh&quot;, zhCnMessageResources);</span><br><span class=\"line\">            LOCAL_CACHE.put(&quot;en&quot;, enUsMessageResources);</span><br><span class=\"line\">            LOCAL_CACHE.put(&quot;in&quot;, idIdMessageResources);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return MapUtils.EMPTY_MAP;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 从缓存中取出国际化配置对应的数据 或者从父级获取</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param code</span><br><span class=\"line\">     * @param locale</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String getSourceFromCache(String code, Locale locale) &#123;</span><br><span class=\"line\">        String language = locale.getLanguage();</span><br><span class=\"line\">        Map&lt;String, String&gt; props = LOCAL_CACHE.get(language);</span><br><span class=\"line\">        if (null != props &amp;&amp; props.containsKey(code)) &#123;</span><br><span class=\"line\">            return props.get(code);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (null != this.getParentMessageSource()) &#123;</span><br><span class=\"line\">                    return this.getParentMessageSource().getMessage(code, null, locale);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">                logger.error(ex.getMessage(), ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 下面三个重写的方法是比较重要的</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setResourceLoader(ResourceLoader resourceLoader) &#123;</span><br><span class=\"line\">        this.resourceLoader = (resourceLoader == null ? new DefaultResourceLoader() : resourceLoader);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected MessageFormat resolveCode(String code, Locale locale) &#123;</span><br><span class=\"line\">        String msg = getSourceFromCache(code, locale);</span><br><span class=\"line\">        MessageFormat messageFormat = new MessageFormat(msg, locale);</span><br><span class=\"line\">        return messageFormat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected String resolveCodeWithoutArguments(String code, Locale locale) &#123;</span><br><span class=\"line\">        return getSourceFromCache(code, locale);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p> 至此，自定义国际化配置读取数据库已经完成，只需要在更新数据库配置的时候调用一下reload重置一下缓存中的信息即可。</p>\n<blockquote>\n<p><a href=\"!https://blog.csdn.net/u014721131/article/details/79075802\">参考博客：spring xml配置自定义读取数据库的messageSource</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>springboot默认就支持国际化的，而且不需要你过多的做什么配置，只需要在<code>resources/</code>下创建国际化配置文件即可，注意名称必须以messages开始。 messages.properties （默认的语言配置文件，当找不到其他语言的配置的时候，使用该文件进行展示）。 具体的关于springboot的国际化配置我这边就不再过多介绍(包括Locale的设置以及如何根据区域设置语言等)，关于页面上得使用可以参考：<a href=\"!https://www.baidu.com/s?word=springboot+%E5%9B%BD%E9%99%85%E5%8C%96\">springboot国际化</a>。在这篇博客中，我要介绍的是一个很有用的功能并且绝大部分人也会用得到，就是<br><strong><font color=\"#0099ff\" size=\"5\" face=\"黑体\">不使用配置文件<code>messages.properties</code>储存国际化语言，而使用数据库进行动态配置，做到无需重启更改配置。</font></strong><br>","more":"</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h4 id=\"MessageSource介绍\"><a href=\"#MessageSource介绍\" class=\"headerlink\" title=\"MessageSource介绍\"></a>MessageSource介绍</h4><p>Spring提供了一个接口MessageSource用于获取国际化信息，ReloadableResourceBundleMessageSource和ResourceBundleMessageSource都是继承了该接口的一个抽象实现类AbstractMessageSource，在spring官网有一段这样介绍messageSource的话：<br><img src=\"https://img-blog.csdn.net/20180116154941287?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDcyMTEzMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"spring官网对于messageSource的介绍\" title=\"spring官网对于messageSource的介绍\"><br>图中红框画起来的意思就是，上下文加载的时候会查询messageSource的bean，如果没有就会创建一个名为<code>messageSource</code>放在上下文中… …等等。</p>\n<h4 id=\"在springboot中注入自定义messageSource\"><a href=\"#在springboot中注入自定义messageSource\" class=\"headerlink\" title=\"在springboot中注入自定义messageSource\"></a>在springboot中注入自定义messageSource</h4><p>通过上面的介绍，我们就可以自己定义自己的messageSource进行配置的读取了。<br> <strong> 我这边是把这个放在了业务层，大家用的时候也可以直接放在控制层(一般都放在控制层，要用到)，使用@Compnent(“messageSource”)注解声明下bean名称即可 </strong><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// MyMessageSourceService是我自己的接口 你也可以不需要。使用@Compnent(&quot;messageSource&quot;)注解就行</span><br><span class=\"line\">@Service(&quot;messageSource&quot;)</span><br><span class=\"line\">public class MyMessageSource extends AbstractMessageSource implements ResourceLoaderAware, MyMessageSourceService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ResourceLoader resourceLoader;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 这个是用来缓存数据库中获取到的配置的 数据库配置更改的时候可以调用reload方法重新加载</span><br><span class=\"line\">    // 当然 实际使用者也可以不使用这种缓存的方式</span><br><span class=\"line\">    private static final Map&lt;String, Map&lt;String, String&gt;&gt; LOCAL_CACHE = new ConcurrentHashMap&lt;&gt;(256);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    SysI18nService sysI18nService;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Logger logger = LoggerFactory.getLogger(MyMessageSource.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 初始化</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void init() &#123;</span><br><span class=\"line\">        this.reload();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 重新将数据库中的国际化配置加载</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void reload() &#123;</span><br><span class=\"line\">        LOCAL_CACHE.clear();</span><br><span class=\"line\">        LOCAL_CACHE.putAll(loadAllMessageResourcesFromDB());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 从数据库中获取所有国际化配置 这边可以根据自己数据库表结构进行相应的业务实现</span><br><span class=\"line\">     * 对应的语言能够取出来对应的值就行了 无需一定要按照这个方法来</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Map&lt;String, Map&lt;String, String&gt;&gt; loadAllMessageResourcesFromDB() &#123;</span><br><span class=\"line\">        List&lt;SysI18nBO&gt; list = sysI18nService.findList(new SysI18nAO());</span><br><span class=\"line\">        if (CollectionUtils.isNotEmpty(list)) &#123;</span><br><span class=\"line\">            final Map&lt;String, String&gt; zhCnMessageResources = new HashMap&lt;&gt;(list.size());</span><br><span class=\"line\">            final Map&lt;String, String&gt; enUsMessageResources = new HashMap&lt;&gt;(list.size());</span><br><span class=\"line\">            final Map&lt;String, String&gt; idIdMessageResources = new HashMap&lt;&gt;(list.size());</span><br><span class=\"line\">            for (SysI18nBO bo : list) &#123;</span><br><span class=\"line\">                String name = bo.getModel() + &quot;.&quot; + bo.getName();</span><br><span class=\"line\">                String zhText = bo.getZhCn();</span><br><span class=\"line\">                String enText = bo.getEnUs();</span><br><span class=\"line\">                String idText = bo.getInId();</span><br><span class=\"line\">                zhCnMessageResources.put(name, zhText);</span><br><span class=\"line\">                enUsMessageResources.put(name, enText);</span><br><span class=\"line\">                idIdMessageResources.put(name, idText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            LOCAL_CACHE.put(&quot;zh&quot;, zhCnMessageResources);</span><br><span class=\"line\">            LOCAL_CACHE.put(&quot;en&quot;, enUsMessageResources);</span><br><span class=\"line\">            LOCAL_CACHE.put(&quot;in&quot;, idIdMessageResources);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return MapUtils.EMPTY_MAP;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 从缓存中取出国际化配置对应的数据 或者从父级获取</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param code</span><br><span class=\"line\">     * @param locale</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String getSourceFromCache(String code, Locale locale) &#123;</span><br><span class=\"line\">        String language = locale.getLanguage();</span><br><span class=\"line\">        Map&lt;String, String&gt; props = LOCAL_CACHE.get(language);</span><br><span class=\"line\">        if (null != props &amp;&amp; props.containsKey(code)) &#123;</span><br><span class=\"line\">            return props.get(code);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (null != this.getParentMessageSource()) &#123;</span><br><span class=\"line\">                    return this.getParentMessageSource().getMessage(code, null, locale);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">                logger.error(ex.getMessage(), ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 下面三个重写的方法是比较重要的</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setResourceLoader(ResourceLoader resourceLoader) &#123;</span><br><span class=\"line\">        this.resourceLoader = (resourceLoader == null ? new DefaultResourceLoader() : resourceLoader);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected MessageFormat resolveCode(String code, Locale locale) &#123;</span><br><span class=\"line\">        String msg = getSourceFromCache(code, locale);</span><br><span class=\"line\">        MessageFormat messageFormat = new MessageFormat(msg, locale);</span><br><span class=\"line\">        return messageFormat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected String resolveCodeWithoutArguments(String code, Locale locale) &#123;</span><br><span class=\"line\">        return getSourceFromCache(code, locale);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p> 至此，自定义国际化配置读取数据库已经完成，只需要在更新数据库配置的时候调用一下reload重置一下缓存中的信息即可。</p>\n<blockquote>\n<p><a href=\"!https://blog.csdn.net/u014721131/article/details/79075802\">参考博客：spring xml配置自定义读取数据库的messageSource</a></p>\n</blockquote>"},{"title":"关于IDEA再从git或者svn上导入项目时不能加载字模块的问题","date":"2018-07-08T15:26:49.000Z","_content":"\n### 关于IDEA再从git或者svn上导入项目时不能加载字模块的问题\n\n> 最近入职新公司，很多东西也都算是要从头学起。在之前公司用的都是eclipse，这边要求用IDEA，其实很早就知道这是一个非常强大的编译器，但平时没有机会使用，现在有机会用这个还是挺开心的。\n\n由于公司使用gitlab，在注册好账号导入代码的时候遇到一个情况，就是直接用IDEA的git工具导入的话会出现，maven项目的子模块无法被识别以及被管理的情况。事实上eclipse也有同样的问题。现在只说下使用IDEA遇到这个情况的解决办法。\n\n<!--more-->\n\n#### 有两种解决方式。\n##### 1、手动将module添加到项目管理：\n- 打开文件选项中的项目结构（快捷键ctrl+alt+shift+s）\n[![oLFwe.png](https://s1.ax2x.com/2018/07/08/oLFwe.png)](https://simimg.com/i/oLFwe)\n- 选择 模块-加号-导入module，手动将自己需要的模块一一导入进去\n[![oLTGd.png](https://s1.ax2x.com/2018/07/08/oLTGd.png)](https://simimg.com/i/oLTGd)\n##### 2、先将项目通过命令行导入到本机，然后通过IDEA的New Project from Existing Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了\n[![oLXER.md.png](https://s1.ax2x.com/2018/07/08/oLXER.md.png)](https://simimg.com/i/oLXER)\n[![oLm7r.md.png](https://s1.ax2x.com/2018/07/08/oLm7r.md.png)](https://simimg.com/i/oLm7r)\n\n> 从eclipse转到IDEA前几天是最艰难的，因为很多习惯不是说改就能改掉的，工具的使用总得需要一个学习的时间，但是等这段时间过去，后面一定会体会到IDEA的强大。\n\n","source":"_posts/关于IDEA再从git或者svn上导入项目时不能加载字模块的问题.md","raw":"---\ntitle: 关于IDEA再从git或者svn上导入项目时不能加载字模块的问题\ndate: 2018-07-08 23:26:49\ncategories: [开发工具]\ntags: [IDEA,开发日记,git]\n---\n\n### 关于IDEA再从git或者svn上导入项目时不能加载字模块的问题\n\n> 最近入职新公司，很多东西也都算是要从头学起。在之前公司用的都是eclipse，这边要求用IDEA，其实很早就知道这是一个非常强大的编译器，但平时没有机会使用，现在有机会用这个还是挺开心的。\n\n由于公司使用gitlab，在注册好账号导入代码的时候遇到一个情况，就是直接用IDEA的git工具导入的话会出现，maven项目的子模块无法被识别以及被管理的情况。事实上eclipse也有同样的问题。现在只说下使用IDEA遇到这个情况的解决办法。\n\n<!--more-->\n\n#### 有两种解决方式。\n##### 1、手动将module添加到项目管理：\n- 打开文件选项中的项目结构（快捷键ctrl+alt+shift+s）\n[![oLFwe.png](https://s1.ax2x.com/2018/07/08/oLFwe.png)](https://simimg.com/i/oLFwe)\n- 选择 模块-加号-导入module，手动将自己需要的模块一一导入进去\n[![oLTGd.png](https://s1.ax2x.com/2018/07/08/oLTGd.png)](https://simimg.com/i/oLTGd)\n##### 2、先将项目通过命令行导入到本机，然后通过IDEA的New Project from Existing Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了\n[![oLXER.md.png](https://s1.ax2x.com/2018/07/08/oLXER.md.png)](https://simimg.com/i/oLXER)\n[![oLm7r.md.png](https://s1.ax2x.com/2018/07/08/oLm7r.md.png)](https://simimg.com/i/oLm7r)\n\n> 从eclipse转到IDEA前几天是最艰难的，因为很多习惯不是说改就能改掉的，工具的使用总得需要一个学习的时间，但是等这段时间过去，后面一定会体会到IDEA的强大。\n\n","slug":"关于IDEA再从git或者svn上导入项目时不能加载字模块的问题","published":1,"updated":"2019-04-05T04:46:27.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zphy0010lcuhnlle54eh","content":"<h3 id=\"关于IDEA再从git或者svn上导入项目时不能加载字模块的问题\"><a href=\"#关于IDEA再从git或者svn上导入项目时不能加载字模块的问题\" class=\"headerlink\" title=\"关于IDEA再从git或者svn上导入项目时不能加载字模块的问题\"></a>关于IDEA再从git或者svn上导入项目时不能加载字模块的问题</h3><blockquote>\n<p>最近入职新公司，很多东西也都算是要从头学起。在之前公司用的都是eclipse，这边要求用IDEA，其实很早就知道这是一个非常强大的编译器，但平时没有机会使用，现在有机会用这个还是挺开心的。</p>\n</blockquote>\n<p>由于公司使用gitlab，在注册好账号导入代码的时候遇到一个情况，就是直接用IDEA的git工具导入的话会出现，maven项目的子模块无法被识别以及被管理的情况。事实上eclipse也有同样的问题。现在只说下使用IDEA遇到这个情况的解决办法。</p>\n<a id=\"more\"></a>\n<h4 id=\"有两种解决方式。\"><a href=\"#有两种解决方式。\" class=\"headerlink\" title=\"有两种解决方式。\"></a>有两种解决方式。</h4><h5 id=\"1、手动将module添加到项目管理：\"><a href=\"#1、手动将module添加到项目管理：\" class=\"headerlink\" title=\"1、手动将module添加到项目管理：\"></a>1、手动将module添加到项目管理：</h5><ul>\n<li>打开文件选项中的项目结构（快捷键ctrl+alt+shift+s）<br><a href=\"https://simimg.com/i/oLFwe\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax2x.com/2018/07/08/oLFwe.png\" alt=\"oLFwe.png\"></a></li>\n<li>选择 模块-加号-导入module，手动将自己需要的模块一一导入进去<br><a href=\"https://simimg.com/i/oLTGd\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax2x.com/2018/07/08/oLTGd.png\" alt=\"oLTGd.png\"></a><h5 id=\"2、先将项目通过命令行导入到本机，然后通过IDEA的New-Project-from-Existing-Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了\"><a href=\"#2、先将项目通过命令行导入到本机，然后通过IDEA的New-Project-from-Existing-Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了\" class=\"headerlink\" title=\"2、先将项目通过命令行导入到本机，然后通过IDEA的New Project from Existing Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了\"></a>2、先将项目通过命令行导入到本机，然后通过IDEA的New Project from Existing Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了</h5><a href=\"https://simimg.com/i/oLXER\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax2x.com/2018/07/08/oLXER.md.png\" alt=\"oLXER.md.png\"></a><br><a href=\"https://simimg.com/i/oLm7r\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax2x.com/2018/07/08/oLm7r.md.png\" alt=\"oLm7r.md.png\"></a></li>\n</ul>\n<blockquote>\n<p>从eclipse转到IDEA前几天是最艰难的，因为很多习惯不是说改就能改掉的，工具的使用总得需要一个学习的时间，但是等这段时间过去，后面一定会体会到IDEA的强大。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"关于IDEA再从git或者svn上导入项目时不能加载字模块的问题\"><a href=\"#关于IDEA再从git或者svn上导入项目时不能加载字模块的问题\" class=\"headerlink\" title=\"关于IDEA再从git或者svn上导入项目时不能加载字模块的问题\"></a>关于IDEA再从git或者svn上导入项目时不能加载字模块的问题</h3><blockquote>\n<p>最近入职新公司，很多东西也都算是要从头学起。在之前公司用的都是eclipse，这边要求用IDEA，其实很早就知道这是一个非常强大的编译器，但平时没有机会使用，现在有机会用这个还是挺开心的。</p>\n</blockquote>\n<p>由于公司使用gitlab，在注册好账号导入代码的时候遇到一个情况，就是直接用IDEA的git工具导入的话会出现，maven项目的子模块无法被识别以及被管理的情况。事实上eclipse也有同样的问题。现在只说下使用IDEA遇到这个情况的解决办法。</p>","more":"<h4 id=\"有两种解决方式。\"><a href=\"#有两种解决方式。\" class=\"headerlink\" title=\"有两种解决方式。\"></a>有两种解决方式。</h4><h5 id=\"1、手动将module添加到项目管理：\"><a href=\"#1、手动将module添加到项目管理：\" class=\"headerlink\" title=\"1、手动将module添加到项目管理：\"></a>1、手动将module添加到项目管理：</h5><ul>\n<li>打开文件选项中的项目结构（快捷键ctrl+alt+shift+s）<br><a href=\"https://simimg.com/i/oLFwe\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax2x.com/2018/07/08/oLFwe.png\" alt=\"oLFwe.png\"></a></li>\n<li>选择 模块-加号-导入module，手动将自己需要的模块一一导入进去<br><a href=\"https://simimg.com/i/oLTGd\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax2x.com/2018/07/08/oLTGd.png\" alt=\"oLTGd.png\"></a><h5 id=\"2、先将项目通过命令行导入到本机，然后通过IDEA的New-Project-from-Existing-Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了\"><a href=\"#2、先将项目通过命令行导入到本机，然后通过IDEA的New-Project-from-Existing-Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了\" class=\"headerlink\" title=\"2、先将项目通过命令行导入到本机，然后通过IDEA的New Project from Existing Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了\"></a>2、先将项目通过命令行导入到本机，然后通过IDEA的New Project from Existing Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了</h5><a href=\"https://simimg.com/i/oLXER\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax2x.com/2018/07/08/oLXER.md.png\" alt=\"oLXER.md.png\"></a><br><a href=\"https://simimg.com/i/oLm7r\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax2x.com/2018/07/08/oLm7r.md.png\" alt=\"oLm7r.md.png\"></a></li>\n</ul>\n<blockquote>\n<p>从eclipse转到IDEA前几天是最艰难的，因为很多习惯不是说改就能改掉的，工具的使用总得需要一个学习的时间，但是等这段时间过去，后面一定会体会到IDEA的强大。</p>\n</blockquote>"},{"title":"dubbo获取注册中心的实例bean","date":"2018-07-18T18:07:56.000Z","_content":"\n## 开发日记 20180718\n### com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large\n\n```\ncom.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large: 11557050, max payload: 8388608 java.io.IOException: Data length too large: 11557050, max payload: 838860\n```\n\n在使用dubbo框架开发的时候，需要做一个导出csv文件的功能，查询大量的数据然后在提供者这边进行处理导出，其中数据达到过20万行以上，几十M的数据，抛出了这样一个异常。遇到服务提供者从数据库查询或者其他地方返回过大的对象，导致报错时，尽管有办法取消这个数据长度的限制，但是这并不符合程序开发的初衷。我们需要将对于数据的处理放在业务层，我在这里做了异步导出，给前端返回的仅仅是一个程序完成的状态，完美的解决了这个问题。\n\n<!-- more -->\n\n### 在dubbo消费者服务中写aop方法拦截工具类中的方法\n\n尽管服务的提供者和消费者都引入的工具类模块的依赖，但是拦截器的实际拦截的还是那个实际本身所在模块的方法。如果工具类是在消费者service层被使用的，那么在上层模块的拦截器是无法拦截到这个方法的。\n\n### 在dubbo服务中手动获取注册的提供者的bean\n\n在这里犯的错：以为通过SpringContextHolder.getBean()可以获取，是我傻逼了，dubbo中的服务怎么能用spring上下文获取呢。这里我使用dubbo的方式完成了这个功能。\n```\n    /**\n     * 获取服务的代理对象\n     *\n     * @return\n     */\n    public static <T> T getReferenceConfig(String appName,String address,Class<?> interfaceClass) {\n        String key  = interfaceClass.getName();\n        ReferenceConfig<T> referenceConfig =  (ReferenceConfig<T>)referenceCache.get(key);\n        if(referenceConfig == null){\n            referenceConfig = new ReferenceConfig<T>();\n\n            referenceConfig.setApplication(application);\n            referenceConfig.setRegistry(getRegistryConfig(appName,address));\n            referenceConfig.setInterface(interfaceClass);\n\n            referenceCache.put(key,referenceConfig);\n        }\n\n        return referenceConfig.get();\n    }\n```\n\n","source":"_posts/开发日记-20180718.md","raw":"---\ntitle: dubbo获取注册中心的实例bean\ndate: 2018-07-19 02:07:56\ncategories: [Java基础]\ntags: [dubbo,开发日记]\n---\n\n## 开发日记 20180718\n### com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large\n\n```\ncom.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large: 11557050, max payload: 8388608 java.io.IOException: Data length too large: 11557050, max payload: 838860\n```\n\n在使用dubbo框架开发的时候，需要做一个导出csv文件的功能，查询大量的数据然后在提供者这边进行处理导出，其中数据达到过20万行以上，几十M的数据，抛出了这样一个异常。遇到服务提供者从数据库查询或者其他地方返回过大的对象，导致报错时，尽管有办法取消这个数据长度的限制，但是这并不符合程序开发的初衷。我们需要将对于数据的处理放在业务层，我在这里做了异步导出，给前端返回的仅仅是一个程序完成的状态，完美的解决了这个问题。\n\n<!-- more -->\n\n### 在dubbo消费者服务中写aop方法拦截工具类中的方法\n\n尽管服务的提供者和消费者都引入的工具类模块的依赖，但是拦截器的实际拦截的还是那个实际本身所在模块的方法。如果工具类是在消费者service层被使用的，那么在上层模块的拦截器是无法拦截到这个方法的。\n\n### 在dubbo服务中手动获取注册的提供者的bean\n\n在这里犯的错：以为通过SpringContextHolder.getBean()可以获取，是我傻逼了，dubbo中的服务怎么能用spring上下文获取呢。这里我使用dubbo的方式完成了这个功能。\n```\n    /**\n     * 获取服务的代理对象\n     *\n     * @return\n     */\n    public static <T> T getReferenceConfig(String appName,String address,Class<?> interfaceClass) {\n        String key  = interfaceClass.getName();\n        ReferenceConfig<T> referenceConfig =  (ReferenceConfig<T>)referenceCache.get(key);\n        if(referenceConfig == null){\n            referenceConfig = new ReferenceConfig<T>();\n\n            referenceConfig.setApplication(application);\n            referenceConfig.setRegistry(getRegistryConfig(appName,address));\n            referenceConfig.setInterface(interfaceClass);\n\n            referenceCache.put(key,referenceConfig);\n        }\n\n        return referenceConfig.get();\n    }\n```\n\n","slug":"开发日记-20180718","published":1,"updated":"2019-04-05T04:46:27.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zpi00015lcuh90i1p8jc","content":"<h2 id=\"开发日记-20180718\"><a href=\"#开发日记-20180718\" class=\"headerlink\" title=\"开发日记 20180718\"></a>开发日记 20180718</h2><h3 id=\"com-alibaba-dubbo-remoting-transport-AbstractCodec-checkPayload-ERROR-Data-length-too-large\"><a href=\"#com-alibaba-dubbo-remoting-transport-AbstractCodec-checkPayload-ERROR-Data-length-too-large\" class=\"headerlink\" title=\"com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large\"></a>com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large: 11557050, max payload: 8388608 java.io.IOException: Data length too large: 11557050, max payload: 838860</span><br></pre></td></tr></table></figure>\n<p>在使用dubbo框架开发的时候，需要做一个导出csv文件的功能，查询大量的数据然后在提供者这边进行处理导出，其中数据达到过20万行以上，几十M的数据，抛出了这样一个异常。遇到服务提供者从数据库查询或者其他地方返回过大的对象，导致报错时，尽管有办法取消这个数据长度的限制，但是这并不符合程序开发的初衷。我们需要将对于数据的处理放在业务层，我在这里做了异步导出，给前端返回的仅仅是一个程序完成的状态，完美的解决了这个问题。</p>\n<a id=\"more\"></a>\n<h3 id=\"在dubbo消费者服务中写aop方法拦截工具类中的方法\"><a href=\"#在dubbo消费者服务中写aop方法拦截工具类中的方法\" class=\"headerlink\" title=\"在dubbo消费者服务中写aop方法拦截工具类中的方法\"></a>在dubbo消费者服务中写aop方法拦截工具类中的方法</h3><p>尽管服务的提供者和消费者都引入的工具类模块的依赖，但是拦截器的实际拦截的还是那个实际本身所在模块的方法。如果工具类是在消费者service层被使用的，那么在上层模块的拦截器是无法拦截到这个方法的。</p>\n<h3 id=\"在dubbo服务中手动获取注册的提供者的bean\"><a href=\"#在dubbo服务中手动获取注册的提供者的bean\" class=\"headerlink\" title=\"在dubbo服务中手动获取注册的提供者的bean\"></a>在dubbo服务中手动获取注册的提供者的bean</h3><p>在这里犯的错：以为通过SpringContextHolder.getBean()可以获取，是我傻逼了，dubbo中的服务怎么能用spring上下文获取呢。这里我使用dubbo的方式完成了这个功能。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 获取服务的代理对象</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static &lt;T&gt; T getReferenceConfig(String appName,String address,Class&lt;?&gt; interfaceClass) &#123;</span><br><span class=\"line\">    String key  = interfaceClass.getName();</span><br><span class=\"line\">    ReferenceConfig&lt;T&gt; referenceConfig =  (ReferenceConfig&lt;T&gt;)referenceCache.get(key);</span><br><span class=\"line\">    if(referenceConfig == null)&#123;</span><br><span class=\"line\">        referenceConfig = new ReferenceConfig&lt;T&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        referenceConfig.setApplication(application);</span><br><span class=\"line\">        referenceConfig.setRegistry(getRegistryConfig(appName,address));</span><br><span class=\"line\">        referenceConfig.setInterface(interfaceClass);</span><br><span class=\"line\"></span><br><span class=\"line\">        referenceCache.put(key,referenceConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return referenceConfig.get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"开发日记-20180718\"><a href=\"#开发日记-20180718\" class=\"headerlink\" title=\"开发日记 20180718\"></a>开发日记 20180718</h2><h3 id=\"com-alibaba-dubbo-remoting-transport-AbstractCodec-checkPayload-ERROR-Data-length-too-large\"><a href=\"#com-alibaba-dubbo-remoting-transport-AbstractCodec-checkPayload-ERROR-Data-length-too-large\" class=\"headerlink\" title=\"com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large\"></a>com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large: 11557050, max payload: 8388608 java.io.IOException: Data length too large: 11557050, max payload: 838860</span><br></pre></td></tr></table></figure>\n<p>在使用dubbo框架开发的时候，需要做一个导出csv文件的功能，查询大量的数据然后在提供者这边进行处理导出，其中数据达到过20万行以上，几十M的数据，抛出了这样一个异常。遇到服务提供者从数据库查询或者其他地方返回过大的对象，导致报错时，尽管有办法取消这个数据长度的限制，但是这并不符合程序开发的初衷。我们需要将对于数据的处理放在业务层，我在这里做了异步导出，给前端返回的仅仅是一个程序完成的状态，完美的解决了这个问题。</p>","more":"<h3 id=\"在dubbo消费者服务中写aop方法拦截工具类中的方法\"><a href=\"#在dubbo消费者服务中写aop方法拦截工具类中的方法\" class=\"headerlink\" title=\"在dubbo消费者服务中写aop方法拦截工具类中的方法\"></a>在dubbo消费者服务中写aop方法拦截工具类中的方法</h3><p>尽管服务的提供者和消费者都引入的工具类模块的依赖，但是拦截器的实际拦截的还是那个实际本身所在模块的方法。如果工具类是在消费者service层被使用的，那么在上层模块的拦截器是无法拦截到这个方法的。</p>\n<h3 id=\"在dubbo服务中手动获取注册的提供者的bean\"><a href=\"#在dubbo服务中手动获取注册的提供者的bean\" class=\"headerlink\" title=\"在dubbo服务中手动获取注册的提供者的bean\"></a>在dubbo服务中手动获取注册的提供者的bean</h3><p>在这里犯的错：以为通过SpringContextHolder.getBean()可以获取，是我傻逼了，dubbo中的服务怎么能用spring上下文获取呢。这里我使用dubbo的方式完成了这个功能。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 获取服务的代理对象</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static &lt;T&gt; T getReferenceConfig(String appName,String address,Class&lt;?&gt; interfaceClass) &#123;</span><br><span class=\"line\">    String key  = interfaceClass.getName();</span><br><span class=\"line\">    ReferenceConfig&lt;T&gt; referenceConfig =  (ReferenceConfig&lt;T&gt;)referenceCache.get(key);</span><br><span class=\"line\">    if(referenceConfig == null)&#123;</span><br><span class=\"line\">        referenceConfig = new ReferenceConfig&lt;T&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        referenceConfig.setApplication(application);</span><br><span class=\"line\">        referenceConfig.setRegistry(getRegistryConfig(appName,address));</span><br><span class=\"line\">        referenceConfig.setInterface(interfaceClass);</span><br><span class=\"line\"></span><br><span class=\"line\">        referenceCache.put(key,referenceConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return referenceConfig.get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"关于git pull 拉取不到最新记录","date":"2018-05-31T03:39:17.000Z","_content":"//\n//~~~~~~~~~~~~~~~~~~~~~~~_oo0oo_\n//~~~~~~~~~~~~~~~~~~~~~~o8888888o\n//~~~~~~~~~~~~~~~~~~~~~~88\"~.~\"88\n//~~~~~~~~~~~~~~~~~~~~~~(|~-_-~|)\n//~~~~~~~~~~~~~~~~~~~~~~0\\~~=~~/0\n//~~~~~~~~~~~~~~~~~~~~___/`---'\\___\n//~~~~~~~~~~~~~~~~~~.'~\\\\|~~~~~|//~'.\n//~~~~~~~~~~~~~~~~~/~\\\\|||~~:~~|||//~\\\n//~~~~~~~~~~~~~~~~/~_|||||~-:-~|||||-~\\\n//~~~~~~~~~~~~~~~|~~~|~\\\\\\~~-~~///~|~~~|\n//~~~~~~~~~~~~~~~|~\\_|~~''\\---/''~~|_/~|\n//~~~~~~~~~~~~~~~\\~~.-\\__~~'-'~~___/-.~/\n//~~~~~~~~~~~~~___'.~.'~~/--.--\\~~`.~.'___\n//~~~~~~~~~~.\"\"~'<~~`.___\\_<|>_/___.'~>'~\"\".\n//~~~~~~~~~|~|~:~~`-~\\`.;`\\~_~/`;.`/~-~`~:~|~|\n//~~~~~~~~~\\~~\\~`_.~~~\\_~__\\~/__~_/~~~.-`~/~~/\n//~~~~~=====`-.____`.___~\\_____/___.-`___.-'=====\n//~~~~~~~~~~~~~~~~~~~~~~~`=---='\n//\n//\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n//~~~~~~~~~~~~~~~佛祖保佑~~~~~~~~~永无BUG\n//\n//\n//\n\n\n> 使用`git pull` 获取不到最新的记录，判断应该是某些时候未pull先commit导致的，使用命令：`git pull origin master`即可解决\n","source":"_posts/关于git-pull-拉取不到最新记录.md","raw":"---\ntitle: 关于git pull 拉取不到最新记录\ndate: 2018-5-31 11:39:17\ncategories: [git]\ntags: 开发日记\n---\n//\n//~~~~~~~~~~~~~~~~~~~~~~~_oo0oo_\n//~~~~~~~~~~~~~~~~~~~~~~o8888888o\n//~~~~~~~~~~~~~~~~~~~~~~88\"~.~\"88\n//~~~~~~~~~~~~~~~~~~~~~~(|~-_-~|)\n//~~~~~~~~~~~~~~~~~~~~~~0\\~~=~~/0\n//~~~~~~~~~~~~~~~~~~~~___/`---'\\___\n//~~~~~~~~~~~~~~~~~~.'~\\\\|~~~~~|//~'.\n//~~~~~~~~~~~~~~~~~/~\\\\|||~~:~~|||//~\\\n//~~~~~~~~~~~~~~~~/~_|||||~-:-~|||||-~\\\n//~~~~~~~~~~~~~~~|~~~|~\\\\\\~~-~~///~|~~~|\n//~~~~~~~~~~~~~~~|~\\_|~~''\\---/''~~|_/~|\n//~~~~~~~~~~~~~~~\\~~.-\\__~~'-'~~___/-.~/\n//~~~~~~~~~~~~~___'.~.'~~/--.--\\~~`.~.'___\n//~~~~~~~~~~.\"\"~'<~~`.___\\_<|>_/___.'~>'~\"\".\n//~~~~~~~~~|~|~:~~`-~\\`.;`\\~_~/`;.`/~-~`~:~|~|\n//~~~~~~~~~\\~~\\~`_.~~~\\_~__\\~/__~_/~~~.-`~/~~/\n//~~~~~=====`-.____`.___~\\_____/___.-`___.-'=====\n//~~~~~~~~~~~~~~~~~~~~~~~`=---='\n//\n//\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n//~~~~~~~~~~~~~~~佛祖保佑~~~~~~~~~永无BUG\n//\n//\n//\n\n\n> 使用`git pull` 获取不到最新的记录，判断应该是某些时候未pull先commit导致的，使用命令：`git pull origin master`即可解决\n","slug":"关于git-pull-拉取不到最新记录","published":1,"updated":"2019-04-05T04:46:27.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zpi20016lcuhe97142h8","content":"<p>//<br>//<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~o8888888o</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~88&quot;~.~&quot;88</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~(|~-_-~|)</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~0\\~~=~~/0</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~___/`---&apos;\\___</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~.&apos;~\\\\|~~~~~|//~&apos;.</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~/~\\\\|||~~:~~|||//~\\</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~/~_|||||~-:-~|||||-~\\</span><br><span class=\"line\">//~~~~~~~~~~~~~~~|~~~|~\\\\\\~~-~~///~|~~~|</span><br><span class=\"line\">//~~~~~~~~~~~~~~~|~\\_|~~&apos;&apos;\\---/&apos;&apos;~~|_/~|</span><br><span class=\"line\">//~~~~~~~~~~~~~~~\\~~.-\\__~~&apos;-&apos;~~___/-.~/</span><br><span class=\"line\">//~~~~~~~~~~~~~___&apos;.~.&apos;~~/--.--\\~~`.~.&apos;___</span><br><span class=\"line\">//~~~~~~~~~~.&quot;&quot;~&apos;&lt;~~`.___\\_&lt;|&gt;_/___.&apos;~&gt;&apos;~&quot;&quot;.</span><br><span class=\"line\">//~~~~~~~~~|~|~:~~`-~\\`.;`\\~_~/`;.`/~-~`~:~|~|</span><br><span class=\"line\">//~~~~~~~~~\\~~\\~`_.~~~\\_~__\\~/__~_/~~~.-`~/~~/</span><br><span class=\"line\">//~~~~~=====`-.____`.___~\\_____/___.-`___.-&apos;=====</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~~`=---=&apos;</span><br><span class=\"line\">//</span><br><span class=\"line\">//</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure></p>\n<p>//<br>//<del>~</del><del>~</del><del>~</del>佛祖保佑<del>~</del>~~~~永无BUG<br>//<br>//<br>//</p>\n<blockquote>\n<p>使用<code>git pull</code> 获取不到最新的记录，判断应该是某些时候未pull先commit导致的，使用命令：<code>git pull origin master</code>即可解决</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>//<br>//<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~o8888888o</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~88&quot;~.~&quot;88</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~(|~-_-~|)</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~0\\~~=~~/0</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~___/`---&apos;\\___</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~.&apos;~\\\\|~~~~~|//~&apos;.</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~/~\\\\|||~~:~~|||//~\\</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~/~_|||||~-:-~|||||-~\\</span><br><span class=\"line\">//~~~~~~~~~~~~~~~|~~~|~\\\\\\~~-~~///~|~~~|</span><br><span class=\"line\">//~~~~~~~~~~~~~~~|~\\_|~~&apos;&apos;\\---/&apos;&apos;~~|_/~|</span><br><span class=\"line\">//~~~~~~~~~~~~~~~\\~~.-\\__~~&apos;-&apos;~~___/-.~/</span><br><span class=\"line\">//~~~~~~~~~~~~~___&apos;.~.&apos;~~/--.--\\~~`.~.&apos;___</span><br><span class=\"line\">//~~~~~~~~~~.&quot;&quot;~&apos;&lt;~~`.___\\_&lt;|&gt;_/___.&apos;~&gt;&apos;~&quot;&quot;.</span><br><span class=\"line\">//~~~~~~~~~|~|~:~~`-~\\`.;`\\~_~/`;.`/~-~`~:~|~|</span><br><span class=\"line\">//~~~~~~~~~\\~~\\~`_.~~~\\_~__\\~/__~_/~~~.-`~/~~/</span><br><span class=\"line\">//~~~~~=====`-.____`.___~\\_____/___.-`___.-&apos;=====</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~~`=---=&apos;</span><br><span class=\"line\">//</span><br><span class=\"line\">//</span><br><span class=\"line\">//~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure></p>\n<p>//<br>//<del>~</del><del>~</del><del>~</del>佛祖保佑<del>~</del>~~~~永无BUG<br>//<br>//<br>//</p>\n<blockquote>\n<p>使用<code>git pull</code> 获取不到最新的记录，判断应该是某些时候未pull先commit导致的，使用命令：<code>git pull origin master</code>即可解决</p>\n</blockquote>\n"},{"title":"校招面试【京东、顺丰科技、招银网络科技、去哪儿网】","date":"2016-09-27T11:38:45.000Z","_content":"\n\n* 2017校招过的太惨了，还一度把原因怪罪在实习上，认为自己实习了4个月非Java研发的东西导致自己对于Java没有进行更加深入的学习，其实呢，还是应该怪自己不努力，怪不得其他。*\n从三星离职之后就开始找一些公众号内推，我是来自非985、211院校的本科生，学的还是自动化专业，偏硬件，实习内容还不是Java开发之类的东西，不知道是由于这些公众号的原因（恶意吸引粉丝）还是自己的简历确实有问题，内推一直不顺利。烦得很。\n之后又从9月开始海投Java软件开发岗，各种在线笔试。博主的基础（计算机网络操作系统等）本身就不强，C/C++/Java/PHP等还有HTML/CSS/JS/jQuery这些乱七八糟都学，算法和数据结构也学得不是很精，应付不来笔试编程题，感觉面试过的公司好少，妈的工作要找到十月了。\n\n\n<!--more-->\n\n\n** 首先说下招银电面：** 9月23号晚上八点正在理发染发呢电话就来了，都不预约一下。\n1、在Java中进行数据库连接并操作数据的步骤？最后需要进行什么操作？\n2、项目中使用jquery，那么on、bind、live、delegate这几个函数有什么区别？\n3、一个http请求所包含的数据格式是什么？\n4、一次http请求的详细处理过程？\n5、一次struts处理请求从开始到看到页面数据之间都发生了什么，整个详细过程？\n6、项目中都用到了什么框架？（spring+struts+mybatis）\n7、在自己的项目中有没有用到并发？如果让你现在考虑给你的项目中考虑并发你会怎么做？你要控制（进行同步）的数据源是哪些？\n*还有几个吧，想不起来了，应该比较简单就没有印象。电面后预约28号下午再面试。*\n\n\n----------\n\n\n**招银现场面**===该来的就这样来了\n*9月28号下午，不知道哪里来的自信感觉自己能够在一个半小时之内从长安赶到永宁门，坐地铁还把安远门当成了永宁门，到了安远门叫个优步，打电话让司机快一点，妈的竟然给我取消了，害我最后坐公交去，迟到了半个小时。心态爆炸！！！╮(╯▽╰)╭*\n1、去了在房间里等着，过会儿从酒店房间出来一个，叫我进去面试。先问我要了成绩单和一些证书，感觉招银对于成绩和证书很看重。面试官是三个人，3V1，很紧张有木有。中间坐着老大，然后一个问技术的，一个HR。\n2、自我介绍\n3、介绍一下自己的项目\n4、项目中是使用servlet编写的后台代码，为什么不用开源框架？\n5、如果要给项目中添加日志，该如何做？\n6、一个struts请求从输入URL到显示在页面上都经过了哪些过程？\n7、中间老大看我写着struts1，就问为什么使用struts1而不是struts2，有研究过两者的区别吗？\n8、给一个string，问如何不使用任何库函数也不转化为数组，如何逆序？\n就这么多问题，心态爆炸！怀疑人生！阿弥陀佛！\n\n\n----------\n\n\n** 京东一面：** 9月24日一早6点就爬起来了，昨晚一晚上都没睡好。做梦都在想着一些多线程常考的东西，果然第二天就问了。\n1、了解哪些常用的集合（set、list、map）？说说他们各自的特点（ArrayList和LinkedList等）？\n2、HashMap、HashTable的区别？HashMap扩容为什么是2倍？如何实现的？\n3、说一说线程调度机制？对线程池有何理解？哪里会用到线程池？好处是？\n4、JVM中如果有一个线程挂起了，用什么工具去查找这个线程？\n5、Java在什么时候会内存溢出？持久代内存溢出是什么情况？\n6、动态代理的实现？（从动态代理答到了springAOP）\n7、装饰模式了解吗？它的特点是什么？\n8、I/O库中都用到了什么设计模式？\n9、struts的一次请求是如何处理的？\n10、网络编程？socket？\n11、数据库索引了解吗？一个表中什么情况适合建立索引？如何去建立数据库索引？\n12、快速排序的时间复杂度、原理？\n13、java多态的实现原理？动态绑定底层虚拟机是如何实现的？\n14、forward和redirect的区别？\n*同样。。。有很多问题没想起来，一面半个多小时，后天二面。。*\n\n\n----------\n\n\n** 京东二面： ** 感觉一面回答的不好，全程面试官问什么我答什么，一点互动都没有，狠狠狠紧张！二面抱着无所谓的心态去的，倒还没有一面紧张。\n1、了解那些算法和设计模式，说说你都用他们在什么地方？（贪心、回溯、分治、动态规划  ||  单例模式、工厂模式、动态代理、装饰模式、适配器模式等，说了说单例工厂动态代理等，再说到JDK动态代理和CGLIB代理的区别，一顿乱侃）\n2、你的项目中那些都用到了多服务器？分布式了解吗？还问到了跨域请求。在实习的时候开发的网站也是单机吗？（从这儿开始问分布式集群服务器，高并发，这方面没怎么深入学习哎）\n3、设计一个抢购商品的系统需要考虑到那些问题？\n4、对于线程池有什么理解？\n5、消息队列？\n6、知道红黑树吗？平衡树？有什么区别？\n*算了不写了，想不起来了，估计二面跪了。。。*\n\n\n----------\n\n\n** 顺丰技术面： ** 9月24日下午5点，就是京东一面的下午。。。（除了技术面就是HR）\n1、简单的自我介绍一下。。。\n2、介绍自己认为最能体现自己能力的项目，跟着项目引出很多题目，问了个透彻。。。\n3、觉得自己还有那些方面的能力没有体现出来，可以说一说？（在这里傻逼了，我他喵说我暂时想不起来。因为可能自己的项目有点简单了，面试官还想要看看自己其他的能力，醉醉哒）\n顺丰科技面试就这样，问了40多分钟，结果问完就让我走了，伤心，怪自己傻逼了。另一个西电的技术面玩就直接HR面了，让我回来等通知，4天了都没有通过不通过的通知，也是厉害。挂了也不让我安心挂！\n\n\n----------\n** 去哪儿网** 9月29号下午3点好像\n感觉自己真的是，干什么事情完全不做任何准备的，很多看过的问题，在面试的时候就只能说有印象，答不详细，想抽死自己！\n1、去哪儿在金沙国际酒店面试，一天内面完，对去哪儿抱了很大希望，因为听学长说这个面试不难，问的比较基础，妈的现在写这段话还是想扇自己。\n2、刚见到面试官，他拿到简历就说，你是本科生啊？我说哦。。。然后就是自我介绍。。。\n3、给我了一张纸，在纸上写出自己用过的所有的类名。。。然后他在一边电脑上敲着东西。突然让写自己用过的所有的类的类名，脑子有点儿蒙了。\n4、说说mysql的引擎吧，说了myisam和innodb以及其区别，这个看过。\n5、mysql的各种连接是怎么回事？\n6、说说B树和B+树的区别吧。\n7、哈希冲突的解决算法？\n8、说说HashMap的实现原理？\n9、有什么问题问我？\n10、还有一些忘记了。。。\n/(ㄒoㄒ)/~~。。。都是些很简单的问题，妈的就是答得不好不够详细。\n\n----------\n** 总结 ： ** 菜鸟的求职之路总是艰辛的，校招时间还长，十月份还有几家面试（觉得自己的脸火辣辣的疼。。。），看到人都拿到了很好的Offer，不服啊！哎，语言总是苍白的，只有安心敲代码！！！！！！！！！国庆七天奋发图强，多看看Java并发编程实战那书上的东西吧，问得太多了。","source":"_posts/校招面试经历.md","raw":"\n---\ntitle: 校招面试【京东、顺丰科技、招银网络科技、去哪儿网】\ndate: 2016-09-27 19:38:45\ncategories: [程序人生]\ntags: [面试经历, 个人随笔]\n---\n\n\n* 2017校招过的太惨了，还一度把原因怪罪在实习上，认为自己实习了4个月非Java研发的东西导致自己对于Java没有进行更加深入的学习，其实呢，还是应该怪自己不努力，怪不得其他。*\n从三星离职之后就开始找一些公众号内推，我是来自非985、211院校的本科生，学的还是自动化专业，偏硬件，实习内容还不是Java开发之类的东西，不知道是由于这些公众号的原因（恶意吸引粉丝）还是自己的简历确实有问题，内推一直不顺利。烦得很。\n之后又从9月开始海投Java软件开发岗，各种在线笔试。博主的基础（计算机网络操作系统等）本身就不强，C/C++/Java/PHP等还有HTML/CSS/JS/jQuery这些乱七八糟都学，算法和数据结构也学得不是很精，应付不来笔试编程题，感觉面试过的公司好少，妈的工作要找到十月了。\n\n\n<!--more-->\n\n\n** 首先说下招银电面：** 9月23号晚上八点正在理发染发呢电话就来了，都不预约一下。\n1、在Java中进行数据库连接并操作数据的步骤？最后需要进行什么操作？\n2、项目中使用jquery，那么on、bind、live、delegate这几个函数有什么区别？\n3、一个http请求所包含的数据格式是什么？\n4、一次http请求的详细处理过程？\n5、一次struts处理请求从开始到看到页面数据之间都发生了什么，整个详细过程？\n6、项目中都用到了什么框架？（spring+struts+mybatis）\n7、在自己的项目中有没有用到并发？如果让你现在考虑给你的项目中考虑并发你会怎么做？你要控制（进行同步）的数据源是哪些？\n*还有几个吧，想不起来了，应该比较简单就没有印象。电面后预约28号下午再面试。*\n\n\n----------\n\n\n**招银现场面**===该来的就这样来了\n*9月28号下午，不知道哪里来的自信感觉自己能够在一个半小时之内从长安赶到永宁门，坐地铁还把安远门当成了永宁门，到了安远门叫个优步，打电话让司机快一点，妈的竟然给我取消了，害我最后坐公交去，迟到了半个小时。心态爆炸！！！╮(╯▽╰)╭*\n1、去了在房间里等着，过会儿从酒店房间出来一个，叫我进去面试。先问我要了成绩单和一些证书，感觉招银对于成绩和证书很看重。面试官是三个人，3V1，很紧张有木有。中间坐着老大，然后一个问技术的，一个HR。\n2、自我介绍\n3、介绍一下自己的项目\n4、项目中是使用servlet编写的后台代码，为什么不用开源框架？\n5、如果要给项目中添加日志，该如何做？\n6、一个struts请求从输入URL到显示在页面上都经过了哪些过程？\n7、中间老大看我写着struts1，就问为什么使用struts1而不是struts2，有研究过两者的区别吗？\n8、给一个string，问如何不使用任何库函数也不转化为数组，如何逆序？\n就这么多问题，心态爆炸！怀疑人生！阿弥陀佛！\n\n\n----------\n\n\n** 京东一面：** 9月24日一早6点就爬起来了，昨晚一晚上都没睡好。做梦都在想着一些多线程常考的东西，果然第二天就问了。\n1、了解哪些常用的集合（set、list、map）？说说他们各自的特点（ArrayList和LinkedList等）？\n2、HashMap、HashTable的区别？HashMap扩容为什么是2倍？如何实现的？\n3、说一说线程调度机制？对线程池有何理解？哪里会用到线程池？好处是？\n4、JVM中如果有一个线程挂起了，用什么工具去查找这个线程？\n5、Java在什么时候会内存溢出？持久代内存溢出是什么情况？\n6、动态代理的实现？（从动态代理答到了springAOP）\n7、装饰模式了解吗？它的特点是什么？\n8、I/O库中都用到了什么设计模式？\n9、struts的一次请求是如何处理的？\n10、网络编程？socket？\n11、数据库索引了解吗？一个表中什么情况适合建立索引？如何去建立数据库索引？\n12、快速排序的时间复杂度、原理？\n13、java多态的实现原理？动态绑定底层虚拟机是如何实现的？\n14、forward和redirect的区别？\n*同样。。。有很多问题没想起来，一面半个多小时，后天二面。。*\n\n\n----------\n\n\n** 京东二面： ** 感觉一面回答的不好，全程面试官问什么我答什么，一点互动都没有，狠狠狠紧张！二面抱着无所谓的心态去的，倒还没有一面紧张。\n1、了解那些算法和设计模式，说说你都用他们在什么地方？（贪心、回溯、分治、动态规划  ||  单例模式、工厂模式、动态代理、装饰模式、适配器模式等，说了说单例工厂动态代理等，再说到JDK动态代理和CGLIB代理的区别，一顿乱侃）\n2、你的项目中那些都用到了多服务器？分布式了解吗？还问到了跨域请求。在实习的时候开发的网站也是单机吗？（从这儿开始问分布式集群服务器，高并发，这方面没怎么深入学习哎）\n3、设计一个抢购商品的系统需要考虑到那些问题？\n4、对于线程池有什么理解？\n5、消息队列？\n6、知道红黑树吗？平衡树？有什么区别？\n*算了不写了，想不起来了，估计二面跪了。。。*\n\n\n----------\n\n\n** 顺丰技术面： ** 9月24日下午5点，就是京东一面的下午。。。（除了技术面就是HR）\n1、简单的自我介绍一下。。。\n2、介绍自己认为最能体现自己能力的项目，跟着项目引出很多题目，问了个透彻。。。\n3、觉得自己还有那些方面的能力没有体现出来，可以说一说？（在这里傻逼了，我他喵说我暂时想不起来。因为可能自己的项目有点简单了，面试官还想要看看自己其他的能力，醉醉哒）\n顺丰科技面试就这样，问了40多分钟，结果问完就让我走了，伤心，怪自己傻逼了。另一个西电的技术面玩就直接HR面了，让我回来等通知，4天了都没有通过不通过的通知，也是厉害。挂了也不让我安心挂！\n\n\n----------\n** 去哪儿网** 9月29号下午3点好像\n感觉自己真的是，干什么事情完全不做任何准备的，很多看过的问题，在面试的时候就只能说有印象，答不详细，想抽死自己！\n1、去哪儿在金沙国际酒店面试，一天内面完，对去哪儿抱了很大希望，因为听学长说这个面试不难，问的比较基础，妈的现在写这段话还是想扇自己。\n2、刚见到面试官，他拿到简历就说，你是本科生啊？我说哦。。。然后就是自我介绍。。。\n3、给我了一张纸，在纸上写出自己用过的所有的类名。。。然后他在一边电脑上敲着东西。突然让写自己用过的所有的类的类名，脑子有点儿蒙了。\n4、说说mysql的引擎吧，说了myisam和innodb以及其区别，这个看过。\n5、mysql的各种连接是怎么回事？\n6、说说B树和B+树的区别吧。\n7、哈希冲突的解决算法？\n8、说说HashMap的实现原理？\n9、有什么问题问我？\n10、还有一些忘记了。。。\n/(ㄒoㄒ)/~~。。。都是些很简单的问题，妈的就是答得不好不够详细。\n\n----------\n** 总结 ： ** 菜鸟的求职之路总是艰辛的，校招时间还长，十月份还有几家面试（觉得自己的脸火辣辣的疼。。。），看到人都拿到了很好的Offer，不服啊！哎，语言总是苍白的，只有安心敲代码！！！！！！！！！国庆七天奋发图强，多看看Java并发编程实战那书上的东西吧，问得太多了。","slug":"校招面试经历","published":1,"updated":"2019-04-05T04:46:27.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zpi30018lcuhdo79s0m1","content":"<ul>\n<li>2017校招过的太惨了，还一度把原因怪罪在实习上，认为自己实习了4个月非Java研发的东西导致自己对于Java没有进行更加深入的学习，其实呢，还是应该怪自己不努力，怪不得其他。*<br>从三星离职之后就开始找一些公众号内推，我是来自非985、211院校的本科生，学的还是自动化专业，偏硬件，实习内容还不是Java开发之类的东西，不知道是由于这些公众号的原因（恶意吸引粉丝）还是自己的简历确实有问题，内推一直不顺利。烦得很。<br>之后又从9月开始海投Java软件开发岗，各种在线笔试。博主的基础（计算机网络操作系统等）本身就不强，C/C++/Java/PHP等还有HTML/CSS/JS/jQuery这些乱七八糟都学，算法和数据结构也学得不是很精，应付不来笔试编程题，感觉面试过的公司好少，妈的工作要找到十月了。</li>\n</ul>\n<a id=\"more\"></a>\n<p><strong> 首先说下招银电面：</strong> 9月23号晚上八点正在理发染发呢电话就来了，都不预约一下。<br>1、在Java中进行数据库连接并操作数据的步骤？最后需要进行什么操作？<br>2、项目中使用jquery，那么on、bind、live、delegate这几个函数有什么区别？<br>3、一个http请求所包含的数据格式是什么？<br>4、一次http请求的详细处理过程？<br>5、一次struts处理请求从开始到看到页面数据之间都发生了什么，整个详细过程？<br>6、项目中都用到了什么框架？（spring+struts+mybatis）<br>7、在自己的项目中有没有用到并发？如果让你现在考虑给你的项目中考虑并发你会怎么做？你要控制（进行同步）的数据源是哪些？<br><em>还有几个吧，想不起来了，应该比较简单就没有印象。电面后预约28号下午再面试。</em></p>\n<hr>\n<p><strong>招银现场面</strong>===该来的就这样来了<br><em>9月28号下午，不知道哪里来的自信感觉自己能够在一个半小时之内从长安赶到永宁门，坐地铁还把安远门当成了永宁门，到了安远门叫个优步，打电话让司机快一点，妈的竟然给我取消了，害我最后坐公交去，迟到了半个小时。心态爆炸！！！╮(╯▽╰)╭</em><br>1、去了在房间里等着，过会儿从酒店房间出来一个，叫我进去面试。先问我要了成绩单和一些证书，感觉招银对于成绩和证书很看重。面试官是三个人，3V1，很紧张有木有。中间坐着老大，然后一个问技术的，一个HR。<br>2、自我介绍<br>3、介绍一下自己的项目<br>4、项目中是使用servlet编写的后台代码，为什么不用开源框架？<br>5、如果要给项目中添加日志，该如何做？<br>6、一个struts请求从输入URL到显示在页面上都经过了哪些过程？<br>7、中间老大看我写着struts1，就问为什么使用struts1而不是struts2，有研究过两者的区别吗？<br>8、给一个string，问如何不使用任何库函数也不转化为数组，如何逆序？<br>就这么多问题，心态爆炸！怀疑人生！阿弥陀佛！</p>\n<hr>\n<p><strong> 京东一面：</strong> 9月24日一早6点就爬起来了，昨晚一晚上都没睡好。做梦都在想着一些多线程常考的东西，果然第二天就问了。<br>1、了解哪些常用的集合（set、list、map）？说说他们各自的特点（ArrayList和LinkedList等）？<br>2、HashMap、HashTable的区别？HashMap扩容为什么是2倍？如何实现的？<br>3、说一说线程调度机制？对线程池有何理解？哪里会用到线程池？好处是？<br>4、JVM中如果有一个线程挂起了，用什么工具去查找这个线程？<br>5、Java在什么时候会内存溢出？持久代内存溢出是什么情况？<br>6、动态代理的实现？（从动态代理答到了springAOP）<br>7、装饰模式了解吗？它的特点是什么？<br>8、I/O库中都用到了什么设计模式？<br>9、struts的一次请求是如何处理的？<br>10、网络编程？socket？<br>11、数据库索引了解吗？一个表中什么情况适合建立索引？如何去建立数据库索引？<br>12、快速排序的时间复杂度、原理？<br>13、java多态的实现原理？动态绑定底层虚拟机是如何实现的？<br>14、forward和redirect的区别？<br><em>同样。。。有很多问题没想起来，一面半个多小时，后天二面。。</em></p>\n<hr>\n<p><strong> 京东二面： </strong> 感觉一面回答的不好，全程面试官问什么我答什么，一点互动都没有，狠狠狠紧张！二面抱着无所谓的心态去的，倒还没有一面紧张。<br>1、了解那些算法和设计模式，说说你都用他们在什么地方？（贪心、回溯、分治、动态规划  ||  单例模式、工厂模式、动态代理、装饰模式、适配器模式等，说了说单例工厂动态代理等，再说到JDK动态代理和CGLIB代理的区别，一顿乱侃）<br>2、你的项目中那些都用到了多服务器？分布式了解吗？还问到了跨域请求。在实习的时候开发的网站也是单机吗？（从这儿开始问分布式集群服务器，高并发，这方面没怎么深入学习哎）<br>3、设计一个抢购商品的系统需要考虑到那些问题？<br>4、对于线程池有什么理解？<br>5、消息队列？<br>6、知道红黑树吗？平衡树？有什么区别？<br><em>算了不写了，想不起来了，估计二面跪了。。。</em></p>\n<hr>\n<p><strong> 顺丰技术面： </strong> 9月24日下午5点，就是京东一面的下午。。。（除了技术面就是HR）<br>1、简单的自我介绍一下。。。<br>2、介绍自己认为最能体现自己能力的项目，跟着项目引出很多题目，问了个透彻。。。<br>3、觉得自己还有那些方面的能力没有体现出来，可以说一说？（在这里傻逼了，我他喵说我暂时想不起来。因为可能自己的项目有点简单了，面试官还想要看看自己其他的能力，醉醉哒）<br>顺丰科技面试就这样，问了40多分钟，结果问完就让我走了，伤心，怪自己傻逼了。另一个西电的技术面玩就直接HR面了，让我回来等通知，4天了都没有通过不通过的通知，也是厉害。挂了也不让我安心挂！</p>\n<hr>\n<p><strong> 去哪儿网</strong> 9月29号下午3点好像<br>感觉自己真的是，干什么事情完全不做任何准备的，很多看过的问题，在面试的时候就只能说有印象，答不详细，想抽死自己！<br>1、去哪儿在金沙国际酒店面试，一天内面完，对去哪儿抱了很大希望，因为听学长说这个面试不难，问的比较基础，妈的现在写这段话还是想扇自己。<br>2、刚见到面试官，他拿到简历就说，你是本科生啊？我说哦。。。然后就是自我介绍。。。<br>3、给我了一张纸，在纸上写出自己用过的所有的类名。。。然后他在一边电脑上敲着东西。突然让写自己用过的所有的类的类名，脑子有点儿蒙了。<br>4、说说mysql的引擎吧，说了myisam和innodb以及其区别，这个看过。<br>5、mysql的各种连接是怎么回事？<br>6、说说B树和B+树的区别吧。<br>7、哈希冲突的解决算法？<br>8、说说HashMap的实现原理？<br>9、有什么问题问我？<br>10、还有一些忘记了。。。<br>/(ㄒoㄒ)/~~。。。都是些很简单的问题，妈的就是答得不好不够详细。</p>\n<hr>\n<p><strong> 总结 ： </strong> 菜鸟的求职之路总是艰辛的，校招时间还长，十月份还有几家面试（觉得自己的脸火辣辣的疼。。。），看到人都拿到了很好的Offer，不服啊！哎，语言总是苍白的，只有安心敲代码！！！！！！！！！国庆七天奋发图强，多看看Java并发编程实战那书上的东西吧，问得太多了。</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>2017校招过的太惨了，还一度把原因怪罪在实习上，认为自己实习了4个月非Java研发的东西导致自己对于Java没有进行更加深入的学习，其实呢，还是应该怪自己不努力，怪不得其他。*<br>从三星离职之后就开始找一些公众号内推，我是来自非985、211院校的本科生，学的还是自动化专业，偏硬件，实习内容还不是Java开发之类的东西，不知道是由于这些公众号的原因（恶意吸引粉丝）还是自己的简历确实有问题，内推一直不顺利。烦得很。<br>之后又从9月开始海投Java软件开发岗，各种在线笔试。博主的基础（计算机网络操作系统等）本身就不强，C/C++/Java/PHP等还有HTML/CSS/JS/jQuery这些乱七八糟都学，算法和数据结构也学得不是很精，应付不来笔试编程题，感觉面试过的公司好少，妈的工作要找到十月了。</li>\n</ul>","more":"<p><strong> 首先说下招银电面：</strong> 9月23号晚上八点正在理发染发呢电话就来了，都不预约一下。<br>1、在Java中进行数据库连接并操作数据的步骤？最后需要进行什么操作？<br>2、项目中使用jquery，那么on、bind、live、delegate这几个函数有什么区别？<br>3、一个http请求所包含的数据格式是什么？<br>4、一次http请求的详细处理过程？<br>5、一次struts处理请求从开始到看到页面数据之间都发生了什么，整个详细过程？<br>6、项目中都用到了什么框架？（spring+struts+mybatis）<br>7、在自己的项目中有没有用到并发？如果让你现在考虑给你的项目中考虑并发你会怎么做？你要控制（进行同步）的数据源是哪些？<br><em>还有几个吧，想不起来了，应该比较简单就没有印象。电面后预约28号下午再面试。</em></p>\n<hr>\n<p><strong>招银现场面</strong>===该来的就这样来了<br><em>9月28号下午，不知道哪里来的自信感觉自己能够在一个半小时之内从长安赶到永宁门，坐地铁还把安远门当成了永宁门，到了安远门叫个优步，打电话让司机快一点，妈的竟然给我取消了，害我最后坐公交去，迟到了半个小时。心态爆炸！！！╮(╯▽╰)╭</em><br>1、去了在房间里等着，过会儿从酒店房间出来一个，叫我进去面试。先问我要了成绩单和一些证书，感觉招银对于成绩和证书很看重。面试官是三个人，3V1，很紧张有木有。中间坐着老大，然后一个问技术的，一个HR。<br>2、自我介绍<br>3、介绍一下自己的项目<br>4、项目中是使用servlet编写的后台代码，为什么不用开源框架？<br>5、如果要给项目中添加日志，该如何做？<br>6、一个struts请求从输入URL到显示在页面上都经过了哪些过程？<br>7、中间老大看我写着struts1，就问为什么使用struts1而不是struts2，有研究过两者的区别吗？<br>8、给一个string，问如何不使用任何库函数也不转化为数组，如何逆序？<br>就这么多问题，心态爆炸！怀疑人生！阿弥陀佛！</p>\n<hr>\n<p><strong> 京东一面：</strong> 9月24日一早6点就爬起来了，昨晚一晚上都没睡好。做梦都在想着一些多线程常考的东西，果然第二天就问了。<br>1、了解哪些常用的集合（set、list、map）？说说他们各自的特点（ArrayList和LinkedList等）？<br>2、HashMap、HashTable的区别？HashMap扩容为什么是2倍？如何实现的？<br>3、说一说线程调度机制？对线程池有何理解？哪里会用到线程池？好处是？<br>4、JVM中如果有一个线程挂起了，用什么工具去查找这个线程？<br>5、Java在什么时候会内存溢出？持久代内存溢出是什么情况？<br>6、动态代理的实现？（从动态代理答到了springAOP）<br>7、装饰模式了解吗？它的特点是什么？<br>8、I/O库中都用到了什么设计模式？<br>9、struts的一次请求是如何处理的？<br>10、网络编程？socket？<br>11、数据库索引了解吗？一个表中什么情况适合建立索引？如何去建立数据库索引？<br>12、快速排序的时间复杂度、原理？<br>13、java多态的实现原理？动态绑定底层虚拟机是如何实现的？<br>14、forward和redirect的区别？<br><em>同样。。。有很多问题没想起来，一面半个多小时，后天二面。。</em></p>\n<hr>\n<p><strong> 京东二面： </strong> 感觉一面回答的不好，全程面试官问什么我答什么，一点互动都没有，狠狠狠紧张！二面抱着无所谓的心态去的，倒还没有一面紧张。<br>1、了解那些算法和设计模式，说说你都用他们在什么地方？（贪心、回溯、分治、动态规划  ||  单例模式、工厂模式、动态代理、装饰模式、适配器模式等，说了说单例工厂动态代理等，再说到JDK动态代理和CGLIB代理的区别，一顿乱侃）<br>2、你的项目中那些都用到了多服务器？分布式了解吗？还问到了跨域请求。在实习的时候开发的网站也是单机吗？（从这儿开始问分布式集群服务器，高并发，这方面没怎么深入学习哎）<br>3、设计一个抢购商品的系统需要考虑到那些问题？<br>4、对于线程池有什么理解？<br>5、消息队列？<br>6、知道红黑树吗？平衡树？有什么区别？<br><em>算了不写了，想不起来了，估计二面跪了。。。</em></p>\n<hr>\n<p><strong> 顺丰技术面： </strong> 9月24日下午5点，就是京东一面的下午。。。（除了技术面就是HR）<br>1、简单的自我介绍一下。。。<br>2、介绍自己认为最能体现自己能力的项目，跟着项目引出很多题目，问了个透彻。。。<br>3、觉得自己还有那些方面的能力没有体现出来，可以说一说？（在这里傻逼了，我他喵说我暂时想不起来。因为可能自己的项目有点简单了，面试官还想要看看自己其他的能力，醉醉哒）<br>顺丰科技面试就这样，问了40多分钟，结果问完就让我走了，伤心，怪自己傻逼了。另一个西电的技术面玩就直接HR面了，让我回来等通知，4天了都没有通过不通过的通知，也是厉害。挂了也不让我安心挂！</p>\n<hr>\n<p><strong> 去哪儿网</strong> 9月29号下午3点好像<br>感觉自己真的是，干什么事情完全不做任何准备的，很多看过的问题，在面试的时候就只能说有印象，答不详细，想抽死自己！<br>1、去哪儿在金沙国际酒店面试，一天内面完，对去哪儿抱了很大希望，因为听学长说这个面试不难，问的比较基础，妈的现在写这段话还是想扇自己。<br>2、刚见到面试官，他拿到简历就说，你是本科生啊？我说哦。。。然后就是自我介绍。。。<br>3、给我了一张纸，在纸上写出自己用过的所有的类名。。。然后他在一边电脑上敲着东西。突然让写自己用过的所有的类的类名，脑子有点儿蒙了。<br>4、说说mysql的引擎吧，说了myisam和innodb以及其区别，这个看过。<br>5、mysql的各种连接是怎么回事？<br>6、说说B树和B+树的区别吧。<br>7、哈希冲突的解决算法？<br>8、说说HashMap的实现原理？<br>9、有什么问题问我？<br>10、还有一些忘记了。。。<br>/(ㄒoㄒ)/~~。。。都是些很简单的问题，妈的就是答得不好不够详细。</p>\n<hr>\n<p><strong> 总结 ： </strong> 菜鸟的求职之路总是艰辛的，校招时间还长，十月份还有几家面试（觉得自己的脸火辣辣的疼。。。），看到人都拿到了很好的Offer，不服啊！哎，语言总是苍白的，只有安心敲代码！！！！！！！！！国庆七天奋发图强，多看看Java并发编程实战那书上的东西吧，问得太多了。</p>"},{"title":"泰国7天6晚自由行攻略","date":"2018-09-04T11:38:45.000Z","_content":"\n> 人生不可能是一场说走就走的旅行，但心怀远方的人，一定要时刻做着说走就走的准备！\n\n<font face=\"STCAIYUN\">关于去泰国这件事情，可能发生的很突然，但是没关系，既然决定了，就把它安排在计划里。</font>\n\n### 一、出行前的准备\n#### 1、护照&签证\n我是在杭州工作，在杭州工作社保交满一年，就可以办护照了。拿着身份证在西湖区行政服务中心的出入境管理那儿就可以办理了。现在一楼自助打印下社保证明，然后去后面的楼，出入境办理区按照流程办理即可。大概一个多礼拜就能拿到护照，我也没想到有这么快。\n\n签证是在淘宝上买的，260￥。七个工作日到手。\n#### 2、泰铢&电话卡&出入境&去泰国的必备软件&其他\n\n泰国新规定，过境签、落地签-10000泰铢或等值外币现金（每人），20000泰铢（家庭）；\n旅游签-20000泰铢或等值外币现金（每人），40000泰铢（家庭），抽查到概率很低，一般落地签会查的吧。但是网上说好像都不查的，或者很少查，但还是换两千的吧。\n\n然后再淘宝买泰国7天happy卡，[我买的是这家的](https://traveldetail.fliggy.com/item.htm?spm=a230r.1.14.1.42f77cb9MwHKZ4&id=38255797452&ns=1&abbucket=7&smToken=ef69fda777d249bab6581b59d4cb9a82&smSign=twzGgFTirKEEIRtKkNLrYQ%3D%3D)，8天无限流量，4G。\n\n入境时需要填写出入境卡，然后和护照一起交给海关查看盖章。下面是入境卡中文说明图：\n![出入境卡](http://ol3d80aa0.bkt.clouddn.com/%E6%B3%B0%E5%9B%BD%E5%87%BA%E5%85%A5%E5%A2%83%E5%8D%A1%E4%B8%AD%E6%96%87.jpg)\n\n一般情况下，在乘坐航班时常会有工作人员在抵达目的地钱给乘客发放出入境卡，以便乘客提前填好出入境卡，方便出关。护照也很重要，可以在国内出发前复印几份护照一定要放行李箱，不要随身携带。\n\n\n\n\n\n\n<!--more-->\n\n### END - 其他一些实用信息\n> #### 大使馆/领事馆\n\n中国驻泰国大使馆\n地址：NO.57, Racgadapisek Road, Bangkok\n电话：+66-02-2450088\n领事保护电话：+66-854833327（24小时值班手机），+66-02-2457010（工作日9：00-17：00）\n\n中国驻清迈总领事馆\n地址：111 Changloh Road, Haiya District, Chiangmai\n电话：+66-53-280380，+66-53-276125，+66-53-276457\n\n中国驻宋卡总领事馆（近普吉岛、苏梅岛、甲米）\n地址：9 Sadao Road, Songkhla\n电话：+66-74-322034\n领事保护电话：+66-817665560\n\n中国驻宋卡总领馆驻普吉领事办公室\n电话：+66-76-304219\n领事保护电话：+66-945956168（中文、泰文），+66-945986859（中文）\n\n中国驻孔敬总领馆\n地址：142/44 Moo 2，Rob-Bueng Rd.，Nai-Muang， Muang， Khon Kaen\n电话：+66-43-226873\n\n> #### 紧急电话\n\n警察:123/191\n火警:199\n救护:2460199\n领事:022-457010\n大使馆:022-457044\n旅游投诉:1155\n","source":"_posts/泰国7天6晚自由行攻略.md","raw":"---\ntitle: 泰国7天6晚自由行攻略\ndate: 2018-09-04 19:38:45\ncategories: [个人随笔]\ntags: [个人随笔]\n---\n\n> 人生不可能是一场说走就走的旅行，但心怀远方的人，一定要时刻做着说走就走的准备！\n\n<font face=\"STCAIYUN\">关于去泰国这件事情，可能发生的很突然，但是没关系，既然决定了，就把它安排在计划里。</font>\n\n### 一、出行前的准备\n#### 1、护照&签证\n我是在杭州工作，在杭州工作社保交满一年，就可以办护照了。拿着身份证在西湖区行政服务中心的出入境管理那儿就可以办理了。现在一楼自助打印下社保证明，然后去后面的楼，出入境办理区按照流程办理即可。大概一个多礼拜就能拿到护照，我也没想到有这么快。\n\n签证是在淘宝上买的，260￥。七个工作日到手。\n#### 2、泰铢&电话卡&出入境&去泰国的必备软件&其他\n\n泰国新规定，过境签、落地签-10000泰铢或等值外币现金（每人），20000泰铢（家庭）；\n旅游签-20000泰铢或等值外币现金（每人），40000泰铢（家庭），抽查到概率很低，一般落地签会查的吧。但是网上说好像都不查的，或者很少查，但还是换两千的吧。\n\n然后再淘宝买泰国7天happy卡，[我买的是这家的](https://traveldetail.fliggy.com/item.htm?spm=a230r.1.14.1.42f77cb9MwHKZ4&id=38255797452&ns=1&abbucket=7&smToken=ef69fda777d249bab6581b59d4cb9a82&smSign=twzGgFTirKEEIRtKkNLrYQ%3D%3D)，8天无限流量，4G。\n\n入境时需要填写出入境卡，然后和护照一起交给海关查看盖章。下面是入境卡中文说明图：\n![出入境卡](http://ol3d80aa0.bkt.clouddn.com/%E6%B3%B0%E5%9B%BD%E5%87%BA%E5%85%A5%E5%A2%83%E5%8D%A1%E4%B8%AD%E6%96%87.jpg)\n\n一般情况下，在乘坐航班时常会有工作人员在抵达目的地钱给乘客发放出入境卡，以便乘客提前填好出入境卡，方便出关。护照也很重要，可以在国内出发前复印几份护照一定要放行李箱，不要随身携带。\n\n\n\n\n\n\n<!--more-->\n\n### END - 其他一些实用信息\n> #### 大使馆/领事馆\n\n中国驻泰国大使馆\n地址：NO.57, Racgadapisek Road, Bangkok\n电话：+66-02-2450088\n领事保护电话：+66-854833327（24小时值班手机），+66-02-2457010（工作日9：00-17：00）\n\n中国驻清迈总领事馆\n地址：111 Changloh Road, Haiya District, Chiangmai\n电话：+66-53-280380，+66-53-276125，+66-53-276457\n\n中国驻宋卡总领事馆（近普吉岛、苏梅岛、甲米）\n地址：9 Sadao Road, Songkhla\n电话：+66-74-322034\n领事保护电话：+66-817665560\n\n中国驻宋卡总领馆驻普吉领事办公室\n电话：+66-76-304219\n领事保护电话：+66-945956168（中文、泰文），+66-945986859（中文）\n\n中国驻孔敬总领馆\n地址：142/44 Moo 2，Rob-Bueng Rd.，Nai-Muang， Muang， Khon Kaen\n电话：+66-43-226873\n\n> #### 紧急电话\n\n警察:123/191\n火警:199\n救护:2460199\n领事:022-457010\n大使馆:022-457044\n旅游投诉:1155\n","slug":"泰国7天6晚自由行攻略","published":1,"updated":"2019-04-18T15:32:18.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zpi5001clcuhhhomvxcd","content":"<blockquote>\n<p>人生不可能是一场说走就走的旅行，但心怀远方的人，一定要时刻做着说走就走的准备！</p>\n</blockquote>\n<font face=\"STCAIYUN\">关于去泰国这件事情，可能发生的很突然，但是没关系，既然决定了，就把它安排在计划里。</font>\n\n<h3 id=\"一、出行前的准备\"><a href=\"#一、出行前的准备\" class=\"headerlink\" title=\"一、出行前的准备\"></a>一、出行前的准备</h3><h4 id=\"1、护照-amp-签证\"><a href=\"#1、护照-amp-签证\" class=\"headerlink\" title=\"1、护照&amp;签证\"></a>1、护照&amp;签证</h4><p>我是在杭州工作，在杭州工作社保交满一年，就可以办护照了。拿着身份证在西湖区行政服务中心的出入境管理那儿就可以办理了。现在一楼自助打印下社保证明，然后去后面的楼，出入境办理区按照流程办理即可。大概一个多礼拜就能拿到护照，我也没想到有这么快。</p>\n<p>签证是在淘宝上买的，260￥。七个工作日到手。</p>\n<h4 id=\"2、泰铢-amp-电话卡-amp-出入境-amp-去泰国的必备软件-amp-其他\"><a href=\"#2、泰铢-amp-电话卡-amp-出入境-amp-去泰国的必备软件-amp-其他\" class=\"headerlink\" title=\"2、泰铢&amp;电话卡&amp;出入境&amp;去泰国的必备软件&amp;其他\"></a>2、泰铢&amp;电话卡&amp;出入境&amp;去泰国的必备软件&amp;其他</h4><p>泰国新规定，过境签、落地签-10000泰铢或等值外币现金（每人），20000泰铢（家庭）；<br>旅游签-20000泰铢或等值外币现金（每人），40000泰铢（家庭），抽查到概率很低，一般落地签会查的吧。但是网上说好像都不查的，或者很少查，但还是换两千的吧。</p>\n<p>然后再淘宝买泰国7天happy卡，<a href=\"https://traveldetail.fliggy.com/item.htm?spm=a230r.1.14.1.42f77cb9MwHKZ4&amp;id=38255797452&amp;ns=1&amp;abbucket=7&amp;smToken=ef69fda777d249bab6581b59d4cb9a82&amp;smSign=twzGgFTirKEEIRtKkNLrYQ%3D%3D\" target=\"_blank\" rel=\"noopener\">我买的是这家的</a>，8天无限流量，4G。</p>\n<p>入境时需要填写出入境卡，然后和护照一起交给海关查看盖章。下面是入境卡中文说明图：<br><img src=\"http://ol3d80aa0.bkt.clouddn.com/%E6%B3%B0%E5%9B%BD%E5%87%BA%E5%85%A5%E5%A2%83%E5%8D%A1%E4%B8%AD%E6%96%87.jpg\" alt=\"出入境卡\"></p>\n<p>一般情况下，在乘坐航班时常会有工作人员在抵达目的地钱给乘客发放出入境卡，以便乘客提前填好出入境卡，方便出关。护照也很重要，可以在国内出发前复印几份护照一定要放行李箱，不要随身携带。</p>\n<a id=\"more\"></a>\n<h3 id=\"END-其他一些实用信息\"><a href=\"#END-其他一些实用信息\" class=\"headerlink\" title=\"END - 其他一些实用信息\"></a>END - 其他一些实用信息</h3><blockquote>\n<h4 id=\"大使馆-领事馆\"><a href=\"#大使馆-领事馆\" class=\"headerlink\" title=\"大使馆/领事馆\"></a>大使馆/领事馆</h4></blockquote>\n<p>中国驻泰国大使馆<br>地址：NO.57, Racgadapisek Road, Bangkok<br>电话：+66-02-2450088<br>领事保护电话：+66-854833327（24小时值班手机），+66-02-2457010（工作日9：00-17：00）</p>\n<p>中国驻清迈总领事馆<br>地址：111 Changloh Road, Haiya District, Chiangmai<br>电话：+66-53-280380，+66-53-276125，+66-53-276457</p>\n<p>中国驻宋卡总领事馆（近普吉岛、苏梅岛、甲米）<br>地址：9 Sadao Road, Songkhla<br>电话：+66-74-322034<br>领事保护电话：+66-817665560</p>\n<p>中国驻宋卡总领馆驻普吉领事办公室<br>电话：+66-76-304219<br>领事保护电话：+66-945956168（中文、泰文），+66-945986859（中文）</p>\n<p>中国驻孔敬总领馆<br>地址：142/44 Moo 2，Rob-Bueng Rd.，Nai-Muang， Muang， Khon Kaen<br>电话：+66-43-226873</p>\n<blockquote>\n<h4 id=\"紧急电话\"><a href=\"#紧急电话\" class=\"headerlink\" title=\"紧急电话\"></a>紧急电话</h4></blockquote>\n<p>警察:123/191<br>火警:199<br>救护:2460199<br>领事:022-457010<br>大使馆:022-457044<br>旅游投诉:1155</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>人生不可能是一场说走就走的旅行，但心怀远方的人，一定要时刻做着说走就走的准备！</p>\n</blockquote>\n<font face=\"STCAIYUN\">关于去泰国这件事情，可能发生的很突然，但是没关系，既然决定了，就把它安排在计划里。</font>\n\n<h3 id=\"一、出行前的准备\"><a href=\"#一、出行前的准备\" class=\"headerlink\" title=\"一、出行前的准备\"></a>一、出行前的准备</h3><h4 id=\"1、护照-amp-签证\"><a href=\"#1、护照-amp-签证\" class=\"headerlink\" title=\"1、护照&amp;签证\"></a>1、护照&amp;签证</h4><p>我是在杭州工作，在杭州工作社保交满一年，就可以办护照了。拿着身份证在西湖区行政服务中心的出入境管理那儿就可以办理了。现在一楼自助打印下社保证明，然后去后面的楼，出入境办理区按照流程办理即可。大概一个多礼拜就能拿到护照，我也没想到有这么快。</p>\n<p>签证是在淘宝上买的，260￥。七个工作日到手。</p>\n<h4 id=\"2、泰铢-amp-电话卡-amp-出入境-amp-去泰国的必备软件-amp-其他\"><a href=\"#2、泰铢-amp-电话卡-amp-出入境-amp-去泰国的必备软件-amp-其他\" class=\"headerlink\" title=\"2、泰铢&amp;电话卡&amp;出入境&amp;去泰国的必备软件&amp;其他\"></a>2、泰铢&amp;电话卡&amp;出入境&amp;去泰国的必备软件&amp;其他</h4><p>泰国新规定，过境签、落地签-10000泰铢或等值外币现金（每人），20000泰铢（家庭）；<br>旅游签-20000泰铢或等值外币现金（每人），40000泰铢（家庭），抽查到概率很低，一般落地签会查的吧。但是网上说好像都不查的，或者很少查，但还是换两千的吧。</p>\n<p>然后再淘宝买泰国7天happy卡，<a href=\"https://traveldetail.fliggy.com/item.htm?spm=a230r.1.14.1.42f77cb9MwHKZ4&amp;id=38255797452&amp;ns=1&amp;abbucket=7&amp;smToken=ef69fda777d249bab6581b59d4cb9a82&amp;smSign=twzGgFTirKEEIRtKkNLrYQ%3D%3D\" target=\"_blank\" rel=\"noopener\">我买的是这家的</a>，8天无限流量，4G。</p>\n<p>入境时需要填写出入境卡，然后和护照一起交给海关查看盖章。下面是入境卡中文说明图：<br><img src=\"http://ol3d80aa0.bkt.clouddn.com/%E6%B3%B0%E5%9B%BD%E5%87%BA%E5%85%A5%E5%A2%83%E5%8D%A1%E4%B8%AD%E6%96%87.jpg\" alt=\"出入境卡\"></p>\n<p>一般情况下，在乘坐航班时常会有工作人员在抵达目的地钱给乘客发放出入境卡，以便乘客提前填好出入境卡，方便出关。护照也很重要，可以在国内出发前复印几份护照一定要放行李箱，不要随身携带。</p>","more":"<h3 id=\"END-其他一些实用信息\"><a href=\"#END-其他一些实用信息\" class=\"headerlink\" title=\"END - 其他一些实用信息\"></a>END - 其他一些实用信息</h3><blockquote>\n<h4 id=\"大使馆-领事馆\"><a href=\"#大使馆-领事馆\" class=\"headerlink\" title=\"大使馆/领事馆\"></a>大使馆/领事馆</h4></blockquote>\n<p>中国驻泰国大使馆<br>地址：NO.57, Racgadapisek Road, Bangkok<br>电话：+66-02-2450088<br>领事保护电话：+66-854833327（24小时值班手机），+66-02-2457010（工作日9：00-17：00）</p>\n<p>中国驻清迈总领事馆<br>地址：111 Changloh Road, Haiya District, Chiangmai<br>电话：+66-53-280380，+66-53-276125，+66-53-276457</p>\n<p>中国驻宋卡总领事馆（近普吉岛、苏梅岛、甲米）<br>地址：9 Sadao Road, Songkhla<br>电话：+66-74-322034<br>领事保护电话：+66-817665560</p>\n<p>中国驻宋卡总领馆驻普吉领事办公室<br>电话：+66-76-304219<br>领事保护电话：+66-945956168（中文、泰文），+66-945986859（中文）</p>\n<p>中国驻孔敬总领馆<br>地址：142/44 Moo 2，Rob-Bueng Rd.，Nai-Muang， Muang， Khon Kaen<br>电话：+66-43-226873</p>\n<blockquote>\n<h4 id=\"紧急电话\"><a href=\"#紧急电话\" class=\"headerlink\" title=\"紧急电话\"></a>紧急电话</h4></blockquote>\n<p>警察:123/191<br>火警:199<br>救护:2460199<br>领事:022-457010<br>大使馆:022-457044<br>旅游投诉:1155</p>"},{"title":"MySql数据库group by","date":"2018-08-11T03:02:37.000Z","_content":"\n### Mysql数据库根据多个字段进行分组统计\n\n如下图，表order为订单表，字段以及数据如下：\n\n![order.png](http://ol3d80aa0.bkt.clouddn.com/order.png)\n现在想要根据表中的信息，查询每天不同的商户有多少笔订单，以及订单的总金额。\n<!--more-->\n需要完成以上查询，就需要进行group by多个字段统计，统计sql如下：\n```\nSELECT\n\tstore_name,\n\tDATE_FORMAT(add_time, '%Y-%m-%d') AS addDate,\n\tcount(1) AS total,\n\tsum(order_money) AS total_money\nFROM\n\t`order`\nGROUP BY\n\tDATE_FORMAT(add_time, '%Y-%m-%d'),\n\tstore_name;\n```\n统计查询得到的数据结果如下：\n\n![a.png](http://ol3d80aa0.bkt.clouddn.com/a.png)\n\n","source":"_posts/开发日记-20180828.md","raw":"---\ntitle: MySql数据库group by\ndate: 2018-08-11 11:02:37\ncategories: [数据库基础]\ntags: [开发日记,MySql]\n---\n\n### Mysql数据库根据多个字段进行分组统计\n\n如下图，表order为订单表，字段以及数据如下：\n\n![order.png](http://ol3d80aa0.bkt.clouddn.com/order.png)\n现在想要根据表中的信息，查询每天不同的商户有多少笔订单，以及订单的总金额。\n<!--more-->\n需要完成以上查询，就需要进行group by多个字段统计，统计sql如下：\n```\nSELECT\n\tstore_name,\n\tDATE_FORMAT(add_time, '%Y-%m-%d') AS addDate,\n\tcount(1) AS total,\n\tsum(order_money) AS total_money\nFROM\n\t`order`\nGROUP BY\n\tDATE_FORMAT(add_time, '%Y-%m-%d'),\n\tstore_name;\n```\n统计查询得到的数据结果如下：\n\n![a.png](http://ol3d80aa0.bkt.clouddn.com/a.png)\n\n","slug":"开发日记-20180828","published":1,"updated":"2019-04-05T04:46:27.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zpi6001elcuhaqfr6ih2","content":"<h3 id=\"Mysql数据库根据多个字段进行分组统计\"><a href=\"#Mysql数据库根据多个字段进行分组统计\" class=\"headerlink\" title=\"Mysql数据库根据多个字段进行分组统计\"></a>Mysql数据库根据多个字段进行分组统计</h3><p>如下图，表order为订单表，字段以及数据如下：</p>\n<p><img src=\"http://ol3d80aa0.bkt.clouddn.com/order.png\" alt=\"order.png\"><br>现在想要根据表中的信息，查询每天不同的商户有多少笔订单，以及订单的总金额。<br><a id=\"more\"></a><br>需要完成以上查询，就需要进行group by多个字段统计，统计sql如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">\tstore_name,</span><br><span class=\"line\">\tDATE_FORMAT(add_time, &apos;%Y-%m-%d&apos;) AS addDate,</span><br><span class=\"line\">\tcount(1) AS total,</span><br><span class=\"line\">\tsum(order_money) AS total_money</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\t`order`</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">\tDATE_FORMAT(add_time, &apos;%Y-%m-%d&apos;),</span><br><span class=\"line\">\tstore_name;</span><br></pre></td></tr></table></figure></p>\n<p>统计查询得到的数据结果如下：</p>\n<p><img src=\"http://ol3d80aa0.bkt.clouddn.com/a.png\" alt=\"a.png\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Mysql数据库根据多个字段进行分组统计\"><a href=\"#Mysql数据库根据多个字段进行分组统计\" class=\"headerlink\" title=\"Mysql数据库根据多个字段进行分组统计\"></a>Mysql数据库根据多个字段进行分组统计</h3><p>如下图，表order为订单表，字段以及数据如下：</p>\n<p><img src=\"http://ol3d80aa0.bkt.clouddn.com/order.png\" alt=\"order.png\"><br>现在想要根据表中的信息，查询每天不同的商户有多少笔订单，以及订单的总金额。<br>","more":"<br>需要完成以上查询，就需要进行group by多个字段统计，统计sql如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">\tstore_name,</span><br><span class=\"line\">\tDATE_FORMAT(add_time, &apos;%Y-%m-%d&apos;) AS addDate,</span><br><span class=\"line\">\tcount(1) AS total,</span><br><span class=\"line\">\tsum(order_money) AS total_money</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\t`order`</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">\tDATE_FORMAT(add_time, &apos;%Y-%m-%d&apos;),</span><br><span class=\"line\">\tstore_name;</span><br></pre></td></tr></table></figure></p>\n<p>统计查询得到的数据结果如下：</p>\n<p><img src=\"http://ol3d80aa0.bkt.clouddn.com/a.png\" alt=\"a.png\"></p>"},{"title":"纪念即将结束的第一份工作","date":"2018-06-28T14:20:45.000Z","_content":"\n## 纪念*~~即将~~* 结束的第一份工作\n\n\n1. #### 我一直都不知道自己想要得到些什么东西\n  > - 记得高中的时候，身边不管是家人还是老师，总会时刻不停在耳边说着：你需要如何如何学习，考上一个怎样的大学，进入一个怎么样的专业，以后找一个怎样的工作。可是当我听到这些话时总是会很反感。也许是叛逆，也许是这些对于我当时都是些虚无缥缈，很遥远的东西，我没有办法理解自己得到这些东西有什么用。但是虽然忠言不入耳，我还是得按照他们说的做。还好，大学上了一个普通的理工科一本。\n  - 当上了大学之后，没有了老师家长在耳边“絮叨”，更不知道自己要干什么了。记得当时参加各种社团，觉得在社团里面干的风风火火很牛逼，甚至课程都不上几节，最严重的时候好几周都不上课。浑浑噩噩的度过了大学的第一年之后，突然因为一个给学校编程培训班试听课凑人数的机会，让自动化专业的我接触到了软件开发这个方向。依然记得当时上课的老师，老范！当他用C语言在电脑上输出一串笑脸字符的时候，我当时的眼睛都亮了，我对和自己一块去凑人数的舍友说，这个人一定以后对我有很大的帮助，我一定要报名他的课程。后来真的觉得我是幸运的，老范是一个很有人格魅力的中年程序员 :) 。也是他让我知道了程序员是做什么的，也是他让我非常期待自己能够成为一个真正的软件开发者。<!--more-->\n  - 就这样我跟着老范从计算机基础，学到数据结构与算法，学计算机网络，MySQL，学习设计模式，学C++，后来又在另一个班学Java。计算机硬件方向专业的我，学完了软件专业学生要学的所有课程。终于大三，我找到了西安三星电子研究所的一份实习，写了两个月shell脚本，学习了Linux相关的知识以及自动化测试的东西，后来又在组内用PHP写了个网站，提供给大家进行会议的预定与提醒。现在想想这一切经验都是我的宝贵的财富.\n  - 实习结束后，工作却找的不是很顺利，也许是自己的实习经历没有太多做Java开发的东西，导致自己没有什么实际的项目经验。后来，我来了同※※。\n\n\n2. #### 或许离开这里是我最正确的选择\n  > - 在拿到offer来到同※※之前，我觉得我来到了一个很好的大公司。事实上这里也没有很差，除了我所在的部门。同※※是国内最早做股票交易平台的软件公司，目前也有自己的大楼，装修的也很不错，很像一个一线的大型互联网公司。然而，只是很像而已。从一件很平常的事就看得出来：每天饭点，后勤部经理就站在食堂打饭窗口对打饭的员工喊，少打一点少打一点，他们吃不完！ ... ...\n  - 其实我刚来的时候觉得自己可以呆三年的，现在想想真的很抱歉，我得走了。并不是因为上面的“打饭”。我来到这里做的工作都是外包的，在B2B部门。我本来以为大公司的工作流程都很规范，没想到在这里刷新了我的三观哈哈。外包工作什么都得听客户的，乱改需求不说，自己公司的运维根本派不上用场，连tomcat的启动报错都不知道怎么解决，让我们作为开发的去同时做开发、测试、运维、项目经理、产品的活，想想就火大。项目经理把客户电话甩给你，自己沟通去，然后自己潇洒的下班。\n  - 唉ε=(′ο｀*)))，不想再说太多了，显得自己好像太小气，都要走了还要diss前公司。但是，我觉得我是真的得走了，而且我还算是忍得时间长的。我们组，比我来得晚，比我走的早的人，超过了10个。才一年啊。作为一个刚毕业一年的程序员，真的心好累。\n\n\n\n3. #### 接下来的路少交点儿朋友，否则离开时会难受\n  > - 要走了要走了，却又感觉很难受。在这里，我接触过不少傻逼，但是也真的交到很多有趣的朋友。甚至有那种就算离职了，之后也不会断了联系的。在这个城市，原本独自一人的生活由他们，真的不会无聊。\n  - 天涯途上谁是客，散席时怎么分？ 也许有些人分开就不会再见，有些人想不见却总会出现在生活里。罢了，以后换到新的公司，不要再走心了。况且，真正值得走心的，也不会很多！\n\n###### ✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。  ——《行歌》 · 陈鸿宇\n\n","source":"_posts/纪念即将结束的第一份工作.md","raw":"---\ntitle: 纪念即将结束的第一份工作\ndate: 2018-06-28 22:20:45\ncategories: [程序人生]\ntags: [程序人生]\n---\n\n## 纪念*~~即将~~* 结束的第一份工作\n\n\n1. #### 我一直都不知道自己想要得到些什么东西\n  > - 记得高中的时候，身边不管是家人还是老师，总会时刻不停在耳边说着：你需要如何如何学习，考上一个怎样的大学，进入一个怎么样的专业，以后找一个怎样的工作。可是当我听到这些话时总是会很反感。也许是叛逆，也许是这些对于我当时都是些虚无缥缈，很遥远的东西，我没有办法理解自己得到这些东西有什么用。但是虽然忠言不入耳，我还是得按照他们说的做。还好，大学上了一个普通的理工科一本。\n  - 当上了大学之后，没有了老师家长在耳边“絮叨”，更不知道自己要干什么了。记得当时参加各种社团，觉得在社团里面干的风风火火很牛逼，甚至课程都不上几节，最严重的时候好几周都不上课。浑浑噩噩的度过了大学的第一年之后，突然因为一个给学校编程培训班试听课凑人数的机会，让自动化专业的我接触到了软件开发这个方向。依然记得当时上课的老师，老范！当他用C语言在电脑上输出一串笑脸字符的时候，我当时的眼睛都亮了，我对和自己一块去凑人数的舍友说，这个人一定以后对我有很大的帮助，我一定要报名他的课程。后来真的觉得我是幸运的，老范是一个很有人格魅力的中年程序员 :) 。也是他让我知道了程序员是做什么的，也是他让我非常期待自己能够成为一个真正的软件开发者。<!--more-->\n  - 就这样我跟着老范从计算机基础，学到数据结构与算法，学计算机网络，MySQL，学习设计模式，学C++，后来又在另一个班学Java。计算机硬件方向专业的我，学完了软件专业学生要学的所有课程。终于大三，我找到了西安三星电子研究所的一份实习，写了两个月shell脚本，学习了Linux相关的知识以及自动化测试的东西，后来又在组内用PHP写了个网站，提供给大家进行会议的预定与提醒。现在想想这一切经验都是我的宝贵的财富.\n  - 实习结束后，工作却找的不是很顺利，也许是自己的实习经历没有太多做Java开发的东西，导致自己没有什么实际的项目经验。后来，我来了同※※。\n\n\n2. #### 或许离开这里是我最正确的选择\n  > - 在拿到offer来到同※※之前，我觉得我来到了一个很好的大公司。事实上这里也没有很差，除了我所在的部门。同※※是国内最早做股票交易平台的软件公司，目前也有自己的大楼，装修的也很不错，很像一个一线的大型互联网公司。然而，只是很像而已。从一件很平常的事就看得出来：每天饭点，后勤部经理就站在食堂打饭窗口对打饭的员工喊，少打一点少打一点，他们吃不完！ ... ...\n  - 其实我刚来的时候觉得自己可以呆三年的，现在想想真的很抱歉，我得走了。并不是因为上面的“打饭”。我来到这里做的工作都是外包的，在B2B部门。我本来以为大公司的工作流程都很规范，没想到在这里刷新了我的三观哈哈。外包工作什么都得听客户的，乱改需求不说，自己公司的运维根本派不上用场，连tomcat的启动报错都不知道怎么解决，让我们作为开发的去同时做开发、测试、运维、项目经理、产品的活，想想就火大。项目经理把客户电话甩给你，自己沟通去，然后自己潇洒的下班。\n  - 唉ε=(′ο｀*)))，不想再说太多了，显得自己好像太小气，都要走了还要diss前公司。但是，我觉得我是真的得走了，而且我还算是忍得时间长的。我们组，比我来得晚，比我走的早的人，超过了10个。才一年啊。作为一个刚毕业一年的程序员，真的心好累。\n\n\n\n3. #### 接下来的路少交点儿朋友，否则离开时会难受\n  > - 要走了要走了，却又感觉很难受。在这里，我接触过不少傻逼，但是也真的交到很多有趣的朋友。甚至有那种就算离职了，之后也不会断了联系的。在这个城市，原本独自一人的生活由他们，真的不会无聊。\n  - 天涯途上谁是客，散席时怎么分？ 也许有些人分开就不会再见，有些人想不见却总会出现在生活里。罢了，以后换到新的公司，不要再走心了。况且，真正值得走心的，也不会很多！\n\n###### ✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。  ——《行歌》 · 陈鸿宇\n\n","slug":"纪念即将结束的第一份工作","published":1,"updated":"2019-04-05T04:46:27.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjup2zpi8001ilcuhn1wgybca","content":"<h2 id=\"纪念即将-结束的第一份工作\"><a href=\"#纪念即将-结束的第一份工作\" class=\"headerlink\" title=\"纪念即将 结束的第一份工作\"></a>纪念<em><del>即将</del></em> 结束的第一份工作</h2><ol>\n<li><h4 id=\"我一直都不知道自己想要得到些什么东西\"><a href=\"#我一直都不知道自己想要得到些什么东西\" class=\"headerlink\" title=\"我一直都不知道自己想要得到些什么东西\"></a>我一直都不知道自己想要得到些什么东西</h4><blockquote>\n<ul>\n<li>记得高中的时候，身边不管是家人还是老师，总会时刻不停在耳边说着：你需要如何如何学习，考上一个怎样的大学，进入一个怎么样的专业，以后找一个怎样的工作。可是当我听到这些话时总是会很反感。也许是叛逆，也许是这些对于我当时都是些虚无缥缈，很遥远的东西，我没有办法理解自己得到这些东西有什么用。但是虽然忠言不入耳，我还是得按照他们说的做。还好，大学上了一个普通的理工科一本。</li>\n<li>当上了大学之后，没有了老师家长在耳边“絮叨”，更不知道自己要干什么了。记得当时参加各种社团，觉得在社团里面干的风风火火很牛逼，甚至课程都不上几节，最严重的时候好几周都不上课。浑浑噩噩的度过了大学的第一年之后，突然因为一个给学校编程培训班试听课凑人数的机会，让自动化专业的我接触到了软件开发这个方向。依然记得当时上课的老师，老范！当他用C语言在电脑上输出一串笑脸字符的时候，我当时的眼睛都亮了，我对和自己一块去凑人数的舍友说，这个人一定以后对我有很大的帮助，我一定要报名他的课程。后来真的觉得我是幸运的，老范是一个很有人格魅力的中年程序员 :) 。也是他让我知道了程序员是做什么的，也是他让我非常期待自己能够成为一个真正的软件开发者。<a id=\"more\"></a></li>\n<li>就这样我跟着老范从计算机基础，学到数据结构与算法，学计算机网络，MySQL，学习设计模式，学C++，后来又在另一个班学Java。计算机硬件方向专业的我，学完了软件专业学生要学的所有课程。终于大三，我找到了西安三星电子研究所的一份实习，写了两个月shell脚本，学习了Linux相关的知识以及自动化测试的东西，后来又在组内用PHP写了个网站，提供给大家进行会议的预定与提醒。现在想想这一切经验都是我的宝贵的财富.</li>\n<li>实习结束后，工作却找的不是很顺利，也许是自己的实习经历没有太多做Java开发的东西，导致自己没有什么实际的项目经验。后来，我来了同※※。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ol start=\"2\">\n<li><h4 id=\"或许离开这里是我最正确的选择\"><a href=\"#或许离开这里是我最正确的选择\" class=\"headerlink\" title=\"或许离开这里是我最正确的选择\"></a>或许离开这里是我最正确的选择</h4><blockquote>\n<ul>\n<li>在拿到offer来到同※※之前，我觉得我来到了一个很好的大公司。事实上这里也没有很差，除了我所在的部门。同※※是国内最早做股票交易平台的软件公司，目前也有自己的大楼，装修的也很不错，很像一个一线的大型互联网公司。然而，只是很像而已。从一件很平常的事就看得出来：每天饭点，后勤部经理就站在食堂打饭窗口对打饭的员工喊，少打一点少打一点，他们吃不完！ … …</li>\n<li>其实我刚来的时候觉得自己可以呆三年的，现在想想真的很抱歉，我得走了。并不是因为上面的“打饭”。我来到这里做的工作都是外包的，在B2B部门。我本来以为大公司的工作流程都很规范，没想到在这里刷新了我的三观哈哈。外包工作什么都得听客户的，乱改需求不说，自己公司的运维根本派不上用场，连tomcat的启动报错都不知道怎么解决，让我们作为开发的去同时做开发、测试、运维、项目经理、产品的活，想想就火大。项目经理把客户电话甩给你，自己沟通去，然后自己潇洒的下班。</li>\n<li>唉ε=(′ο｀*)))，不想再说太多了，显得自己好像太小气，都要走了还要diss前公司。但是，我觉得我是真的得走了，而且我还算是忍得时间长的。我们组，比我来得晚，比我走的早的人，超过了10个。才一年啊。作为一个刚毕业一年的程序员，真的心好累。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ol start=\"3\">\n<li><h4 id=\"接下来的路少交点儿朋友，否则离开时会难受\"><a href=\"#接下来的路少交点儿朋友，否则离开时会难受\" class=\"headerlink\" title=\"接下来的路少交点儿朋友，否则离开时会难受\"></a>接下来的路少交点儿朋友，否则离开时会难受</h4><blockquote>\n<ul>\n<li>要走了要走了，却又感觉很难受。在这里，我接触过不少傻逼，但是也真的交到很多有趣的朋友。甚至有那种就算离职了，之后也不会断了联系的。在这个城市，原本独自一人的生活由他们，真的不会无聊。</li>\n<li>天涯途上谁是客，散席时怎么分？ 也许有些人分开就不会再见，有些人想不见却总会出现在生活里。罢了，以后换到新的公司，不要再走心了。况且，真正值得走心的，也不会很多！</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。-——《行歌》-·-陈鸿宇\"><a href=\"#✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。-——《行歌》-·-陈鸿宇\" class=\"headerlink\" title=\"✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。  ——《行歌》 · 陈鸿宇\"></a>✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。  ——《行歌》 · 陈鸿宇</h6>","site":{"data":{}},"excerpt":"<h2 id=\"纪念即将-结束的第一份工作\"><a href=\"#纪念即将-结束的第一份工作\" class=\"headerlink\" title=\"纪念即将 结束的第一份工作\"></a>纪念<em><del>即将</del></em> 结束的第一份工作</h2><ol>\n<li><h4 id=\"我一直都不知道自己想要得到些什么东西\"><a href=\"#我一直都不知道自己想要得到些什么东西\" class=\"headerlink\" title=\"我一直都不知道自己想要得到些什么东西\"></a>我一直都不知道自己想要得到些什么东西</h4><blockquote>\n<ul>\n<li>记得高中的时候，身边不管是家人还是老师，总会时刻不停在耳边说着：你需要如何如何学习，考上一个怎样的大学，进入一个怎么样的专业，以后找一个怎样的工作。可是当我听到这些话时总是会很反感。也许是叛逆，也许是这些对于我当时都是些虚无缥缈，很遥远的东西，我没有办法理解自己得到这些东西有什么用。但是虽然忠言不入耳，我还是得按照他们说的做。还好，大学上了一个普通的理工科一本。</li>\n<li>当上了大学之后，没有了老师家长在耳边“絮叨”，更不知道自己要干什么了。记得当时参加各种社团，觉得在社团里面干的风风火火很牛逼，甚至课程都不上几节，最严重的时候好几周都不上课。浑浑噩噩的度过了大学的第一年之后，突然因为一个给学校编程培训班试听课凑人数的机会，让自动化专业的我接触到了软件开发这个方向。依然记得当时上课的老师，老范！当他用C语言在电脑上输出一串笑脸字符的时候，我当时的眼睛都亮了，我对和自己一块去凑人数的舍友说，这个人一定以后对我有很大的帮助，我一定要报名他的课程。后来真的觉得我是幸运的，老范是一个很有人格魅力的中年程序员 :) 。也是他让我知道了程序员是做什么的，也是他让我非常期待自己能够成为一个真正的软件开发者。","more":"</li>\n<li>就这样我跟着老范从计算机基础，学到数据结构与算法，学计算机网络，MySQL，学习设计模式，学C++，后来又在另一个班学Java。计算机硬件方向专业的我，学完了软件专业学生要学的所有课程。终于大三，我找到了西安三星电子研究所的一份实习，写了两个月shell脚本，学习了Linux相关的知识以及自动化测试的东西，后来又在组内用PHP写了个网站，提供给大家进行会议的预定与提醒。现在想想这一切经验都是我的宝贵的财富.</li>\n<li>实习结束后，工作却找的不是很顺利，也许是自己的实习经历没有太多做Java开发的东西，导致自己没有什么实际的项目经验。后来，我来了同※※。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ol start=\"2\">\n<li><h4 id=\"或许离开这里是我最正确的选择\"><a href=\"#或许离开这里是我最正确的选择\" class=\"headerlink\" title=\"或许离开这里是我最正确的选择\"></a>或许离开这里是我最正确的选择</h4><blockquote>\n<ul>\n<li>在拿到offer来到同※※之前，我觉得我来到了一个很好的大公司。事实上这里也没有很差，除了我所在的部门。同※※是国内最早做股票交易平台的软件公司，目前也有自己的大楼，装修的也很不错，很像一个一线的大型互联网公司。然而，只是很像而已。从一件很平常的事就看得出来：每天饭点，后勤部经理就站在食堂打饭窗口对打饭的员工喊，少打一点少打一点，他们吃不完！ … …</li>\n<li>其实我刚来的时候觉得自己可以呆三年的，现在想想真的很抱歉，我得走了。并不是因为上面的“打饭”。我来到这里做的工作都是外包的，在B2B部门。我本来以为大公司的工作流程都很规范，没想到在这里刷新了我的三观哈哈。外包工作什么都得听客户的，乱改需求不说，自己公司的运维根本派不上用场，连tomcat的启动报错都不知道怎么解决，让我们作为开发的去同时做开发、测试、运维、项目经理、产品的活，想想就火大。项目经理把客户电话甩给你，自己沟通去，然后自己潇洒的下班。</li>\n<li>唉ε=(′ο｀*)))，不想再说太多了，显得自己好像太小气，都要走了还要diss前公司。但是，我觉得我是真的得走了，而且我还算是忍得时间长的。我们组，比我来得晚，比我走的早的人，超过了10个。才一年啊。作为一个刚毕业一年的程序员，真的心好累。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ol start=\"3\">\n<li><h4 id=\"接下来的路少交点儿朋友，否则离开时会难受\"><a href=\"#接下来的路少交点儿朋友，否则离开时会难受\" class=\"headerlink\" title=\"接下来的路少交点儿朋友，否则离开时会难受\"></a>接下来的路少交点儿朋友，否则离开时会难受</h4><blockquote>\n<ul>\n<li>要走了要走了，却又感觉很难受。在这里，我接触过不少傻逼，但是也真的交到很多有趣的朋友。甚至有那种就算离职了，之后也不会断了联系的。在这个城市，原本独自一人的生活由他们，真的不会无聊。</li>\n<li>天涯途上谁是客，散席时怎么分？ 也许有些人分开就不会再见，有些人想不见却总会出现在生活里。罢了，以后换到新的公司，不要再走心了。况且，真正值得走心的，也不会很多！</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。-——《行歌》-·-陈鸿宇\"><a href=\"#✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。-——《行歌》-·-陈鸿宇\" class=\"headerlink\" title=\"✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。  ——《行歌》 · 陈鸿宇\"></a>✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。  ——《行歌》 · 陈鸿宇</h6>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjup2zph30002lcuhsma54yeb","category_id":"cjup2zphb0006lcuh531p7efb","_id":"cjup2zphm000ilcuhn7st3cvc"},{"post_id":"cjup2zphj000glcuhazdeawpm","category_id":"cjup2zphi000dlcuh81f2ylqh","_id":"cjup2zphr000olcuh18ci96ll"},{"post_id":"cjup2zph80004lcuhrswam5fg","category_id":"cjup2zphi000dlcuh81f2ylqh","_id":"cjup2zpht000tlcuh4w3bv5av"},{"post_id":"cjup2zphd0008lcuh5vgttsbj","category_id":"cjup2zphm000jlcuhu39s3brx","_id":"cjup2zphv000vlcuh3q668yil"},{"post_id":"cjup2zphf000alcuh2q09gbvd","category_id":"cjup2zphs000rlcuhn8170ez2","_id":"cjup2zpi00013lcuh1ng1lral"},{"post_id":"cjup2zphh000clcuhvl64ci7i","category_id":"cjup2zphi000dlcuh81f2ylqh","_id":"cjup2zpi30017lcuhf9n5xszf"},{"post_id":"cjup2zpi00015lcuh90i1p8jc","category_id":"cjup2zphi000dlcuh81f2ylqh","_id":"cjup2zpi6001dlcuhz1332jd6"},{"post_id":"cjup2zphl000hlcuhdslvkmwu","category_id":"cjup2zphz0012lcuhmqiwiejg","_id":"cjup2zpi7001flcuhfniwjipx"},{"post_id":"cjup2zphq000nlcuhev5gw3lc","category_id":"cjup2zpi40019lcuh93zhpq67","_id":"cjup2zpia001llcuhnm2f8z8f"},{"post_id":"cjup2zpi8001ilcuhn1wgybca","category_id":"cjup2zpi40019lcuh93zhpq67","_id":"cjup2zpib001plcuhqan4hha3"},{"post_id":"cjup2zphs000slcuh2i87uy33","category_id":"cjup2zpi8001glcuhnt7xkujj","_id":"cjup2zpic001slcuhbjue6ljg"},{"post_id":"cjup2zphu000ulcuh23o2svac","category_id":"cjup2zpi40019lcuh93zhpq67","_id":"cjup2zpid001ulcuh1zfbh9v5"},{"post_id":"cjup2zphw000ylcuh8e7zat31","category_id":"cjup2zpic001qlcuh76h55yqy","_id":"cjup2zpif001zlcuhb90rrg8o"},{"post_id":"cjup2zphy0010lcuhnlle54eh","category_id":"cjup2zpi8001glcuhnt7xkujj","_id":"cjup2zpig0021lcuhhl94l831"},{"post_id":"cjup2zpi20016lcuhe97142h8","category_id":"cjup2zpif001ylcuh3xc98qu6","_id":"cjup2zpii0026lcuhlrlgz71z"},{"post_id":"cjup2zpi30018lcuhdo79s0m1","category_id":"cjup2zpi40019lcuh93zhpq67","_id":"cjup2zpij002alcuh2qds3ram"},{"post_id":"cjup2zpi5001clcuhhhomvxcd","category_id":"cjup2zpii0025lcuh1yt8ywmq","_id":"cjup2zpil002elcuhlk4jhnb4"},{"post_id":"cjup2zpi6001elcuhaqfr6ih2","category_id":"cjup2zpij002blcuh1fc03kgs","_id":"cjup2zpim002hlcuhua4yngis"}],"PostTag":[{"post_id":"cjup2zph30002lcuhsma54yeb","tag_id":"cjup2zphc0007lcuhmba6n97q","_id":"cjup2zphq000mlcuhvcq3jubv"},{"post_id":"cjup2zph30002lcuhsma54yeb","tag_id":"cjup2zphi000elcuhujcqkqj2","_id":"cjup2zphr000plcuh1f8gp324"},{"post_id":"cjup2zph80004lcuhrswam5fg","tag_id":"cjup2zphc0007lcuhmba6n97q","_id":"cjup2zphy000zlcuhqj9bhu5s"},{"post_id":"cjup2zph80004lcuhrswam5fg","tag_id":"cjup2zphs000qlcuh8vx936q4","_id":"cjup2zphz0011lcuhgfugteyd"},{"post_id":"cjup2zpi20016lcuhe97142h8","tag_id":"cjup2zphc0007lcuhmba6n97q","_id":"cjup2zpi5001blcuh5uvxtqfh"},{"post_id":"cjup2zphd0008lcuh5vgttsbj","tag_id":"cjup2zphv000wlcuh8txi5vlu","_id":"cjup2zpi9001jlcuhdra269cn"},{"post_id":"cjup2zphd0008lcuh5vgttsbj","tag_id":"cjup2zpi00014lcuhf8g5r8gf","_id":"cjup2zpia001klcuhnn6kkmar"},{"post_id":"cjup2zphd0008lcuh5vgttsbj","tag_id":"cjup2zpi4001alcuhsypjlldi","_id":"cjup2zpib001olcuhj05rc0wb"},{"post_id":"cjup2zphf000alcuh2q09gbvd","tag_id":"cjup2zpi8001hlcuhz48j65p9","_id":"cjup2zpid001tlcuhrubxcer2"},{"post_id":"cjup2zphf000alcuh2q09gbvd","tag_id":"cjup2zpia001nlcuh6g0zve4e","_id":"cjup2zpid001vlcuhwfa5n234"},{"post_id":"cjup2zphh000clcuhvl64ci7i","tag_id":"cjup2zphc0007lcuhmba6n97q","_id":"cjup2zpih0024lcuhj0f1amj1"},{"post_id":"cjup2zphh000clcuhvl64ci7i","tag_id":"cjup2zpic001rlcuhxvmf3ysr","_id":"cjup2zpii0027lcuhzk2xl0zc"},{"post_id":"cjup2zphh000clcuhvl64ci7i","tag_id":"cjup2zpie001xlcuh6k0a9ugv","_id":"cjup2zpij0029lcuhq78dcxl7"},{"post_id":"cjup2zphh000clcuhvl64ci7i","tag_id":"cjup2zpif0020lcuhiuh8p3ov","_id":"cjup2zpik002clcuhphxwdtyg"},{"post_id":"cjup2zphj000glcuhazdeawpm","tag_id":"cjup2zphv000wlcuh8txi5vlu","_id":"cjup2zpim002glcuh742svk37"},{"post_id":"cjup2zphj000glcuhazdeawpm","tag_id":"cjup2zpii0028lcuhtmowuigx","_id":"cjup2zpim002ilcuhrv2b9wdw"},{"post_id":"cjup2zphj000glcuhazdeawpm","tag_id":"cjup2zpik002dlcuho19a5yg5","_id":"cjup2zpin002klcuhonnj71l7"},{"post_id":"cjup2zphl000hlcuhdslvkmwu","tag_id":"cjup2zphv000wlcuh8txi5vlu","_id":"cjup2zpin002llcuhbxxydu49"},{"post_id":"cjup2zphq000nlcuhev5gw3lc","tag_id":"cjup2zpim002jlcuh14he5q81","_id":"cjup2zpio002nlcuh8v6vob21"},{"post_id":"cjup2zphs000slcuh2i87uy33","tag_id":"cjup2zphc0007lcuhmba6n97q","_id":"cjup2zpip002qlcuh6hl8mmvj"},{"post_id":"cjup2zphs000slcuh2i87uy33","tag_id":"cjup2zpin002mlcuhfrt35lvt","_id":"cjup2zpiq002rlcuhedoqe00z"},{"post_id":"cjup2zphs000slcuh2i87uy33","tag_id":"cjup2zpio002olcuhc33ugfiy","_id":"cjup2zpiq002tlcuhdz2u7pwt"},{"post_id":"cjup2zphu000ulcuh23o2svac","tag_id":"cjup2zpim002jlcuh14he5q81","_id":"cjup2zpis002xlcuhgd7mnwci"},{"post_id":"cjup2zphu000ulcuh23o2svac","tag_id":"cjup2zpiq002slcuhc0oj6zdk","_id":"cjup2zpit002ylcuh9i65rtg6"},{"post_id":"cjup2zphu000ulcuh23o2svac","tag_id":"cjup2zpir002ulcuhp8phv430","_id":"cjup2zpiu0030lcuhhbu4zbyt"},{"post_id":"cjup2zphu000ulcuh23o2svac","tag_id":"cjup2zpir002vlcuhfnxgsiou","_id":"cjup2zpiu0031lcuhtenxs0ie"},{"post_id":"cjup2zphw000ylcuh8e7zat31","tag_id":"cjup2zphv000wlcuh8txi5vlu","_id":"cjup2zpiu0033lcuhhbw7wcto"},{"post_id":"cjup2zphw000ylcuh8e7zat31","tag_id":"cjup2zpis002wlcuhqy6cj91g","_id":"cjup2zpiv0034lcuhze6lgbuy"},{"post_id":"cjup2zphy0010lcuhnlle54eh","tag_id":"cjup2zpit002zlcuhyxkxdzi2","_id":"cjup2zpiw0036lcuh5otj8mxh"},{"post_id":"cjup2zphy0010lcuhnlle54eh","tag_id":"cjup2zphc0007lcuhmba6n97q","_id":"cjup2zpiw0037lcuhncm1q0jw"},{"post_id":"cjup2zphy0010lcuhnlle54eh","tag_id":"cjup2zpiu0032lcuh1k7r4u0h","_id":"cjup2zpix0039lcuhdishi1os"},{"post_id":"cjup2zpi00015lcuh90i1p8jc","tag_id":"cjup2zpi00014lcuhf8g5r8gf","_id":"cjup2zpix003alcuhj7i4s4tx"},{"post_id":"cjup2zpi00015lcuh90i1p8jc","tag_id":"cjup2zphc0007lcuhmba6n97q","_id":"cjup2zpiy003clcuh41fx1az8"},{"post_id":"cjup2zpi30018lcuhdo79s0m1","tag_id":"cjup2zpix0038lcuht0s25rfp","_id":"cjup2zpiz003elcuh19ru6aag"},{"post_id":"cjup2zpi30018lcuhdo79s0m1","tag_id":"cjup2zpiy003blcuhh7f5ozpb","_id":"cjup2zpj0003flcuhvvqjy1fh"},{"post_id":"cjup2zpi5001clcuhhhomvxcd","tag_id":"cjup2zpiy003blcuhh7f5ozpb","_id":"cjup2zpj0003hlcuhsu94ez8e"},{"post_id":"cjup2zpi6001elcuhaqfr6ih2","tag_id":"cjup2zphc0007lcuhmba6n97q","_id":"cjup2zpj1003jlcuhe0jkhcfj"},{"post_id":"cjup2zpi6001elcuhaqfr6ih2","tag_id":"cjup2zpj0003glcuhhk6kzmyr","_id":"cjup2zpj1003klcuhj7707apt"},{"post_id":"cjup2zpi8001ilcuhn1wgybca","tag_id":"cjup2zpim002jlcuh14he5q81","_id":"cjup2zpj1003llcuhcnuahg6k"}],"Tag":[{"name":"开发日记","_id":"cjup2zphc0007lcuhmba6n97q"},{"name":"hexo","_id":"cjup2zphi000elcuhujcqkqj2"},{"name":"Java基础","_id":"cjup2zphs000qlcuh8vx936q4"},{"name":"springboot","_id":"cjup2zphv000wlcuh8txi5vlu"},{"name":"dubbo","_id":"cjup2zpi00014lcuhf8g5r8gf"},{"name":"分布式服务降级","_id":"cjup2zpi4001alcuhsypjlldi"},{"name":"leetcode","_id":"cjup2zpi8001hlcuhz48j65p9"},{"name":"算法题解","_id":"cjup2zpia001nlcuh6g0zve4e"},{"name":"freemarker","_id":"cjup2zpic001rlcuhxvmf3ysr"},{"name":"工厂模式","_id":"cjup2zpie001xlcuh6k0a9ugv"},{"name":"layui","_id":"cjup2zpif0020lcuhiuh8p3ov"},{"name":"shiro","_id":"cjup2zpii0028lcuhtmowuigx"},{"name":"session污染","_id":"cjup2zpik002dlcuho19a5yg5"},{"name":"程序人生","_id":"cjup2zpim002jlcuh14he5q81"},{"name":"工作技巧","_id":"cjup2zpin002mlcuhfrt35lvt"},{"name":"nodepad++","_id":"cjup2zpio002olcuhc33ugfiy"},{"name":"实习","_id":"cjup2zpiq002slcuhc0oj6zdk"},{"name":"三星","_id":"cjup2zpir002ulcuhp8phv430"},{"name":"shell自动化测试","_id":"cjup2zpir002vlcuhfnxgsiou"},{"name":"国际化","_id":"cjup2zpis002wlcuhqy6cj91g"},{"name":"IDEA","_id":"cjup2zpit002zlcuhyxkxdzi2"},{"name":"git","_id":"cjup2zpiu0032lcuh1k7r4u0h"},{"name":"面试经历","_id":"cjup2zpix0038lcuht0s25rfp"},{"name":"个人随笔","_id":"cjup2zpiy003blcuhh7f5ozpb"},{"name":"MySql","_id":"cjup2zpj0003glcuhhk6kzmyr"}]}}