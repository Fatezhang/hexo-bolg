<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈年风楼 | 博客</title>
  
  <subtitle>当你看到了一座山，一定会想再看看山的后面是什么！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangjiaheng.cn/"/>
  <updated>2019-05-11T13:05:40.677Z</updated>
  <id>http://zhangjiaheng.cn/</id>
  
  <author>
    <name>陈年风楼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你的内心比拳头更强大</title>
    <link href="http://zhangjiaheng.cn/blog/20190509/%E4%BD%A0%E7%9A%84%E5%86%85%E5%BF%83%E6%AF%94%E6%8B%B3%E5%A4%B4%E6%9B%B4%E5%BC%BA%E5%A4%A7/"/>
    <id>http://zhangjiaheng.cn/blog/20190509/你的内心比拳头更强大/</id>
    <published>2019-05-09T15:37:36.000Z</published>
    <updated>2019-05-11T13:05:40.677Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">加密博客请输入密码访问</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      最近真的很不开心，将烦躁的感受记录下来吧~
    
    </summary>
    
      <category term="个人随笔" scheme="http://zhangjiaheng.cn/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="个人随笔" scheme="http://zhangjiaheng.cn/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用[幕布]创建Java知识体系思维导图</title>
    <link href="http://zhangjiaheng.cn/blog/20190507/%E4%BD%BF%E7%94%A8-%E5%B9%95%E5%B8%83-%E5%88%9B%E5%BB%BAJava%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://zhangjiaheng.cn/blog/20190507/使用-幕布-创建Java知识体系思维导图/</id>
    <published>2019-05-07T11:24:43.000Z</published>
    <updated>2019-05-07T14:05:50.990Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/20190507/使用-幕布-创建Java知识体系思维导图/java_core.png" alt="Java思维导图"></p><a id="more"></a><p><strong>昨天在V2EX上逛的时候突然发现有人推荐一个很不错的东西——幕布。我本身就是一个对一些名称很敏感的人，看到这个名字就很想知道这到底是个什么东西，没想到竟偶然发现这么一个好东西。</strong></p><p>幕布是一个制作笔记与记录事件的文本编辑工具（这样说要把幕布开发者气死了哈哈）。编辑视图如下：<br><img src="/blog/20190507/使用-幕布-创建Java知识体系思维导图/mb.png" alt="幕布"><br>一键转换成思维导图就是本文最上面的那个图片。</p><p>其实我个人是比较喜欢幕布的一键转换思维导图的功能，以及它的导出.mm文件的功能，而且可以自动同步云端。这样就可以随时随地无论是在电脑还是手机上都可以打开来编辑以及查看了。</p><p>这里是我自己编写的<a href="https://mubu.com/doc/hpBd1e5h6z" target="_blank" rel="noopener">Java知识体系</a>，还没有写的很完整。希望自己能够坚持不断更新知识点，总结与巩固自己的技术水平！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/20190507/使用-幕布-创建Java知识体系思维导图/java_core.png&quot; alt=&quot;Java思维导图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://zhangjiaheng.cn/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="http://zhangjiaheng.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树与完全二叉树</title>
    <link href="http://zhangjiaheng.cn/blog/20190504/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://zhangjiaheng.cn/blog/20190504/二叉搜索树与完全二叉树/</id>
    <published>2019-05-04T02:29:36.000Z</published>
    <updated>2019-05-10T16:07:37.371Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是二叉树？"><a href="#什么是二叉树？" class="headerlink" title="什么是二叉树？"></a>什么是二叉树？</h4><p>在数据结构中，对于树，每一个分支，称之为一个度。那么，度最大为2的树我们称之为二叉树。通常子树我们会称之为左子树和右子树。二叉树通常用于实现二叉查找树和二叉堆。那么在Java中如何定义一个二叉树节点？</p><p>首先，每一个节点需要有一个值域。其次，其还应该持有两个树节点的引用，即指向自己的左子树和自己的右子树。</p><a id="more"></a><p>具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class TreeNode &#123;</span><br><span class="line">    int val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode() &#123;</span><br><span class="line">        this.val = 0;</span><br><span class="line">        this.left = null;</span><br><span class="line">        this.right = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode(int val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line">        this.left = null;</span><br><span class="line">        this.right = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;(&quot; + val + &quot;)[left:&quot; + left + &quot;,right:&quot; + right + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="如何创建二叉树"><a href="#如何创建二叉树" class="headerlink" title="如何创建二叉树"></a>如何创建二叉树</h4><p>二叉树的节点的数据结构已经用Java代码表示出来了，那么如何用这些节点来构造出一个完整的二叉树呢？请看下图二叉树的结构：</p><p><img src="/blog/20190504/二叉搜索树与完全二叉树/ecs.png" alt="二叉树结构"></p><p>如上图，对于一个二叉树，需要有一个根节点。每个节点最多有两课子树，分别区分左子树还是右子树。即就算有一个子树，还是需要区分是左子树还是右子树。创建二叉树我们只需要将每一个树节点按照这样的规则连接起来即可。</p><h5 id="创建二叉搜索树"><a href="#创建二叉搜索树" class="headerlink" title="创建二叉搜索树"></a>创建二叉搜索树</h5><ul><li>概念：二叉搜索树，又叫二叉查找树。他是一棵特殊的二叉树，对于二叉搜索树中的每一个节点，它的左子树都不大于父节点，右子树都不小于父节点。空树是特殊的二叉搜索树。</li><li><p>创建：本例根据一个已有的数组进行二叉树的创建，基本的思路就是遍历数组，每个元素创建一个树节点，然后继续根据节点值得大小向下遍历判断，最后将值域小的放在节点的左子树，将值大的放在节点的右子树即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public static TreeNode createSearchTree(int[] a) &#123;</span><br><span class="line">    if (a.length &gt; 0) &#123;</span><br><span class="line">        TreeNode root = new TreeNode(a[0]);</span><br><span class="line">        for (int i = 1; i &lt; a.length; i++) &#123;</span><br><span class="line">            TreeNode c = root;</span><br><span class="line">            TreeNode p = c;</span><br><span class="line">            TreeNode q = new TreeNode(a[i]);</span><br><span class="line">            while (c != null) &#123;</span><br><span class="line">                p = c;</span><br><span class="line">                if (a[i] &lt;= c.val) &#123;</span><br><span class="line">                    c = c.left;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    c = c.right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (q.val &lt; p.val) &#123;</span><br><span class="line">                p.left = q;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                p.right = q;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>特点：二叉搜索树在应用于经常查找元素的场景效率会比较快，因为它的数据结构类似于二分查找，查找元素时根据其特性向下搜索即可。</p></li></ul><h5 id="创建完全二叉树"><a href="#创建完全二叉树" class="headerlink" title="创建完全二叉树"></a>创建完全二叉树</h5><ul><li><p>概念：首先介绍一下满二叉树：即树中的所有节点除了叶节点都有左子树和右子树，叶节点的左右子树都为空，这样的树称之为满二叉树。而对于一棵完全二叉树，只有树的最后一层连续缺失右边节点。满二叉树一定是完全二叉树，反之则不一定成立。如图分别是一棵满二叉树和一棵完全二叉树：<br><img src="/blog/20190504/二叉搜索树与完全二叉树/mecs.png" alt="满二叉树"><br><img src="/blog/20190504/二叉搜索树与完全二叉树/wqecs.png" alt="完全二叉树"></p></li><li><p>创建： 完全二叉树的创建需要按层去创建。这边我们借助队列的特点，将二叉树的节点连接起来，构造成完全二叉树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static TreeNode createWholeTree(int[] a) &#123;</span><br><span class="line">        if (a.length &gt; 0) &#123;</span><br><span class="line">            LinkedList&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">            TreeNode root = new TreeNode(a[0]);</span><br><span class="line">            queue.add(root);</span><br><span class="line">            int index = 0;</span><br><span class="line">            for (int i = 1; i &lt; a.length; i++) &#123;</span><br><span class="line">                TreeNode curn = queue.get(index);</span><br><span class="line">                TreeNode ti = new TreeNode(a[i]);</span><br><span class="line">                queue.add(ti);</span><br><span class="line">                if (curn.left == null) &#123;</span><br><span class="line">                    curn.left = ti;</span><br><span class="line">                &#125; else if (curn.right == null) &#123;</span><br><span class="line">                    curn.right = ti;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return root;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>特点：对于一个h层的完全二叉树，前h-1层是满的，第h层连续缺失右边节点。所以叶子结点只能出现在最下层和次下层，最下层的叶子结点集中在树的左部，倒数第二层若存在叶子结点，一定在右部连续位置，如果结点度为1，则该结点只有左孩子，即没有右子树，同样结点数目的二叉树，完全二叉树深度最小。</p></li></ul><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><ul><li><p>前中后序递归遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 递归先序遍历二叉树 左-根-右</span><br><span class="line"> */</span><br><span class="line">public static void frontPrintOutTree(TreeNode root) &#123;</span><br><span class="line">    if (null != root) &#123;</span><br><span class="line">        System.out.print(root.val);</span><br><span class="line">        frontPrintOutTree(root.left);</span><br><span class="line">        frontPrintOutTree(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 递归中序遍历二叉树 左-根-右</span><br><span class="line"> */</span><br><span class="line">public static void midPrintOutTree(TreeNode root) &#123;</span><br><span class="line">    if (null != root) &#123;</span><br><span class="line">        midPrintOutTree(root.left);</span><br><span class="line">        System.out.print(root.val);</span><br><span class="line">        midPrintOutTree(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 递归先序遍历二叉树 左-根-右</span><br><span class="line"> */</span><br><span class="line">public static void lastPrintOutTree(TreeNode root) &#123;</span><br><span class="line">    if (null != root) &#123;</span><br><span class="line">        lastPrintOutTree(root.left);</span><br><span class="line">        lastPrintOutTree(root.right);</span><br><span class="line">        System.out.print(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>按层遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 按层遍历二叉树</span><br><span class="line"> */</span><br><span class="line">public static void levelPrintOutTree(TreeNode root) &#123;</span><br><span class="line">    if (null != root) &#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        TreeNode i = root;</span><br><span class="line">        while (!queue.isEmpty()) &#123;</span><br><span class="line">            if (i.left != null) &#123;</span><br><span class="line">                queue.add(i.left);</span><br><span class="line">            &#125;</span><br><span class="line">            if (i.right != null) &#123;</span><br><span class="line">                queue.add(i.right);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(i.val);</span><br><span class="line">            queue.poll();</span><br><span class="line">            i = queue.peek();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="以上代码的github地址：GITHUB地址"><a href="#以上代码的github地址：GITHUB地址" class="headerlink" title="以上代码的github地址：GITHUB地址"></a>以上代码的github地址：<a href="https://github.com/Fatezhang/DataStructureAndAlgorithm/tree/master/src/main/java/DataStructure/Tree" target="_blank" rel="noopener">GITHUB地址</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是二叉树？&quot;&gt;&lt;a href=&quot;#什么是二叉树？&quot; class=&quot;headerlink&quot; title=&quot;什么是二叉树？&quot;&gt;&lt;/a&gt;什么是二叉树？&lt;/h4&gt;&lt;p&gt;在数据结构中，对于树，每一个分支，称之为一个度。那么，度最大为2的树我们称之为二叉树。通常子树我们会称之为左子树和右子树。二叉树通常用于实现二叉查找树和二叉堆。那么在Java中如何定义一个二叉树节点？&lt;/p&gt;
&lt;p&gt;首先，每一个节点需要有一个值域。其次，其还应该持有两个树节点的引用，即指向自己的左子树和自己的右子树。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://zhangjiaheng.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://zhangjiaheng.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="http://zhangjiaheng.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>如何在springboot服务启动之后执行一些代码(三种方式)</title>
    <link href="http://zhangjiaheng.cn/blog/20190419/%E5%A6%82%E4%BD%95%E5%9C%A8springboot%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B9%8B%E5%90%8E%E6%89%A7%E8%A1%8C%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81(%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F)/"/>
    <id>http://zhangjiaheng.cn/blog/20190419/如何在springboot服务启动之后执行一些代码(三种方式)/</id>
    <published>2019-04-19T09:01:21.000Z</published>
    <updated>2019-04-23T13:10:39.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  通常的我们的项目开发中，经常会遇到那种在服务一启动就需要自动执行一些业务代码的情况。比如将数据库中的配置信息或者数据字典之类的缓存到redis，或者在服务启动的时候将一些配置化的定时任务开起来。关于spring mvc或者springboot如何在项目启动的时候就执行一些代码，方法其实有很多，我这边介绍一下我使用过的三种。</p>  <a id="more"></a><h4 id="1、-PostConstruct-注解"><a href="#1、-PostConstruct-注解" class="headerlink" title="1、@PostConstruct 注解"></a>1、<code>@PostConstruct</code> 注解</h4><p>从Java EE5规范开始，Servlet中增加了两个影响Servlet生命周期的注解，<code>@PostConstruct</code>和<code>@PreDestroy</code>，这两个注解被用来修饰一个非静态的void（）方法。<code>@PostConstruct</code>会在所在类的构造函数执行之后执行，在init()方法执行之前执行。(<code>@PreDestroy</code>注解的方法会在这个类的destory()方法执行之后执行。)</p><ul><li>使用示例：在Spring容器加载之后，我需要启动定时任务去做任务的处理（我的定时任务采用的是读取数据库配置的方式）。在这里我使用<code>@PostConstruct</code> 指定了需要启动的方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Component // 注意 这里必须有</span><br><span class="line">public class StartAllJobInit &#123;</span><br><span class="line"></span><br><span class="line">    protected Logger logger = LoggerFactory.getLogger(getClass().getName());</span><br><span class="line">    @Autowired</span><br><span class="line">    JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    JobTaskUtil jobTaskUtil;</span><br><span class="line"></span><br><span class="line">    @PostConstruct // 构造函数之后执行</span><br><span class="line">    public void init()&#123;</span><br><span class="line">        System.out.println(&quot;容器启动后执行&quot;);</span><br><span class="line">        startJob();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void startJob() &#123;</span><br><span class="line">        List&lt;JobInfoBO&gt; list = jobInfoService.findList();</span><br><span class="line">        for (JobInfoBO jobinfo :list) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if(&quot;0&quot;.equals(jobinfo.getStartWithrun()))&#123;</span><br><span class="line">                    logger.info(&quot;任务&#123;&#125;未设置自动启动。&quot;, jobinfo.getJobName());</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STOP);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    logger.info(&quot;任务&#123;&#125;设置了自动启动。&quot;, jobinfo.getJobName());</span><br><span class="line">                    jobTaskUtil.addOrUpdateJob(jobinfo);</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STARTING);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SchedulerException e) &#123;</span><br><span class="line">                logger.error(&quot;执行定时任务出错，任务名称 &#123;&#125; &quot;, jobinfo.getJobName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、实现CommandLineRunner接口并重写run-方法"><a href="#2、实现CommandLineRunner接口并重写run-方法" class="headerlink" title="2、实现CommandLineRunner接口并重写run()方法"></a>2、实现<code>CommandLineRunner</code>接口并重写run()方法</h4><p><code>CommandLineRunner</code>接口文档描述如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Interface used to indicate that a bean should &lt;em&gt;run&lt;/em&gt; when it is contained within</span><br><span class="line"> * a &#123;@link SpringApplication&#125;. Multiple &#123;@link CommandLineRunner&#125; beans can be defined</span><br><span class="line"> * within the same application context and can be ordered using the &#123;@link Ordered&#125;</span><br><span class="line"> * interface or &#123;@link Order @Order&#125; annotation.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * If you need access to &#123;@link ApplicationArguments&#125; instead of the raw String array</span><br><span class="line"> * consider using &#123;@link ApplicationRunner&#125;.</span><br><span class="line"> *</span><br><span class="line"> * @author Dave Syer</span><br><span class="line"> * @see ApplicationRunner</span><br><span class="line"> */</span><br><span class="line">public interface CommandLineRunner &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Callback used to run the bean.</span><br><span class="line"> * @param args incoming main method arguments</span><br><span class="line"> * @throws Exception on error</span><br><span class="line"> */</span><br><span class="line">void run(String... args) throws Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上所说：接口被用作加入Spring容器中时执行run(String… args)方法，通过命令行传递参数。SpringBoot在项目启动后会遍历所有实现CommandLineRunner的实体类并执行run方法，多个实现类可以并存并且根据order注解排序顺序执行。这边还有个<code>ApplicationRunner</code>接口，但是接收参数是使用的<code>ApplicationArguments</code>。这边不再赘述。</p><p><strong>同样是启动时执行定时任务，使用这种方式我的写法如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Component // 注意 这里必须有</span><br><span class="line">//@Order(2) 如果有多个类需要启动后执行 order注解中的值为启动的顺序</span><br><span class="line">public class StartAllJobInit implements CommandLineRunner &#123;</span><br><span class="line"></span><br><span class="line">    protected Logger logger = LoggerFactory.getLogger(getClass().getName());</span><br><span class="line">    @Autowired</span><br><span class="line">    JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    JobTaskUtil jobTaskUtil;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run(String... args) &#123;</span><br><span class="line">        List&lt;JobInfoBO&gt; list = jobInfoService.findList();</span><br><span class="line">        for (JobInfoBO jobinfo :list) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if(&quot;0&quot;.equals(jobinfo.getStartWithrun()))&#123;</span><br><span class="line">                    logger.info(&quot;任务&#123;&#125;未设置自动启动。&quot;, jobinfo.getJobName());</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STOP);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    logger.info(&quot;任务&#123;&#125;设置了自动启动。&quot;, jobinfo.getJobName());</span><br><span class="line">                    jobTaskUtil.addOrUpdateJob(jobinfo);</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STARTING);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SchedulerException e) &#123;</span><br><span class="line">                logger.error(&quot;执行定时任务出错，任务名称 &#123;&#125; &quot;, jobinfo.getJobName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、使用ContextRefreshedEvent事件-上下文件刷新事件"><a href="#3、使用ContextRefreshedEvent事件-上下文件刷新事件" class="headerlink" title="3、使用ContextRefreshedEvent事件(上下文件刷新事件)"></a>3、使用<code>ContextRefreshedEvent</code>事件(上下文件刷新事件)</h4><blockquote><p>ContextRefreshedEvent 官方在接口上的doc说明<br><br>Event raised when an {@code ApplicationContext} gets initialized or refreshed.</p></blockquote><p>ContextRefreshedEvent是Spring的ApplicationContextEvent一个实现，ContextRefreshedEvent 事件会在Spring容器初始化完成后以及刷新时触发。</p><p><strong>在这里我需要在springboot程序启动之后加载配置信息和字典信息到Redis缓存中去，我可以这样写：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Component // 注意 这个也是必须有的注解 三种都需要 使spring扫描到这个类并交给它管理</span><br><span class="line">public class InitRedisCache implements ApplicationListener&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line">    static final Logger logger = LoggerFactory</span><br><span class="line">            .getLogger(InitRedisCache.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SysConfigService sysConfigService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SysDictService sysDictService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) &#123;</span><br><span class="line">        logger.info(&quot;-------加载配置信息 start-------&quot;);</span><br><span class="line">        sysConfigService.loadConfigIntoRedis();</span><br><span class="line">        logger.info(&quot;-------加载配置信息 end-------&quot;);</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;-------加载字典信息 start-------&quot;);</span><br><span class="line">        sysDictService.loadDictIntoRedis();</span><br><span class="line">        logger.info(&quot;-------加载字典信息 end-------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这种方式在springmvc-spring的项目中使用的时候会出现执行两次的情况。这种是因为在加载spring和springmvc的时候会创建两个容器，都会触发这个事件的执行。这时候只需要在<code>onApplicationEvent</code>方法中判断是否有父容器即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override  </span><br><span class="line">  public void onApplicationEvent(ContextRefreshedEvent event) &#123;  </span><br><span class="line">      if(event.getApplicationContext().getParent() == null)&#123;//root application context 没有parent，他就是老大.  </span><br><span class="line">           //需要执行的逻辑代码，当spring容器初始化完成后就会执行该方法。  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上，就是我在实际开发中常用的三种，在项目启动时执行代码的方式，开发者可以根据不同的使用情况选择合适的方法去执行自己的业务逻辑。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;  通常的我们的项目开发中，经常会遇到那种在服务一启动就需要自动执行一些业务代码的情况。比如将数据库中的配置信息或者数据字典之类的缓存到redis，或者在服务启动的时候将一些配置化的定时任务开起来。关于spring mvc或者springboot如何在项目启动的时候就执行一些代码，方法其实有很多，我这边介绍一下我使用过的三种。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/tags/springboot/"/>
    
      <category term="spring" scheme="http://zhangjiaheng.cn/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Java内存分配与垃圾回收的复习整理</title>
    <link href="http://zhangjiaheng.cn/blog/20190414/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9A%84%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <id>http://zhangjiaheng.cn/blog/20190414/Java内存分配与垃圾回收的复习整理/</id>
    <published>2019-04-14T13:18:36.000Z</published>
    <updated>2019-05-07T16:10:27.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/20190414/Java内存分配与垃圾回收的复习整理/zy.png" alt="摘要"></p><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>众所周知Java作为一个“一次编译，到处运行”的编译型语言，JVM虚拟机当之无愧的是Java语言世界的先锋将军。作为一个Java程序员，JVM虚拟机其相关知识是我们必须要了解以及深入掌握的重点。在本篇博客我将总结一下JVM虚拟机的内存结构、对象内存分配以及垃圾回收算法。这也是经常找工作求职必问的点。</p><a id="more"></a><h4 id="Java内存区域划分"><a href="#Java内存区域划分" class="headerlink" title="Java内存区域划分"></a>Java内存区域划分</h4><p>Java虚拟机在执行Java程序的过程中会将它所管理的内存划分为若干个不同的区域。每个区域各司其职，其创建与销毁数据的规则也都各不相同。根据《Java虚拟机规范（Java SE 7版）》的规定，主要分为如下图几个区域。</p><p><img src="/blog/20190414/Java内存分配与垃圾回收的复习整理/jvm.png" alt="Java内存划分"></p><ul><li><strong>程序计数器</strong>：当前线程执行字节码的行号指示器。[<em>线程私有</em>]</li><li><strong>虚拟机栈</strong>：每个方法执行时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。平常我们所说的Java虚拟机划分为堆和栈中的“栈”中的一部分就是虚拟机栈。其中局部变量表存放着编译期可知的所有基本数据类型、对象引用等。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法所需要的帧的大小是已经确定了的。[<em>线程私有</em>]</li><li><strong>本地方法栈</strong>：与虚拟机栈发挥的作用相似，只不过这个区域执行的是native方法，即由c/c++或者其他语言编写的方法。[<em>线程私有</em>]</li><li><strong>Java堆</strong>：用来存放对象实例，即我们最熟悉的一块区域。Java堆是垃圾收集器管理的主要区域，所以有时也叫“GC堆”。[<em>线程共享</em>]</li><li><strong>方法区</strong>：用于存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据 [<em>线程共享</em>]</li><li><strong>运行时常量池</strong>：这是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等信息之外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用。这部分内容将在类加载后进入方法区的运行时常量池中存放。[<em>线程共享</em>]</li></ul><h4 id="Java虚拟机的对象内存分配"><a href="#Java虚拟机的对象内存分配" class="headerlink" title="Java虚拟机的对象内存分配"></a>Java虚拟机的对象内存分配</h4><pre><code>Java对象内存分配实际上就指的是将对象分配在堆上的过程。不过实际上堆还被虚拟机划分成了不同的区域，并且每个区域的分配策略都不相同。- 对象优先再Eden区域分配：大多数情况下，对象会在Eden区域分配，在Eden区域空间不够的情况下，会先进行一次MinorGC。</code></pre><h4 id="常用的垃圾回收算法"><a href="#常用的垃圾回收算法" class="headerlink" title="常用的垃圾回收算法"></a>常用的垃圾回收算法</h4><p>– 待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/20190414/Java内存分配与垃圾回收的复习整理/zy.png&quot; alt=&quot;摘要&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h4&gt;&lt;p&gt;众所周知Java作为一个“一次编译，到处运行”的编译型语言，JVM虚拟机当之无愧的是Java语言世界的先锋将军。作为一个Java程序员，JVM虚拟机其相关知识是我们必须要了解以及深入掌握的重点。在本篇博客我将总结一下JVM虚拟机的内存结构、对象内存分配以及垃圾回收算法。这也是经常找工作求职必问的点。&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="内存分配" scheme="http://zhangjiaheng.cn/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    
      <category term="垃圾回收" scheme="http://zhangjiaheng.cn/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>dubbo服务降级</title>
    <link href="http://zhangjiaheng.cn/blog/20190412/dubbo%20%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/"/>
    <id>http://zhangjiaheng.cn/blog/20190412/dubbo 服务降级/</id>
    <published>2019-04-12T03:48:06.000Z</published>
    <updated>2019-04-22T14:14:44.551Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在分布式服务或者一些微服务当中，经常性的出现各个服务之间相互调用，业务处理流程耦合起来的情况。比如当用户在平台下单时，我们需要给用户生成订单之后发站内信或者短信通知用户订单生成成功。那么很多时候代码的编写就会是：<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>调用订单模块生成订单-&gt;调用短信模块通知用户-&gt;调用其他模块处理更多业务逻辑</code><br>&nbsp;&nbsp;&nbsp;&nbsp;可是当我们无足轻重的一个短信通知模块挂掉或者报错的时候，我们当然不希望整个业务逻辑就这样停止。那么这个时候，就需要引入服务降级的机制，为整个业务逻辑进行解耦合。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;使用服务降级可以防止我们服务中间不影响整体流程的模块出错导致整个业务处理雪崩。将核心业务保证完整性，非核心业务弱化。<br><a id="more"></a><br><em><font style="color: red">本文使用  <code>springboot+dubbo</code> 进行服务降级的演示</font></em></p><h3 id="dubbo自带的mock进行服务降级，也叫本地伪装"><a href="#dubbo自带的mock进行服务降级，也叫本地伪装" class="headerlink" title="dubbo自带的mock进行服务降级，也叫本地伪装"></a>dubbo自带的mock进行服务降级，也叫本地伪装</h3><h5 id="dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。"><a href="#dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。" class="headerlink" title="dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。"></a>dubbo作为阿里巴巴开源的最流行的服务治理框架，在提供了远程调用的同时也提供了服务降级的功能。</h5><p>具体使用</p><p>dubbo mock的使用非常简单，即在我们平时进行开发时，编写impl实现类实现接口作为服务提供者的同时，编写mock实现类并覆盖所有接口中的方法。<br>官方更详细的文档<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/local-mock.html" target="_blank" rel="noopener">戳这里</a></p><p>比如有接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface SysOperateFacade &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 根据用户名查询操作员信息</span><br><span class="line">     */</span><br><span class="line">    SysOperateVO findByUserName(String username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在实现类进行相应操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Service //这里Service是dubbo的注解</span><br><span class="line">public class SysOperateFacadeImpl implements SysOperateFacade &#123;</span><br><span class="line">  @Resource</span><br><span class="line">  SysOperateService sysOperateService;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public SysOperateVO findByUserName(String username) &#123;</span><br><span class="line">      return sysOperateService.findByUserName(username);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写mock实现类覆盖findByUserName方法 注意 mock的类名必须是 接口名+Mock<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class SysOperateFacadeMock implements SysOperateFacade &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public SysOperateVO findByUserName(String username) &#123;</span><br><span class="line">        System.out.println(&quot;调用到dubbo mock 的findByUserName方法。。。。。。。&quot;);</span><br><span class="line">        return new SysOperateVO();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，在调用的地方加上注解<code>@Reference(mock = &quot;true&quot;)</code>进行使用即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/sys/sysOperate&quot;)</span><br><span class="line">public class SysOperateController extends BaseController &#123;</span><br><span class="line"></span><br><span class="line">    @Reference(mock = &quot;true&quot;)</span><br><span class="line">    private SysOperateFacade sysOperateFacade;</span><br><span class="line"></span><br><span class="line">    @ResponseBody</span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public SysOperateVO test(String username)&#123;</span><br><span class="line">        return sysOperateFacade.findByUserName(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用-spring-cloud-Hystrix进行服务降级"><a href="#使用-spring-cloud-Hystrix进行服务降级" class="headerlink" title="使用 spring cloud Hystrix进行服务降级"></a>使用 spring cloud Hystrix进行服务降级</h3><p>在服务调用方模块加入依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>如果出现以下报错也许是由于Springboot与这个依赖版本不对应，修改下版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoSuchMethodError: org.springframework.boot.builder.SpringApplicationBuilder.&lt;init&gt;([Ljava/lang/Class;)V at org.springframework.cloud.bootstrap.BootstrapApplicationListener.bootstrapServiceContext(BootstrapApplicationListener.java:170) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:104) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:70) at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:74) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:325) at org.springframework.boot.SpringApplication.run(SpringApplication.java:296) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) at com.gjj.p2p.BasicsApplication.main(BasicsApplication.java:18)</span><br></pre></td></tr></table></figure></p><h5 id="具体使用hystrix进行服务降级"><a href="#具体使用hystrix进行服务降级" class="headerlink" title="具体使用hystrix进行服务降级"></a>具体使用<code>hystrix</code>进行服务降级</h5><p><code>hystrix</code>的使用也是非常简单，只需要在服务调用方即消费者方springboot启动类上加上注解 <code>@EnableHystrix</code></p><p>然后使用如下方式，指定服务出错或者熔断后调用的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@ResponseBody</span><br><span class="line">@RequestMapping(&quot;/test&quot;)</span><br><span class="line">@HystrixCommand(fallbackMethod = &quot;fallback&quot;)</span><br><span class="line">public String test(String message)&#123;</span><br><span class="line">    return sysMenuFacade.test(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String fallback(String message)&#123;</span><br><span class="line">    return &quot;sysMenuFacade挂了 调用到fallback &quot; + message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样当出现问题之后就会调用得到fallback方法<br>还可以在这个controller上直接指定注解<code>@DefaultProperties(defaultFallback = &quot;fallback&quot;)</code>以免编写大量重复代码</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>服务降级与熔断机制在我们实际生产以及日常开发中都是是非常有必要使用的，例如我们在日常开发中，需要调用别人的模块，但是又不是非常依赖这个模块的数据，我们可以使用以上的方式构造“假的”调用结果。这样就不用为了调试某行代码去启动大量的服务了。</p><p>最后针对dubbo的mock机制以及<code>hystrix</code>，我觉得<code>hystrix</code>更像是try{}catch{}。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在分布式服务或者一些微服务当中，经常性的出现各个服务之间相互调用，业务处理流程耦合起来的情况。比如当用户在平台下单时，我们需要给用户生成订单之后发站内信或者短信通知用户订单生成成功。那么很多时候代码的编写就会是：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;调用订单模块生成订单-&amp;gt;调用短信模块通知用户-&amp;gt;调用其他模块处理更多业务逻辑&lt;/code&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;可是当我们无足轻重的一个短信通知模块挂掉或者报错的时候，我们当然不希望整个业务逻辑就这样停止。那么这个时候，就需要引入服务降级的机制，为整个业务逻辑进行解耦合。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;使用服务降级可以防止我们服务中间不影响整体流程的模块出错导致整个业务处理雪崩。将核心业务保证完整性，非核心业务弱化。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="dubbo" scheme="http://zhangjiaheng.cn/categories/dubbo/"/>
    
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/tags/springboot/"/>
    
      <category term="dubbo" scheme="http://zhangjiaheng.cn/tags/dubbo/"/>
    
      <category term="分布式服务降级" scheme="http://zhangjiaheng.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>事务传播机制和事务隔离级别</title>
    <link href="http://zhangjiaheng.cn/blog/20190323/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8A%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://zhangjiaheng.cn/blog/20190323/事务传播机制以及隔离级别/</id>
    <published>2019-03-23T13:41:16.000Z</published>
    <updated>2019-04-23T16:14:25.632Z</updated>
    
    <content type="html"><![CDATA[<h4 id="事务的四个特性-ACID"><a href="#事务的四个特性-ACID" class="headerlink" title="事务的四个特性(ACID)"></a>事务的四个特性(ACID)</h4><ul><li><p>原子性<br>  事务执行开始之后的一系列操作都堪称是一个原子操作，要么全部做完，要么全部失败，不能出现部分操作成功的情况。“原子”顾名思义，就是一个不可分割的最小单元。</p></li><li><p>一致性<br>  事务开始执行之后，数据的正确性需要得到保证。如A向B转账，B却未收到钱。</p></li><li><p>隔离性<br>  同一时间只能由一个事务对数据进行修改操作，对于其他事务来说这个修改操作时透明的。</p></li><li><p>持久性<br>  事务对数据进行修改操作完成之后，数据发生的改变是持久不变的，不会自己恢复到改变之前的状态。</p></li></ul><a id="more"></a><h4 id="spring中的事务传播机制-以及事务隔离级别"><a href="#spring中的事务传播机制-以及事务隔离级别" class="headerlink" title="spring中的事务传播机制 以及事务隔离级别"></a>spring中的事务传播机制 以及事务隔离级别</h4><p><strong>在接口TransactionDefinition中，定义了7种传播机制</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package org.springframework.transaction;</span><br><span class="line"></span><br><span class="line">public interface TransactionDefinition &#123;</span><br><span class="line">    </span><br><span class="line">// 事务传播机制</span><br><span class="line">int PROPAGATION_REQUIRED = 0;// 默认的 也是最常用的 ，如果当前有事务，就加入当前这个事务，如果没有事务，就新建一个事务</span><br><span class="line">    int PROPAGATION_SUPPORTS = 1;// 如果有事务，就加入当前这个事务，如果没有事务，也不新建</span><br><span class="line">    int PROPAGATION_MANDATORY = 2;// 如果有事务，就会使用当前这个事务，如果没有就会抛出异常</span><br><span class="line">    int PROPAGATION_REQUIRES_NEW = 3;// 总是会开启一个新的事务，如果当前已经有事务，就将当前事务挂起</span><br><span class="line">    int PROPAGATION_NOT_SUPPORTED = 4;// 代码总是会在非事务的环境执行，如果当前有事务，先将事务挂起，执行完成之后再恢复</span><br><span class="line">    int PROPAGATION_NEVER = 5;// 绝对不允许代码在有事务的环境执行，有事务就抛出异常停止执行</span><br><span class="line">    int PROPAGATION_NESTED = 6;// 嵌套事务级别：如果没有父事务，就使用默认机制，如果有，子事务执行完成之后父事务才会提交</span><br><span class="line"></span><br><span class="line">// 事务隔离级别</span><br><span class="line">    int ISOLATION_DEFAULT = -1;// 默认级别 </span><br><span class="line">    int ISOLATION_READ_UNCOMMITTED = 1;// 读未提交 即脏读，可以读取别的事务已修改未提交的数据，会导致脏读、幻读和不可重复度</span><br><span class="line">    int ISOLATION_READ_COMMITTED = 2;// 提交读即不可重复读，一个事物能读取到另一个事务已经提交的数据，在多次读取同一数据时，该数据被另一事务修改，读取的数据不一致</span><br><span class="line">    int ISOLATION_REPEATABLE_READ = 4;// 可重复读 即一个事物只能读取到另一事务提交之前的数据，确保每次读取到的数据一致。但是数据又新增或者修改时不可预见</span><br><span class="line">    int ISOLATION_SERIALIZABLE = 8;// 序列化读 即事务串行读取数据，性能最差，安全性最高，保证数据准确性</span><br><span class="line">    int TIMEOUT_DEFAULT = -1;</span><br><span class="line"></span><br><span class="line">    int getPropagationBehavior();</span><br><span class="line"></span><br><span class="line">    int getIsolationLevel();</span><br><span class="line"></span><br><span class="line">    int getTimeout();</span><br><span class="line"></span><br><span class="line">    boolean isReadOnly();</span><br><span class="line"></span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;事务的四个特性-ACID&quot;&gt;&lt;a href=&quot;#事务的四个特性-ACID&quot; class=&quot;headerlink&quot; title=&quot;事务的四个特性(ACID)&quot;&gt;&lt;/a&gt;事务的四个特性(ACID)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原子性&lt;br&gt;  事务执行开始之后的一系列操作都堪称是一个原子操作，要么全部做完，要么全部失败，不能出现部分操作成功的情况。“原子”顾名思义，就是一个不可分割的最小单元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一致性&lt;br&gt;  事务开始执行之后，数据的正确性需要得到保证。如A向B转账，B却未收到钱。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隔离性&lt;br&gt;  同一时间只能由一个事务对数据进行修改操作，对于其他事务来说这个修改操作时透明的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;持久性&lt;br&gt;  事务对数据进行修改操作完成之后，数据发生的改变是持久不变的，不会自己恢复到改变之前的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="事务" scheme="http://zhangjiaheng.cn/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="数据库" scheme="http://zhangjiaheng.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>使用springboot进行国际化时自定义读取数据库配置</title>
    <link href="http://zhangjiaheng.cn/blog/20190320/%E4%BD%BF%E7%94%A8springboot%E8%BF%9B%E8%A1%8C%E5%9B%BD%E9%99%85%E5%8C%96%E6%97%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE/"/>
    <id>http://zhangjiaheng.cn/blog/20190320/使用springboot进行国际化时自定义读取数据库配置/</id>
    <published>2019-03-20T11:27:02.000Z</published>
    <updated>2019-04-22T14:13:00.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>springboot默认就支持国际化的，而且不需要你过多的做什么配置，只需要在<code>resources/</code>下创建国际化配置文件即可，注意名称必须以messages开始。 messages.properties （默认的语言配置文件，当找不到其他语言的配置的时候，使用该文件进行展示）。 具体的关于springboot的国际化配置我这边就不再过多介绍(包括Locale的设置以及如何根据区域设置语言等)，关于页面上得使用可以参考：<a href="!https://www.baidu.com/s?word=springboot+%E5%9B%BD%E9%99%85%E5%8C%96">springboot国际化</a>。在这篇博客中，我要介绍的是一个很有用的功能并且绝大部分人也会用得到，就是<br><strong><font color="#0099ff" size="5" face="黑体">不使用配置文件<code>messages.properties</code>储存国际化语言，而使用数据库进行动态配置，做到无需重启更改配置。</font></strong><br><a id="more"></a></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h4 id="MessageSource介绍"><a href="#MessageSource介绍" class="headerlink" title="MessageSource介绍"></a>MessageSource介绍</h4><p>Spring提供了一个接口MessageSource用于获取国际化信息，ReloadableResourceBundleMessageSource和ResourceBundleMessageSource都是继承了该接口的一个抽象实现类AbstractMessageSource，在spring官网有一段这样介绍messageSource的话：<br><img src="https://img-blog.csdn.net/20180116154941287?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDcyMTEzMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="spring官网对于messageSource的介绍" title="spring官网对于messageSource的介绍"><br>图中红框画起来的意思就是，上下文加载的时候会查询messageSource的bean，如果没有就会创建一个名为<code>messageSource</code>放在上下文中… …等等。</p><h4 id="在springboot中注入自定义messageSource"><a href="#在springboot中注入自定义messageSource" class="headerlink" title="在springboot中注入自定义messageSource"></a>在springboot中注入自定义messageSource</h4><p>通过上面的介绍，我们就可以自己定义自己的messageSource进行配置的读取了。<br> <strong> 我这边是把这个放在了业务层，大家用的时候也可以直接放在控制层(一般都放在控制层，要用到)，使用@Compnent(“messageSource”)注解声明下bean名称即可 </strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">// MyMessageSourceService是我自己的接口 你也可以不需要。使用@Compnent(&quot;messageSource&quot;)注解就行</span><br><span class="line">@Service(&quot;messageSource&quot;)</span><br><span class="line">public class MyMessageSource extends AbstractMessageSource implements ResourceLoaderAware, MyMessageSourceService &#123;</span><br><span class="line"></span><br><span class="line">    ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    // 这个是用来缓存数据库中获取到的配置的 数据库配置更改的时候可以调用reload方法重新加载</span><br><span class="line">    // 当然 实际使用者也可以不使用这种缓存的方式</span><br><span class="line">    private static final Map&lt;String, Map&lt;String, String&gt;&gt; LOCAL_CACHE = new ConcurrentHashMap&lt;&gt;(256);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    SysI18nService sysI18nService;</span><br><span class="line"></span><br><span class="line">    private final Logger logger = LoggerFactory.getLogger(MyMessageSource.class);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化</span><br><span class="line">     */</span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        this.reload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重新将数据库中的国际化配置加载</span><br><span class="line">     */</span><br><span class="line">    public void reload() &#123;</span><br><span class="line">        LOCAL_CACHE.clear();</span><br><span class="line">        LOCAL_CACHE.putAll(loadAllMessageResourcesFromDB());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从数据库中获取所有国际化配置 这边可以根据自己数据库表结构进行相应的业务实现</span><br><span class="line">     * 对应的语言能够取出来对应的值就行了 无需一定要按照这个方法来</span><br><span class="line">     */</span><br><span class="line">    public Map&lt;String, Map&lt;String, String&gt;&gt; loadAllMessageResourcesFromDB() &#123;</span><br><span class="line">        List&lt;SysI18nBO&gt; list = sysI18nService.findList(new SysI18nAO());</span><br><span class="line">        if (CollectionUtils.isNotEmpty(list)) &#123;</span><br><span class="line">            final Map&lt;String, String&gt; zhCnMessageResources = new HashMap&lt;&gt;(list.size());</span><br><span class="line">            final Map&lt;String, String&gt; enUsMessageResources = new HashMap&lt;&gt;(list.size());</span><br><span class="line">            final Map&lt;String, String&gt; idIdMessageResources = new HashMap&lt;&gt;(list.size());</span><br><span class="line">            for (SysI18nBO bo : list) &#123;</span><br><span class="line">                String name = bo.getModel() + &quot;.&quot; + bo.getName();</span><br><span class="line">                String zhText = bo.getZhCn();</span><br><span class="line">                String enText = bo.getEnUs();</span><br><span class="line">                String idText = bo.getInId();</span><br><span class="line">                zhCnMessageResources.put(name, zhText);</span><br><span class="line">                enUsMessageResources.put(name, enText);</span><br><span class="line">                idIdMessageResources.put(name, idText);</span><br><span class="line">            &#125;</span><br><span class="line">            LOCAL_CACHE.put(&quot;zh&quot;, zhCnMessageResources);</span><br><span class="line">            LOCAL_CACHE.put(&quot;en&quot;, enUsMessageResources);</span><br><span class="line">            LOCAL_CACHE.put(&quot;in&quot;, idIdMessageResources);</span><br><span class="line">        &#125;</span><br><span class="line">        return MapUtils.EMPTY_MAP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从缓存中取出国际化配置对应的数据 或者从父级获取</span><br><span class="line">     *</span><br><span class="line">     * @param code</span><br><span class="line">     * @param locale</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String getSourceFromCache(String code, Locale locale) &#123;</span><br><span class="line">        String language = locale.getLanguage();</span><br><span class="line">        Map&lt;String, String&gt; props = LOCAL_CACHE.get(language);</span><br><span class="line">        if (null != props &amp;&amp; props.containsKey(code)) &#123;</span><br><span class="line">            return props.get(code);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (null != this.getParentMessageSource()) &#123;</span><br><span class="line">                    return this.getParentMessageSource().getMessage(code, null, locale);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception ex) &#123;</span><br><span class="line">                logger.error(ex.getMessage(), ex);</span><br><span class="line">            &#125;</span><br><span class="line">            return code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 下面三个重写的方法是比较重要的</span><br><span class="line">    @Override</span><br><span class="line">    public void setResourceLoader(ResourceLoader resourceLoader) &#123;</span><br><span class="line">        this.resourceLoader = (resourceLoader == null ? new DefaultResourceLoader() : resourceLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected MessageFormat resolveCode(String code, Locale locale) &#123;</span><br><span class="line">        String msg = getSourceFromCache(code, locale);</span><br><span class="line">        MessageFormat messageFormat = new MessageFormat(msg, locale);</span><br><span class="line">        return messageFormat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected String resolveCodeWithoutArguments(String code, Locale locale) &#123;</span><br><span class="line">        return getSourceFromCache(code, locale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p> 至此，自定义国际化配置读取数据库已经完成，只需要在更新数据库配置的时候调用一下reload重置一下缓存中的信息即可。</p><blockquote><p><a href="!https://blog.csdn.net/u014721131/article/details/79075802">参考博客：spring xml配置自定义读取数据库的messageSource</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;springboot默认就支持国际化的，而且不需要你过多的做什么配置，只需要在&lt;code&gt;resources/&lt;/code&gt;下创建国际化配置文件即可，注意名称必须以messages开始。 messages.properties （默认的语言配置文件，当找不到其他语言的配置的时候，使用该文件进行展示）。 具体的关于springboot的国际化配置我这边就不再过多介绍(包括Locale的设置以及如何根据区域设置语言等)，关于页面上得使用可以参考：&lt;a href=&quot;!https://www.baidu.com/s?word=springboot+%E5%9B%BD%E9%99%85%E5%8C%96&quot;&gt;springboot国际化&lt;/a&gt;。在这篇博客中，我要介绍的是一个很有用的功能并且绝大部分人也会用得到，就是&lt;br&gt;&lt;strong&gt;&lt;font color=&quot;#0099ff&quot; size=&quot;5&quot; face=&quot;黑体&quot;&gt;不使用配置文件&lt;code&gt;messages.properties&lt;/code&gt;储存国际化语言，而使用数据库进行动态配置，做到无需重启更改配置。&lt;/font&gt;&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/tags/springboot/"/>
    
      <category term="国际化" scheme="http://zhangjiaheng.cn/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>layui结合freemarker+springboot进行前端数据表格字典转义</title>
    <link href="http://zhangjiaheng.cn/blog/20190316/layui%E5%BC%80%E5%8F%91%E4%B8%AD%E7%BB%93%E5%90%88freemarker%E5%B1%95%E7%A4%BA%E5%AD%97%E5%85%B8%E6%95%B0%E6%8D%AE/"/>
    <id>http://zhangjiaheng.cn/blog/20190316/layui开发中结合freemarker展示字典数据/</id>
    <published>2019-03-16T11:51:53.000Z</published>
    <updated>2019-04-22T14:14:22.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在layui的开发中，我们经常会用到表格数据展示。但是在数据库中我们通常保存的一些状态等数据，都是枚举值，而我们在前端展示的时候就不能使用这些枚举值了，而要展示枚举值对应的意义数据。比如状态status，1=启用，0=停用。<br>那么在layui的数据表格中，我们要展示这样的数据，写法可以是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">templet: function (d) &#123;</span><br><span class="line">  if(d.status === 1)&#123;</span><br><span class="line">      return &quot;启用&quot;;</span><br><span class="line">  &#125; else if(d.status === 0)&#123;</span><br><span class="line">      return &quot;停用&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是这样的写法很low啊，我们在数据库中定义多少枚举值在这里就要写多少代码，一旦有重复使用的情况，这种写法会让我们痛不欲生。<br>在考虑到后台使用freemarker的情况下，配置freemarker自定义标签就能很好地解决这个问题。<br>最后我们的写法就会简化成：<code>&lt;@th type=&quot;template&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code>，接下来看看如何在springboot中配置使用吧。<br><a id="more"></a></p><h3 id="freemarker自定义标签介绍及使用"><a href="#freemarker自定义标签介绍及使用" class="headerlink" title="freemarker自定义标签介绍及使用"></a>freemarker自定义标签介绍及使用</h3><p><code>TemplateDirectiveModel</code>接口是freemarker自定标签或者自定义指令的核心处理接口。当模板页面遇到用户自定义的标签指令时，<code>execute()</code>方法会被执行。<code>execute()</code>方法如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void execute(</span><br><span class="line">  Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body</span><br><span class="line">) throws TemplateException, IOException;</span><br></pre></td></tr></table></figure></p><p>我们在使用freemarker自定义标签的时候需要实现该接口并且重写execute方法。</p><h4 id="execute-方法参数解释"><a href="#execute-方法参数解释" class="headerlink" title="execute()方法参数解释"></a><code>execute()</code>方法参数解释</h4><ul><li><em>Environment env</em>：系统环境变量，通常用它来输出相关内容，如<code>Writer out = env.getOut();</code></li><li><em>Map params</em>：自定义标签传过来的对象，就是从页面上获取的参数，其key=自定义标签的参数名，value值是TemplateModel类型，而TemplateModel是一个接口类型，通常我们都使用TemplateScalarModel接口来替代它获取一个String 值，如TemplateScalarModel.getAsString();当然还有其它常用的替代接口，如TemplateNumberModel获取number，TemplateHashModel等。<br>在本例使用时，我们会将map转成我们自己的对象进行数据保存。</li><li><em>TemplateModel[] loopVars</em>：循环替代变量</li><li><em>TemplateDirectiveBody body</em>：标签中嵌套的内容，如<code>&lt;@tag&gt;body&lt;/@tag&gt;</code>，就是这个body</li></ul><h4 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h4><h6 id="定义接收页面参数的对象"><a href="#定义接收页面参数的对象" class="headerlink" title="定义接收页面参数的对象"></a>定义接收页面参数的对象</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">public class TableThTag &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 对象属性名【需要进行对象属性获取】</span><br><span class="line">     */</span><br><span class="line">    private String objName;</span><br><span class="line">    /**</span><br><span class="line">     * 字典标识</span><br><span class="line">     */</span><br><span class="line">    private String nid;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 类型</span><br><span class="line">     */</span><br><span class="line">    private String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="实现TemplateDirectiveModel接口并重写execute方法"><a href="#实现TemplateDirectiveModel接口并重写execute方法" class="headerlink" title="实现TemplateDirectiveModel接口并重写execute方法"></a>实现<code>TemplateDirectiveModel</code>接口并重写<code>execute</code>方法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@org.springframework.context.annotation.Configuration</span><br><span class="line">public class TableThDirective implements TemplateDirectiveModel &#123;</span><br><span class="line"></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(getClass().getName());</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * FreeMarker自定义指令</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void execute(Environment environment, Map map, TemplateModel[] templateModels,</span><br><span class="line">                        TemplateDirectiveBody templateDirectiveBody) throws TemplateException, IOException &#123;</span><br><span class="line">        TableThTag tableThTag = new TableThTag();</span><br><span class="line">        //校验参数</span><br><span class="line">        try &#123;</span><br><span class="line">            //  用来将一些 key-value 的值（例如 hashmap）映射到 bean 中的属性</span><br><span class="line">            BeanUtils.populate(tableThTag, map);</span><br><span class="line">            if (StringUtils.isEmpty(tableThTag.getNid()) || StringUtils.isEmpty(tableThTag.getType())) &#123;</span><br><span class="line">                throw new IllegalArgumentException(&quot;nid,type不能为空&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(&quot;数据转化异常&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder html = new StringBuilder();</span><br><span class="line">        // 根据类型创建不同的HTML生成器</span><br><span class="line">        ThFormatterInterface thFormatterInterface = ThFormatterFactory.createThFormatter(tableThTag.getType());</span><br><span class="line">        if (thFormatterInterface != null) &#123;</span><br><span class="line">            String dictHtml = thFormatterInterface.buildFormatterHtml(tableThTag.getNid(), tableThTag.getFieldName());</span><br><span class="line">            html.append(dictHtml);</span><br><span class="line">        &#125;</span><br><span class="line">        // 执行真正指令的执行部分:</span><br><span class="line">        Writer out = environment.getOut();</span><br><span class="line">        out.write(html.toString());</span><br><span class="line">        if (templateDirectiveBody != null) &#123;</span><br><span class="line">            templateDirectiveBody.render(environment.getOut());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static BeansWrapper getBeansWrapper() &#123;</span><br><span class="line">        BeansWrapper beansWrapper =</span><br><span class="line">                new BeansWrapperBuilder(Configuration.VERSION_2_3_21).build();</span><br><span class="line">        return beansWrapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以看到，在这个方法中，我将页面上的参数转为<code>TableThTag</code>对象。然后再根据前端页面不同的type类型对应<br>实现了<code>ThFormatterInterface</code>的工厂对象，创建不同的html生成器。（这里考虑到扩展性，可能以后不光创建数据表格会用的到，比如下拉框什么的，也可以使用这种方式创建，所以在这里使用抽象工厂依据类型动态创建。）<br>下面就是创建html的具体工厂以及实现方法。</p><h6 id="ThFormatterInterface抽象工厂创建html生成器"><a href="#ThFormatterInterface抽象工厂创建html生成器" class="headerlink" title="ThFormatterInterface抽象工厂创建html生成器"></a><code>ThFormatterInterface</code>抽象工厂创建html生成器</h6><p>接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface ThFormatterInterface &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 构造生成枚举html</span><br><span class="line">     * @param nid</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    String buildFormatterHtml(String nid, String fieldName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>工厂<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class ThFormatterFactory &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(ThFormatterFactory.class);</span><br><span class="line"></span><br><span class="line">    public static ThFormatterInterface createThFormatter(String type)&#123;</span><br><span class="line">        if(StringUtils.isEmpty(type))&#123;</span><br><span class="line">            return  new ThFormatterTemplate();</span><br><span class="line">        &#125;</span><br><span class="line">        // 文件名 如果type传template 就需要有一个名为ThFormatterTemplate的文件</span><br><span class="line">        // 并且实现了ThFormatterInterface以及重写生成html的方法</span><br><span class="line">        String fileName = &quot;ThFormatter&quot; + StringUtil.firstCharUpperCase(type);</span><br><span class="line">        //类路径 通过反射去创建实现类</span><br><span class="line">        String className = &quot;com.module.freemarker.impl.&quot;+fileName;</span><br><span class="line">        //生成表头格式实现类</span><br><span class="line">        ThFormatterInterface thFormatterInterface = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            thFormatterInterface =(ThFormatterInterface) Class.forName(className).newInstance();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(),e);</span><br><span class="line">        &#125;</span><br><span class="line">        return thFormatterInterface;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ThFormatterTemplate implements ThFormatterInterface &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String buildFormatterHtml(String nid, String fieldName) &#123;</span><br><span class="line">        Assert.notEMPTY(nid, &quot;nid不能为空&quot;);</span><br><span class="line">        Assert.notEMPTY(fieldName, &quot;objName不能为空&quot;);</span><br><span class="line">        SysDictService sysDictService = SpringContextHolder.getBean(SysDictService.class);</span><br><span class="line">        // 通过nid查询字典类 这里不需要进行照抄 每个人都会有自己的实现方法</span><br><span class="line">        List&lt;SysDictBO&gt; sysDictModelList = sysDictService.findByPartnerNid(nid);</span><br><span class="line">        StringBuilder dictHtml = new StringBuilder();</span><br><span class="line">        // 反正目的就是根据字典类生成对应的html就行了 需要生成的格式对照template原本应该有的写法就行了</span><br><span class="line">        dictHtml.append(&quot;templet: function(d)&#123; &quot;);</span><br><span class="line">        for (SysDictBO sysDict : sysDictModelList) &#123;</span><br><span class="line">            dictHtml.append(&quot;if(d.&quot; + fieldName + &quot; == &apos;&quot; + sysDict.getValue() + &quot;&apos;)&#123; return &apos;&quot; + sysDict.getName() + &quot;&apos;;&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        dictHtml.append(&quot;&#125;&quot;);</span><br><span class="line"></span><br><span class="line">        return dictHtml.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="最后将自定义标签注入到freemarker标签中去"><a href="#最后将自定义标签注入到freemarker标签中去" class="headerlink" title="最后将自定义标签注入到freemarker标签中去"></a>最后将自定义标签注入到freemarker标签中去</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@org.springframework.context.annotation.Configuration</span><br><span class="line">public class FreemarkerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private Configuration configuration;</span><br><span class="line">    @Resource</span><br><span class="line">    private TableThDirective tableThDirective;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void setSharedVariable()&#123;</span><br><span class="line">        configuration.setSharedVariable(&quot;th&quot;,tableThDirective);</span><br><span class="line">        configuration.setSharedVariable(&quot;shiro&quot;,new ShiroTags());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>这样就大功告成了。</p><p>在页面上进行使用吧：<code>&lt;@th type=&quot;template&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code></p><p>以后进行扩展什么的也方便，比如生成下拉框：<code>&lt;@th type=&quot;select&quot; nid=&quot;basics_sys_status&quot; objName=&quot;status&quot;&gt;&lt;/@th&gt;</code>这样然后自动生成html的时候查出来所有的字典，根据类型生成多个<option>出来就行了。</option></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在layui的开发中，我们经常会用到表格数据展示。但是在数据库中我们通常保存的一些状态等数据，都是枚举值，而我们在前端展示的时候就不能使用这些枚举值了，而要展示枚举值对应的意义数据。比如状态status，1=启用，0=停用。&lt;br&gt;那么在layui的数据表格中，我们要展示这样的数据，写法可以是：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;templet: function (d) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if(d.status === 1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return &amp;quot;启用&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; else if(d.status === 0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return &amp;quot;停用&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是这样的写法很low啊，我们在数据库中定义多少枚举值在这里就要写多少代码，一旦有重复使用的情况，这种写法会让我们痛不欲生。&lt;br&gt;在考虑到后台使用freemarker的情况下，配置freemarker自定义标签就能很好地解决这个问题。&lt;br&gt;最后我们的写法就会简化成：&lt;code&gt;&amp;lt;@th type=&amp;quot;template&amp;quot; nid=&amp;quot;basics_sys_status&amp;quot; objName=&amp;quot;status&amp;quot;&amp;gt;&amp;lt;/@th&amp;gt;&lt;/code&gt;，接下来看看如何在springboot中配置使用吧。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/categories/springboot/"/>
    
    
      <category term="开发日记" scheme="http://zhangjiaheng.cn/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/tags/springboot/"/>
    
      <category term="freemarker" scheme="http://zhangjiaheng.cn/tags/freemarker/"/>
    
      <category term="工厂模式" scheme="http://zhangjiaheng.cn/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="layui" scheme="http://zhangjiaheng.cn/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>springboot+shiro解决session污染的问题</title>
    <link href="http://zhangjiaheng.cn/blog/20190309/springboot+shiro%E8%A7%A3%E5%86%B3session%E6%B1%A1%E6%9F%93%E9%97%AE%E9%A2%98/"/>
    <id>http://zhangjiaheng.cn/blog/20190309/springboot+shiro解决session污染问题/</id>
    <published>2019-03-09T07:26:49.000Z</published>
    <updated>2019-04-22T14:13:54.943Z</updated>
    
    <content type="html"><![CDATA[<h4 id="同一个服务器启动多个web项目造成session污染"><a href="#同一个服务器启动多个web项目造成session污染" class="headerlink" title="同一个服务器启动多个web项目造成session污染"></a>同一个服务器启动多个web项目造成session污染</h4><p>昨天在敲代码的时候遇到了一个问题，同一个项目，我创建了两个分支，分别使用不同的端口。<br>但是在测试环境启动的时候我发现，在同一个浏览器上，我只能登陆其中的一个后台。在登陆另一个后台之后，前面那个<br>又需要再重新登陆了。</p><p>原因找了好久，最后F12控制台查看session发现，这两个web项目，使用的都是JSessionId作为cookie的key，在登陆另一个时，浏览器的这个cookie值就会被改变，所以前者就需要在重新登陆了。</p><a id="more"></a><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在springboot中，对shiro配置进行更改session保存时的cookie的key名称，如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public DefaultWebSessionManager sessionManager() &#123;</span><br><span class="line">    DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();</span><br><span class="line">    Cookie cookie = sessionManager.getSessionIdCookie();</span><br><span class="line">    cookie.setName(&quot;MySessionId&quot;);</span><br><span class="line">    return sessionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后在<code>securityManager</code>中将我们的<code>sessionManager</code>注入进去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * SecurityManager，权限管理，这个类组合了登陆，登出，权限，session的处理，是个比较重要的类。</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public DefaultWebSecurityManager securityManager() &#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">    securityManager.setRealm(myShiroRealm());</span><br><span class="line">    securityManager.setSessionManager(sessionManager());</span><br><span class="line">    return securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只需要这样修改好就可以了。然后重启项目，就会发现，两个web项目都可以同时登陆了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;同一个服务器启动多个web项目造成session污染&quot;&gt;&lt;a href=&quot;#同一个服务器启动多个web项目造成session污染&quot; class=&quot;headerlink&quot; title=&quot;同一个服务器启动多个web项目造成session污染&quot;&gt;&lt;/a&gt;同一个服务器启动多个web项目造成session污染&lt;/h4&gt;&lt;p&gt;昨天在敲代码的时候遇到了一个问题，同一个项目，我创建了两个分支，分别使用不同的端口。&lt;br&gt;但是在测试环境启动的时候我发现，在同一个浏览器上，我只能登陆其中的一个后台。在登陆另一个后台之后，前面那个&lt;br&gt;又需要再重新登陆了。&lt;/p&gt;
&lt;p&gt;原因找了好久，最后F12控制台查看session发现，这两个web项目，使用的都是JSessionId作为cookie的key，在登陆另一个时，浏览器的这个cookie值就会被改变，所以前者就需要在重新登陆了。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/tags/springboot/"/>
    
      <category term="shiro" scheme="http://zhangjiaheng.cn/tags/shiro/"/>
    
      <category term="session污染" scheme="http://zhangjiaheng.cn/tags/session%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:Z字形变换</title>
    <link href="http://zhangjiaheng.cn/blog/20181223/leetcode-Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/"/>
    <id>http://zhangjiaheng.cn/blog/20181223/leetcode-Z字形变换/</id>
    <published>2018-12-23T11:43:02.000Z</published>
    <updated>2019-04-23T13:10:39.629Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下"></a>题目如下</h4><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L   C   I   R</span><br><span class="line">E T O E S I I G</span><br><span class="line">E   D   H   N</span><br></pre></td></tr></table></figure><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。<br><a id="more"></a><br>请你实现这个将字符串进行指定行数变换的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 3</span><br><span class="line">输出: &quot;LCIRETOESIIGEDHN&quot;</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 4</span><br><span class="line">输出: &quot;LDREOEIIECIHNTSG&quot;</span><br></pre></td></tr></table></figure><p>解释:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L     D     R</span><br><span class="line">E   O E   I I</span><br><span class="line">E C   I H   N</span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>拿到这个题目，第一时间就可以想到，根据题中图示构造二维数组，先将数据按照相应的样子存储进去，最后再从数组中按行取出，但是这样会有占用更多内存空间的风险。所以，我这边还思考了第二种解法：就是直接根据规律计算出下一个要输出的字符的下标，直接输出即可，无需再创建多余的二维数组。</p><ul><li>第一种解法：构造二维数组</li></ul><p>构造二位数组最主要的就是计算出这个二维数组有多少列，列数有了，按照Z型规律将原字符串塞进去就行了，计算列数代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private int getColNum(String s, int n) &#123;</span><br><span class="line">        int x = s.length() / (2 * n - 2);</span><br><span class="line">        int y = s.length() % (2 * n - 2);</span><br><span class="line">        int l = x + 1 + x * (n - 2);</span><br><span class="line">        if (y &gt;= n) &#123;</span><br><span class="line">            l = l + 1 + y % n;</span><br><span class="line">        &#125;</span><br><span class="line">        return l;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>第二种解法：计算下一个要输出的字符的下标<br>直接看github代码吧：<a href="https://github.com/Fatezhang/DataStructureAndAlgorithm/tree/master/Algorithm/src/main/java/Alogrithm/Alogrithm/ZigZagConversion" target="_blank" rel="noopener">点这里</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目如下&quot;&gt;&lt;a href=&quot;#题目如下&quot; class=&quot;headerlink&quot; title=&quot;题目如下&quot;&gt;&lt;/a&gt;题目如下&lt;/h4&gt;&lt;p&gt;将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。&lt;/p&gt;
&lt;p&gt;比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;L   C   I   R&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E T O E S I I G&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E   D   H   N&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法题解" scheme="http://zhangjiaheng.cn/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="leetcode" scheme="http://zhangjiaheng.cn/tags/leetcode/"/>
    
      <category term="算法题解" scheme="http://zhangjiaheng.cn/tags/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java中map新的骚操作</title>
    <link href="http://zhangjiaheng.cn/blog/20181209/Java%E4%B8%ADmap%E6%96%B0%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
    <id>http://zhangjiaheng.cn/blog/20181209/Java中map新的骚操作/</id>
    <published>2018-12-09T15:03:05.000Z</published>
    <updated>2019-04-05T04:46:27.297Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下："><a href="#在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：" class="headerlink" title="在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下："></a>在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：</h4><blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>computeIfPresent</code> 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null<br><code>computeIfAbsent</code>  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值<br><code>compute</code>          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public class MapTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(1,&quot;zhang&quot;);</span><br><span class="line">        // computeIfPresent 根据之前的key/value 如果oldValue 不为null 则根据提供的方法返回一个新的值 并进行新值对旧值的替换</span><br><span class="line">        System.out.println(&quot; 1 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class="line">            return key + value;//原值不为null新值不为null 新值替换旧值</span><br><span class="line">        &#125;));</span><br><span class="line">        // 否则删除键值对</span><br><span class="line">        System.out.println(&quot; 2 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class="line">            return null;//原值不为null新值为null 删除键值对</span><br><span class="line">        &#125;));</span><br><span class="line">        map.put(1,null);</span><br><span class="line">        System.out.println(&quot; 3 ---&gt; &quot; + map.computeIfPresent(1,(key,value)-&gt;&#123;</span><br><span class="line">            return &quot;jiaheng&quot;;//原值为null 不做更改</span><br><span class="line">        &#125;));</span><br><span class="line">        // computeIfAbsent 根据之前的key 如果旧值为空或者key不存在 就按照方法用新值替换旧值 新值为null不做替换</span><br><span class="line">        map.put(1,&quot;zhang&quot;);</span><br><span class="line">        System.out.println(&quot; 4 ---&gt; &quot; + map.computeIfAbsent(1,k-&gt;&#123;</span><br><span class="line">            return null;// 不会被替换旧值 返回原值</span><br><span class="line">        &#125;));</span><br><span class="line">        System.out.println(&quot; 5 ---&gt; &quot; + map.computeIfAbsent(2,k-&gt;&#123;</span><br><span class="line">            k = k*k;</span><br><span class="line">            return k.toString();// key=2不存在 直接新建并存入新值</span><br><span class="line">        &#125;));</span><br><span class="line">        // compute类似于computeIfAbsent和computeIfPresent的合体</span><br><span class="line">        map.put(1,null);</span><br><span class="line">        System.out.println(&quot; 6 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class="line">            return &quot;张&quot;;// 原值为null新值不为null 新值替换旧值 此处与computeIfPresent不同</span><br><span class="line">        &#125;));</span><br><span class="line">        System.out.println(&quot; 7 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class="line">            v = (k*10) + v;</span><br><span class="line">            return v;// 新值不为null 替换旧值</span><br><span class="line">        &#125;));</span><br><span class="line">        System.out.println(&quot; 8 ---&gt; &quot; + map.compute(1,(k,v)-&gt;&#123;</span><br><span class="line">            return null;// 新值为null 删除键值对</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        // 总结</span><br><span class="line">        // computeIfPresent 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null</span><br><span class="line">        // computeIfAbsent  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值</span><br><span class="line">        // compute          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：&quot;&gt;&lt;a href=&quot;#在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：&quot; class=&quot;headerlink&quot; title=&quot;在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：&quot;&gt;&lt;/a&gt;在Java8中对于Map的操作新增的compute之类的方法，对于开发中很有帮助，在此处整理一下其用法，以及方法之间的异同，具体的先总结一下如下：&lt;/h4&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h4&gt;&lt;p&gt;&lt;code&gt;computeIfPresent&lt;/code&gt; 就是根据方法来，返回方法中的值对原值进行替换，新的为null就删除键值对，但是原值为null新值不为null依然返回null&lt;br&gt;&lt;code&gt;computeIfAbsent&lt;/code&gt;  就是根据旧值来，旧的没有再根据方法返回的来，旧值存在就返回旧值&lt;br&gt;&lt;code&gt;compute&lt;/code&gt;          就是两者结合，新值为null，就删除键值对；新值不为null就进行替换。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="开发日记" scheme="http://zhangjiaheng.cn/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>nodepad++不用插件去重的方法</title>
    <link href="http://zhangjiaheng.cn/blog/20181112/nodepad-%E4%B8%8D%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://zhangjiaheng.cn/blog/20181112/nodepad-不用插件去重的方法/</id>
    <published>2018-11-12T05:54:14.000Z</published>
    <updated>2019-04-05T04:46:27.305Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中，当我们需要对一个文本中的行进行去重统计的时候，会发现对于文本的去重并不是那么好处理。而nodepad++的去重插件一般人又懒得去安装，不巧在网上找到这样一个去重的小技巧，即使用正则表达式进行去重，简直方便快捷。<br>在这里分享出来，希望大家能够用的上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(.*?)$\s+?^(?=.*^\1$)</span><br></pre></td></tr></table></figure></p><p><img src="https://blog.yimik.com/wp-content/uploads/2015/11/rm_duplicate_rows.png" alt="使用nodepad++去重"></p><p>点击全部替换，就可以将重复行全部去掉喽</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在工作中，当我们需要对一个文本中的行进行去重统计的时候，会发现对于文本的去重并不是那么好处理。而nodepad++的去重插件一般人又懒得去安装，不巧在网上找到这样一个去重的小技巧，即使用正则表达式进行去重，简直方便快捷。&lt;br&gt;在这里分享出来，希望大家能够用的上。&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="开发工具" scheme="http://zhangjiaheng.cn/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发日记" scheme="http://zhangjiaheng.cn/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="工作技巧" scheme="http://zhangjiaheng.cn/tags/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="nodepad++" scheme="http://zhangjiaheng.cn/tags/nodepad/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客文章置顶方式</title>
    <link href="http://zhangjiaheng.cn/blog/20180904/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E6%96%B9%E5%BC%8F/"/>
    <id>http://zhangjiaheng.cn/blog/20180904/hexo博客文章置顶方式/</id>
    <published>2018-09-04T11:51:53.000Z</published>
    <updated>2019-04-05T04:46:27.299Z</updated>
    
    <content type="html"><![CDATA[<h3 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h3><h4 id="目前已经有修改后支持置顶的仓库，可以直接用以下命令安装"><a href="#目前已经有修改后支持置顶的仓库，可以直接用以下命令安装" class="headerlink" title="目前已经有修改后支持置顶的仓库，可以直接用以下命令安装"></a>目前已经有修改后支持置顶的仓库，可以直接用以下命令安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="然后在需要置顶的文章的Front-matter中加上top-true即可。比如下面这篇文章："><a href="#然后在需要置顶的文章的Front-matter中加上top-true即可。比如下面这篇文章：" class="headerlink" title="然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章："></a>然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo博客置顶</span><br><span class="line">date: 2017-09-08 12:00:25</span><br><span class="line">categories: 博客搭建系列</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志："><a href="#到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：" class="headerlink" title="到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志："></a>到目前为止，置顶功能已经可以实现了。下面可以设置明确的置顶标志：</h4><h5 id="打开：-blog-themes-next-layout-macro-目录下的post-swig文件，定位到-lt-div-class-quot-post-meta-quot-gt-标签下，紧接着下一行插入如下代码："><a href="#打开：-blog-themes-next-layout-macro-目录下的post-swig文件，定位到-lt-div-class-quot-post-meta-quot-gt-标签下，紧接着下一行插入如下代码：" class="headerlink" title="打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到&lt;div class=&quot;post-meta&quot;&gt;标签下，紧接着下一行插入如下代码："></a>打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，紧接着下一行插入如下代码：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><hr><p>至此，博客置顶的方式就全部完成了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;博文置顶&quot;&gt;&lt;a href=&quot;#博文置顶&quot; class=&quot;headerlink&quot; title=&quot;博文置顶&quot;&gt;&lt;/a&gt;博文置顶&lt;/h3&gt;&lt;h4 id=&quot;目前已经有修改后支持置顶的仓库，可以直接用以下命令安装&quot;&gt;&lt;a href=&quot;#目前已经有修改后支持置顶的仓库，可以直接用以下命令安装&quot; class=&quot;headerlink&quot; title=&quot;目前已经有修改后支持置顶的仓库，可以直接用以下命令安装&quot;&gt;&lt;/a&gt;目前已经有修改后支持置顶的仓库，可以直接用以下命令安装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm uninstall hexo-generator-index --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-index-pin-top --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hexo博客配置" scheme="http://zhangjiaheng.cn/categories/hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="开发日记" scheme="http://zhangjiaheng.cn/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="hexo" scheme="http://zhangjiaheng.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>泰国7天6晚自由行攻略</title>
    <link href="http://zhangjiaheng.cn/blog/20180904/%E6%B3%B0%E5%9B%BD7%E5%A4%A96%E6%99%9A%E8%87%AA%E7%94%B1%E8%A1%8C%E6%94%BB%E7%95%A5/"/>
    <id>http://zhangjiaheng.cn/blog/20180904/泰国7天6晚自由行攻略/</id>
    <published>2018-09-04T11:38:45.000Z</published>
    <updated>2019-04-18T15:32:18.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>人生不可能是一场说走就走的旅行，但心怀远方的人，一定要时刻做着说走就走的准备！</p></blockquote><font face="STCAIYUN">关于去泰国这件事情，可能发生的很突然，但是没关系，既然决定了，就把它安排在计划里。</font><h3 id="一、出行前的准备"><a href="#一、出行前的准备" class="headerlink" title="一、出行前的准备"></a>一、出行前的准备</h3><h4 id="1、护照-amp-签证"><a href="#1、护照-amp-签证" class="headerlink" title="1、护照&amp;签证"></a>1、护照&amp;签证</h4><p>我是在杭州工作，在杭州工作社保交满一年，就可以办护照了。拿着身份证在西湖区行政服务中心的出入境管理那儿就可以办理了。现在一楼自助打印下社保证明，然后去后面的楼，出入境办理区按照流程办理即可。大概一个多礼拜就能拿到护照，我也没想到有这么快。</p><p>签证是在淘宝上买的，260￥。七个工作日到手。</p><h4 id="2、泰铢-amp-电话卡-amp-出入境-amp-去泰国的必备软件-amp-其他"><a href="#2、泰铢-amp-电话卡-amp-出入境-amp-去泰国的必备软件-amp-其他" class="headerlink" title="2、泰铢&amp;电话卡&amp;出入境&amp;去泰国的必备软件&amp;其他"></a>2、泰铢&amp;电话卡&amp;出入境&amp;去泰国的必备软件&amp;其他</h4><p>泰国新规定，过境签、落地签-10000泰铢或等值外币现金（每人），20000泰铢（家庭）；<br>旅游签-20000泰铢或等值外币现金（每人），40000泰铢（家庭），抽查到概率很低，一般落地签会查的吧。但是网上说好像都不查的，或者很少查，但还是换两千的吧。</p><p>然后再淘宝买泰国7天happy卡，<a href="https://traveldetail.fliggy.com/item.htm?spm=a230r.1.14.1.42f77cb9MwHKZ4&amp;id=38255797452&amp;ns=1&amp;abbucket=7&amp;smToken=ef69fda777d249bab6581b59d4cb9a82&amp;smSign=twzGgFTirKEEIRtKkNLrYQ%3D%3D" target="_blank" rel="noopener">我买的是这家的</a>，8天无限流量，4G。</p><p>入境时需要填写出入境卡，然后和护照一起交给海关查看盖章。下面是入境卡中文说明图：<br><img src="http://ol3d80aa0.bkt.clouddn.com/%E6%B3%B0%E5%9B%BD%E5%87%BA%E5%85%A5%E5%A2%83%E5%8D%A1%E4%B8%AD%E6%96%87.jpg" alt="出入境卡"></p><p>一般情况下，在乘坐航班时常会有工作人员在抵达目的地钱给乘客发放出入境卡，以便乘客提前填好出入境卡，方便出关。护照也很重要，可以在国内出发前复印几份护照一定要放行李箱，不要随身携带。</p><a id="more"></a><h3 id="END-其他一些实用信息"><a href="#END-其他一些实用信息" class="headerlink" title="END - 其他一些实用信息"></a>END - 其他一些实用信息</h3><blockquote><h4 id="大使馆-领事馆"><a href="#大使馆-领事馆" class="headerlink" title="大使馆/领事馆"></a>大使馆/领事馆</h4></blockquote><p>中国驻泰国大使馆<br>地址：NO.57, Racgadapisek Road, Bangkok<br>电话：+66-02-2450088<br>领事保护电话：+66-854833327（24小时值班手机），+66-02-2457010（工作日9：00-17：00）</p><p>中国驻清迈总领事馆<br>地址：111 Changloh Road, Haiya District, Chiangmai<br>电话：+66-53-280380，+66-53-276125，+66-53-276457</p><p>中国驻宋卡总领事馆（近普吉岛、苏梅岛、甲米）<br>地址：9 Sadao Road, Songkhla<br>电话：+66-74-322034<br>领事保护电话：+66-817665560</p><p>中国驻宋卡总领馆驻普吉领事办公室<br>电话：+66-76-304219<br>领事保护电话：+66-945956168（中文、泰文），+66-945986859（中文）</p><p>中国驻孔敬总领馆<br>地址：142/44 Moo 2，Rob-Bueng Rd.，Nai-Muang， Muang， Khon Kaen<br>电话：+66-43-226873</p><blockquote><h4 id="紧急电话"><a href="#紧急电话" class="headerlink" title="紧急电话"></a>紧急电话</h4></blockquote><p>警察:123/191<br>火警:199<br>救护:2460199<br>领事:022-457010<br>大使馆:022-457044<br>旅游投诉:1155</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;人生不可能是一场说走就走的旅行，但心怀远方的人，一定要时刻做着说走就走的准备！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;font face=&quot;STCAIYUN&quot;&gt;关于去泰国这件事情，可能发生的很突然，但是没关系，既然决定了，就把它安排在计划里。&lt;/font&gt;

&lt;h3 id=&quot;一、出行前的准备&quot;&gt;&lt;a href=&quot;#一、出行前的准备&quot; class=&quot;headerlink&quot; title=&quot;一、出行前的准备&quot;&gt;&lt;/a&gt;一、出行前的准备&lt;/h3&gt;&lt;h4 id=&quot;1、护照-amp-签证&quot;&gt;&lt;a href=&quot;#1、护照-amp-签证&quot; class=&quot;headerlink&quot; title=&quot;1、护照&amp;amp;签证&quot;&gt;&lt;/a&gt;1、护照&amp;amp;签证&lt;/h4&gt;&lt;p&gt;我是在杭州工作，在杭州工作社保交满一年，就可以办护照了。拿着身份证在西湖区行政服务中心的出入境管理那儿就可以办理了。现在一楼自助打印下社保证明，然后去后面的楼，出入境办理区按照流程办理即可。大概一个多礼拜就能拿到护照，我也没想到有这么快。&lt;/p&gt;
&lt;p&gt;签证是在淘宝上买的，260￥。七个工作日到手。&lt;/p&gt;
&lt;h4 id=&quot;2、泰铢-amp-电话卡-amp-出入境-amp-去泰国的必备软件-amp-其他&quot;&gt;&lt;a href=&quot;#2、泰铢-amp-电话卡-amp-出入境-amp-去泰国的必备软件-amp-其他&quot; class=&quot;headerlink&quot; title=&quot;2、泰铢&amp;amp;电话卡&amp;amp;出入境&amp;amp;去泰国的必备软件&amp;amp;其他&quot;&gt;&lt;/a&gt;2、泰铢&amp;amp;电话卡&amp;amp;出入境&amp;amp;去泰国的必备软件&amp;amp;其他&lt;/h4&gt;&lt;p&gt;泰国新规定，过境签、落地签-10000泰铢或等值外币现金（每人），20000泰铢（家庭）；&lt;br&gt;旅游签-20000泰铢或等值外币现金（每人），40000泰铢（家庭），抽查到概率很低，一般落地签会查的吧。但是网上说好像都不查的，或者很少查，但还是换两千的吧。&lt;/p&gt;
&lt;p&gt;然后再淘宝买泰国7天happy卡，&lt;a href=&quot;https://traveldetail.fliggy.com/item.htm?spm=a230r.1.14.1.42f77cb9MwHKZ4&amp;amp;id=38255797452&amp;amp;ns=1&amp;amp;abbucket=7&amp;amp;smToken=ef69fda777d249bab6581b59d4cb9a82&amp;amp;smSign=twzGgFTirKEEIRtKkNLrYQ%3D%3D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我买的是这家的&lt;/a&gt;，8天无限流量，4G。&lt;/p&gt;
&lt;p&gt;入境时需要填写出入境卡，然后和护照一起交给海关查看盖章。下面是入境卡中文说明图：&lt;br&gt;&lt;img src=&quot;http://ol3d80aa0.bkt.clouddn.com/%E6%B3%B0%E5%9B%BD%E5%87%BA%E5%85%A5%E5%A2%83%E5%8D%A1%E4%B8%AD%E6%96%87.jpg&quot; alt=&quot;出入境卡&quot;&gt;&lt;/p&gt;
&lt;p&gt;一般情况下，在乘坐航班时常会有工作人员在抵达目的地钱给乘客发放出入境卡，以便乘客提前填好出入境卡，方便出关。护照也很重要，可以在国内出发前复印几份护照一定要放行李箱，不要随身携带。&lt;/p&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://zhangjiaheng.cn/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="个人随笔" scheme="http://zhangjiaheng.cn/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>dubbo获取注册中心的实例bean</title>
    <link href="http://zhangjiaheng.cn/blog/20180719/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0-20180718/"/>
    <id>http://zhangjiaheng.cn/blog/20180719/开发日记-20180718/</id>
    <published>2018-07-18T18:07:56.000Z</published>
    <updated>2019-04-22T14:13:13.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发日记-20180718"><a href="#开发日记-20180718" class="headerlink" title="开发日记 20180718"></a>开发日记 20180718</h2><h3 id="com-alibaba-dubbo-remoting-transport-AbstractCodec-checkPayload-ERROR-Data-length-too-large"><a href="#com-alibaba-dubbo-remoting-transport-AbstractCodec-checkPayload-ERROR-Data-length-too-large" class="headerlink" title="com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large"></a>com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large: 11557050, max payload: 8388608 java.io.IOException: Data length too large: 11557050, max payload: 838860</span><br></pre></td></tr></table></figure><p>在使用dubbo框架开发的时候，需要做一个导出csv文件的功能，查询大量的数据然后在提供者这边进行处理导出，其中数据达到过20万行以上，几十M的数据，抛出了这样一个异常。遇到服务提供者从数据库查询或者其他地方返回过大的对象，导致报错时，尽管有办法取消这个数据长度的限制，但是这并不符合程序开发的初衷。我们需要将对于数据的处理放在业务层，我在这里做了异步导出，给前端返回的仅仅是一个程序完成的状态，完美的解决了这个问题。</p><a id="more"></a><h3 id="在dubbo消费者服务中写aop方法拦截工具类中的方法"><a href="#在dubbo消费者服务中写aop方法拦截工具类中的方法" class="headerlink" title="在dubbo消费者服务中写aop方法拦截工具类中的方法"></a>在dubbo消费者服务中写aop方法拦截工具类中的方法</h3><p>尽管服务的提供者和消费者都引入的工具类模块的依赖，但是拦截器的实际拦截的还是那个实际本身所在模块的方法。如果工具类是在消费者service层被使用的，那么在上层模块的拦截器是无法拦截到这个方法的。</p><h3 id="在dubbo服务中手动获取注册的提供者的bean"><a href="#在dubbo服务中手动获取注册的提供者的bean" class="headerlink" title="在dubbo服务中手动获取注册的提供者的bean"></a>在dubbo服务中手动获取注册的提供者的bean</h3><p>在这里犯的错：以为通过SpringContextHolder.getBean()可以获取，是我傻逼了，dubbo中的服务怎么能用spring上下文获取呢。这里我使用dubbo的方式完成了这个功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取服务的代理对象</span><br><span class="line"> *</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static &lt;T&gt; T getReferenceConfig(String appName,String address,Class&lt;?&gt; interfaceClass) &#123;</span><br><span class="line">    String key  = interfaceClass.getName();</span><br><span class="line">    ReferenceConfig&lt;T&gt; referenceConfig =  (ReferenceConfig&lt;T&gt;)referenceCache.get(key);</span><br><span class="line">    if(referenceConfig == null)&#123;</span><br><span class="line">        referenceConfig = new ReferenceConfig&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">        referenceConfig.setApplication(application);</span><br><span class="line">        referenceConfig.setRegistry(getRegistryConfig(appName,address));</span><br><span class="line">        referenceConfig.setInterface(interfaceClass);</span><br><span class="line"></span><br><span class="line">        referenceCache.put(key,referenceConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return referenceConfig.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开发日记-20180718&quot;&gt;&lt;a href=&quot;#开发日记-20180718&quot; class=&quot;headerlink&quot; title=&quot;开发日记 20180718&quot;&gt;&lt;/a&gt;开发日记 20180718&lt;/h2&gt;&lt;h3 id=&quot;com-alibaba-dubbo-remoting-transport-AbstractCodec-checkPayload-ERROR-Data-length-too-large&quot;&gt;&lt;a href=&quot;#com-alibaba-dubbo-remoting-transport-AbstractCodec-checkPayload-ERROR-Data-length-too-large&quot; class=&quot;headerlink&quot; title=&quot;com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large&quot;&gt;&lt;/a&gt;com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload() ERROR  Data length too large: 11557050, max payload: 8388608 java.io.IOException: Data length too large: 11557050, max payload: 838860&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在使用dubbo框架开发的时候，需要做一个导出csv文件的功能，查询大量的数据然后在提供者这边进行处理导出，其中数据达到过20万行以上，几十M的数据，抛出了这样一个异常。遇到服务提供者从数据库查询或者其他地方返回过大的对象，导致报错时，尽管有办法取消这个数据长度的限制，但是这并不符合程序开发的初衷。我们需要将对于数据的处理放在业务层，我在这里做了异步导出，给前端返回的仅仅是一个程序完成的状态，完美的解决了这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="dubbo" scheme="http://zhangjiaheng.cn/categories/dubbo/"/>
    
    
      <category term="开发日记" scheme="http://zhangjiaheng.cn/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="dubbo" scheme="http://zhangjiaheng.cn/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>关于IDEA再从git或者svn上导入项目时不能加载字模块的问题</title>
    <link href="http://zhangjiaheng.cn/blog/20180708/%E5%85%B3%E4%BA%8EIDEA%E5%86%8D%E4%BB%8Egit%E6%88%96%E8%80%85svn%E4%B8%8A%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E6%97%B6%E4%B8%8D%E8%83%BD%E5%8A%A0%E8%BD%BD%E5%AD%97%E6%A8%A1%E5%9D%97%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://zhangjiaheng.cn/blog/20180708/关于IDEA再从git或者svn上导入项目时不能加载字模块的问题/</id>
    <published>2018-07-08T15:26:49.000Z</published>
    <updated>2019-04-05T04:46:27.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于IDEA再从git或者svn上导入项目时不能加载字模块的问题"><a href="#关于IDEA再从git或者svn上导入项目时不能加载字模块的问题" class="headerlink" title="关于IDEA再从git或者svn上导入项目时不能加载字模块的问题"></a>关于IDEA再从git或者svn上导入项目时不能加载字模块的问题</h3><blockquote><p>最近入职新公司，很多东西也都算是要从头学起。在之前公司用的都是eclipse，这边要求用IDEA，其实很早就知道这是一个非常强大的编译器，但平时没有机会使用，现在有机会用这个还是挺开心的。</p></blockquote><p>由于公司使用gitlab，在注册好账号导入代码的时候遇到一个情况，就是直接用IDEA的git工具导入的话会出现，maven项目的子模块无法被识别以及被管理的情况。事实上eclipse也有同样的问题。现在只说下使用IDEA遇到这个情况的解决办法。</p><a id="more"></a><h4 id="有两种解决方式。"><a href="#有两种解决方式。" class="headerlink" title="有两种解决方式。"></a>有两种解决方式。</h4><h5 id="1、手动将module添加到项目管理："><a href="#1、手动将module添加到项目管理：" class="headerlink" title="1、手动将module添加到项目管理："></a>1、手动将module添加到项目管理：</h5><ul><li>打开文件选项中的项目结构（快捷键ctrl+alt+shift+s）<br><a href="https://simimg.com/i/oLFwe" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/07/08/oLFwe.png" alt="oLFwe.png"></a></li><li>选择 模块-加号-导入module，手动将自己需要的模块一一导入进去<br><a href="https://simimg.com/i/oLTGd" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/07/08/oLTGd.png" alt="oLTGd.png"></a><h5 id="2、先将项目通过命令行导入到本机，然后通过IDEA的New-Project-from-Existing-Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了"><a href="#2、先将项目通过命令行导入到本机，然后通过IDEA的New-Project-from-Existing-Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了" class="headerlink" title="2、先将项目通过命令行导入到本机，然后通过IDEA的New Project from Existing Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了"></a>2、先将项目通过命令行导入到本机，然后通过IDEA的New Project from Existing Sources导入本地项目进来，这个直接就能够对所有模块进行代码管理了</h5><a href="https://simimg.com/i/oLXER" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/07/08/oLXER.md.png" alt="oLXER.md.png"></a><br><a href="https://simimg.com/i/oLm7r" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/07/08/oLm7r.md.png" alt="oLm7r.md.png"></a></li></ul><blockquote><p>从eclipse转到IDEA前几天是最艰难的，因为很多习惯不是说改就能改掉的，工具的使用总得需要一个学习的时间，但是等这段时间过去，后面一定会体会到IDEA的强大。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于IDEA再从git或者svn上导入项目时不能加载字模块的问题&quot;&gt;&lt;a href=&quot;#关于IDEA再从git或者svn上导入项目时不能加载字模块的问题&quot; class=&quot;headerlink&quot; title=&quot;关于IDEA再从git或者svn上导入项目时不能加载字模块的问题&quot;&gt;&lt;/a&gt;关于IDEA再从git或者svn上导入项目时不能加载字模块的问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最近入职新公司，很多东西也都算是要从头学起。在之前公司用的都是eclipse，这边要求用IDEA，其实很早就知道这是一个非常强大的编译器，但平时没有机会使用，现在有机会用这个还是挺开心的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于公司使用gitlab，在注册好账号导入代码的时候遇到一个情况，就是直接用IDEA的git工具导入的话会出现，maven项目的子模块无法被识别以及被管理的情况。事实上eclipse也有同样的问题。现在只说下使用IDEA遇到这个情况的解决办法。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://zhangjiaheng.cn/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发日记" scheme="http://zhangjiaheng.cn/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="IDEA" scheme="http://zhangjiaheng.cn/tags/IDEA/"/>
    
      <category term="git" scheme="http://zhangjiaheng.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>纪念即将结束的第一份工作</title>
    <link href="http://zhangjiaheng.cn/blog/20180628/%E7%BA%AA%E5%BF%B5%E5%8D%B3%E5%B0%86%E7%BB%93%E6%9D%9F%E7%9A%84%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%B7%A5%E4%BD%9C/"/>
    <id>http://zhangjiaheng.cn/blog/20180628/纪念即将结束的第一份工作/</id>
    <published>2018-06-28T14:20:45.000Z</published>
    <updated>2019-04-05T04:46:27.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="纪念即将-结束的第一份工作"><a href="#纪念即将-结束的第一份工作" class="headerlink" title="纪念即将 结束的第一份工作"></a>纪念<em><del>即将</del></em> 结束的第一份工作</h2><ol><li><h4 id="我一直都不知道自己想要得到些什么东西"><a href="#我一直都不知道自己想要得到些什么东西" class="headerlink" title="我一直都不知道自己想要得到些什么东西"></a>我一直都不知道自己想要得到些什么东西</h4><blockquote><ul><li>记得高中的时候，身边不管是家人还是老师，总会时刻不停在耳边说着：你需要如何如何学习，考上一个怎样的大学，进入一个怎么样的专业，以后找一个怎样的工作。可是当我听到这些话时总是会很反感。也许是叛逆，也许是这些对于我当时都是些虚无缥缈，很遥远的东西，我没有办法理解自己得到这些东西有什么用。但是虽然忠言不入耳，我还是得按照他们说的做。还好，大学上了一个普通的理工科一本。</li><li>当上了大学之后，没有了老师家长在耳边“絮叨”，更不知道自己要干什么了。记得当时参加各种社团，觉得在社团里面干的风风火火很牛逼，甚至课程都不上几节，最严重的时候好几周都不上课。浑浑噩噩的度过了大学的第一年之后，突然因为一个给学校编程培训班试听课凑人数的机会，让自动化专业的我接触到了软件开发这个方向。依然记得当时上课的老师，老范！当他用C语言在电脑上输出一串笑脸字符的时候，我当时的眼睛都亮了，我对和自己一块去凑人数的舍友说，这个人一定以后对我有很大的帮助，我一定要报名他的课程。后来真的觉得我是幸运的，老范是一个很有人格魅力的中年程序员 :) 。也是他让我知道了程序员是做什么的，也是他让我非常期待自己能够成为一个真正的软件开发者。<a id="more"></a></li><li>就这样我跟着老范从计算机基础，学到数据结构与算法，学计算机网络，MySQL，学习设计模式，学C++，后来又在另一个班学Java。计算机硬件方向专业的我，学完了软件专业学生要学的所有课程。终于大三，我找到了西安三星电子研究所的一份实习，写了两个月shell脚本，学习了Linux相关的知识以及自动化测试的东西，后来又在组内用PHP写了个网站，提供给大家进行会议的预定与提醒。现在想想这一切经验都是我的宝贵的财富.</li><li>实习结束后，工作却找的不是很顺利，也许是自己的实习经历没有太多做Java开发的东西，导致自己没有什么实际的项目经验。后来，我来了同※※。</li></ul></blockquote></li></ol><ol start="2"><li><h4 id="或许离开这里是我最正确的选择"><a href="#或许离开这里是我最正确的选择" class="headerlink" title="或许离开这里是我最正确的选择"></a>或许离开这里是我最正确的选择</h4><blockquote><ul><li>在拿到offer来到同※※之前，我觉得我来到了一个很好的大公司。事实上这里也没有很差，除了我所在的部门。同※※是国内最早做股票交易平台的软件公司，目前也有自己的大楼，装修的也很不错，很像一个一线的大型互联网公司。然而，只是很像而已。从一件很平常的事就看得出来：每天饭点，后勤部经理就站在食堂打饭窗口对打饭的员工喊，少打一点少打一点，他们吃不完！ … …</li><li>其实我刚来的时候觉得自己可以呆三年的，现在想想真的很抱歉，我得走了。并不是因为上面的“打饭”。我来到这里做的工作都是外包的，在B2B部门。我本来以为大公司的工作流程都很规范，没想到在这里刷新了我的三观哈哈。外包工作什么都得听客户的，乱改需求不说，自己公司的运维根本派不上用场，连tomcat的启动报错都不知道怎么解决，让我们作为开发的去同时做开发、测试、运维、项目经理、产品的活，想想就火大。项目经理把客户电话甩给你，自己沟通去，然后自己潇洒的下班。</li><li>唉ε=(′ο｀*)))，不想再说太多了，显得自己好像太小气，都要走了还要diss前公司。但是，我觉得我是真的得走了，而且我还算是忍得时间长的。我们组，比我来得晚，比我走的早的人，超过了10个。才一年啊。作为一个刚毕业一年的程序员，真的心好累。</li></ul></blockquote></li></ol><ol start="3"><li><h4 id="接下来的路少交点儿朋友，否则离开时会难受"><a href="#接下来的路少交点儿朋友，否则离开时会难受" class="headerlink" title="接下来的路少交点儿朋友，否则离开时会难受"></a>接下来的路少交点儿朋友，否则离开时会难受</h4><blockquote><ul><li>要走了要走了，却又感觉很难受。在这里，我接触过不少傻逼，但是也真的交到很多有趣的朋友。甚至有那种就算离职了，之后也不会断了联系的。在这个城市，原本独自一人的生活由他们，真的不会无聊。</li><li>天涯途上谁是客，散席时怎么分？ 也许有些人分开就不会再见，有些人想不见却总会出现在生活里。罢了，以后换到新的公司，不要再走心了。况且，真正值得走心的，也不会很多！</li></ul></blockquote></li></ol><h6 id="✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。-——《行歌》-·-陈鸿宇"><a href="#✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。-——《行歌》-·-陈鸿宇" class="headerlink" title="✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。  ——《行歌》 · 陈鸿宇"></a>✊成长是一场游戏，勇敢的人先开始。跌撞慌张前行，不说回头。  ——《行歌》 · 陈鸿宇</h6>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;纪念即将-结束的第一份工作&quot;&gt;&lt;a href=&quot;#纪念即将-结束的第一份工作&quot; class=&quot;headerlink&quot; title=&quot;纪念即将 结束的第一份工作&quot;&gt;&lt;/a&gt;纪念&lt;em&gt;&lt;del&gt;即将&lt;/del&gt;&lt;/em&gt; 结束的第一份工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;h4 id=&quot;我一直都不知道自己想要得到些什么东西&quot;&gt;&lt;a href=&quot;#我一直都不知道自己想要得到些什么东西&quot; class=&quot;headerlink&quot; title=&quot;我一直都不知道自己想要得到些什么东西&quot;&gt;&lt;/a&gt;我一直都不知道自己想要得到些什么东西&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;记得高中的时候，身边不管是家人还是老师，总会时刻不停在耳边说着：你需要如何如何学习，考上一个怎样的大学，进入一个怎么样的专业，以后找一个怎样的工作。可是当我听到这些话时总是会很反感。也许是叛逆，也许是这些对于我当时都是些虚无缥缈，很遥远的东西，我没有办法理解自己得到这些东西有什么用。但是虽然忠言不入耳，我还是得按照他们说的做。还好，大学上了一个普通的理工科一本。&lt;/li&gt;
&lt;li&gt;当上了大学之后，没有了老师家长在耳边“絮叨”，更不知道自己要干什么了。记得当时参加各种社团，觉得在社团里面干的风风火火很牛逼，甚至课程都不上几节，最严重的时候好几周都不上课。浑浑噩噩的度过了大学的第一年之后，突然因为一个给学校编程培训班试听课凑人数的机会，让自动化专业的我接触到了软件开发这个方向。依然记得当时上课的老师，老范！当他用C语言在电脑上输出一串笑脸字符的时候，我当时的眼睛都亮了，我对和自己一块去凑人数的舍友说，这个人一定以后对我有很大的帮助，我一定要报名他的课程。后来真的觉得我是幸运的，老范是一个很有人格魅力的中年程序员 :) 。也是他让我知道了程序员是做什么的，也是他让我非常期待自己能够成为一个真正的软件开发者。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://zhangjiaheng.cn/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="程序人生" scheme="http://zhangjiaheng.cn/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>关于git pull 拉取不到最新记录</title>
    <link href="http://zhangjiaheng.cn/blog/20180531/%E5%85%B3%E4%BA%8Egit-pull-%E6%8B%89%E5%8F%96%E4%B8%8D%E5%88%B0%E6%9C%80%E6%96%B0%E8%AE%B0%E5%BD%95/"/>
    <id>http://zhangjiaheng.cn/blog/20180531/关于git-pull-拉取不到最新记录/</id>
    <published>2018-05-31T03:39:17.000Z</published>
    <updated>2019-04-05T04:46:27.325Z</updated>
    
    <content type="html"><![CDATA[<p>//<br>//<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//~~~~~~~~~~~~~~~~~~~~~~o8888888o</span><br><span class="line">//~~~~~~~~~~~~~~~~~~~~~~88&quot;~.~&quot;88</span><br><span class="line">//~~~~~~~~~~~~~~~~~~~~~~(|~-_-~|)</span><br><span class="line">//~~~~~~~~~~~~~~~~~~~~~~0\~~=~~/0</span><br><span class="line">//~~~~~~~~~~~~~~~~~~~~___/`---&apos;\___</span><br><span class="line">//~~~~~~~~~~~~~~~~~~.&apos;~\\|~~~~~|//~&apos;.</span><br><span class="line">//~~~~~~~~~~~~~~~~~/~\\|||~~:~~|||//~\</span><br><span class="line">//~~~~~~~~~~~~~~~~/~_|||||~-:-~|||||-~\</span><br><span class="line">//~~~~~~~~~~~~~~~|~~~|~\\\~~-~~///~|~~~|</span><br><span class="line">//~~~~~~~~~~~~~~~|~\_|~~&apos;&apos;\---/&apos;&apos;~~|_/~|</span><br><span class="line">//~~~~~~~~~~~~~~~\~~.-\__~~&apos;-&apos;~~___/-.~/</span><br><span class="line">//~~~~~~~~~~~~~___&apos;.~.&apos;~~/--.--\~~`.~.&apos;___</span><br><span class="line">//~~~~~~~~~~.&quot;&quot;~&apos;&lt;~~`.___\_&lt;|&gt;_/___.&apos;~&gt;&apos;~&quot;&quot;.</span><br><span class="line">//~~~~~~~~~|~|~:~~`-~\`.;`\~_~/`;.`/~-~`~:~|~|</span><br><span class="line">//~~~~~~~~~\~~\~`_.~~~\_~__\~/__~_/~~~.-`~/~~/</span><br><span class="line">//~~~~~=====`-.____`.___~\_____/___.-`___.-&apos;=====</span><br><span class="line">//~~~~~~~~~~~~~~~~~~~~~~~`=---=&apos;</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure></p><p>//<br>//<del>~</del><del>~</del><del>~</del>佛祖保佑<del>~</del>~~~~永无BUG<br>//<br>//<br>//</p><blockquote><p>使用<code>git pull</code> 获取不到最新的记录，判断应该是某些时候未pull先commit导致的，使用命令：<code>git pull origin master</code>即可解决</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;//&lt;br&gt;//&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="git" scheme="http://zhangjiaheng.cn/categories/git/"/>
    
    
      <category term="开发日记" scheme="http://zhangjiaheng.cn/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【陈年风楼】VLOG-000001 一个普通的程序员的普通的一天</title>
    <link href="http://zhangjiaheng.cn/blog/20180421/vlog-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
    <id>http://zhangjiaheng.cn/blog/20180421/vlog-程序员的一天/</id>
    <published>2018-04-21T02:21:02.000Z</published>
    <updated>2019-04-05T04:46:27.314Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=22367659&cid=37047708&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 100%;height: 700px"> </iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;//player.bilibili.com/player.html?aid=22367659&amp;cid=37047708&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot;
      
    
    </summary>
    
      <category term="程序人生" scheme="http://zhangjiaheng.cn/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="程序人生" scheme="http://zhangjiaheng.cn/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
</feed>
